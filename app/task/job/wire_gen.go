// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package job

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/soukengo/gopkg/component/discovery"
	"github.com/soukengo/gopkg/component/server"
	"github.com/soukengo/gopkg/log"
	"rockimserver/app/task/job/biz"
	"rockimserver/app/task/job/conf"
	"rockimserver/app/task/job/data"
	"rockimserver/app/task/job/data/grpc"
	"rockimserver/app/task/job/data/grpc/comet"
	server2 "rockimserver/app/task/job/server"
	"rockimserver/app/task/job/service"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(logger log.Logger, config *conf.Config, discoveryConfig *discovery.Config, serverConfig *server.Config) (*kratos.App, error) {
	registryDiscovery, err := discovery.NewDiscovery(discoveryConfig)
	if err != nil {
		return nil, err
	}
	manager, err := comet.NewCometManager(config, registryDiscovery)
	if err != nil {
		return nil, err
	}
	cometRepo := data.NewCometRepo(manager)
	channelQueryAPIClient, err := grpc.NewChannelQueryAPIClient(registryDiscovery)
	if err != nil {
		return nil, err
	}
	channelRepo := data.NewChannelRepo(channelQueryAPIClient)
	cometUseCase := biz.NewCometUseCase(cometRepo, channelRepo)
	cometService := service.NewCometService(cometUseCase)
	serviceGroup := server2.NewServiceGroup(cometService)
	jobServer, err := server2.NewJobServer(serverConfig, serviceGroup, logger)
	if err != nil {
		return nil, err
	}
	app := newApp(logger, config, jobServer)
	return app, nil
}
