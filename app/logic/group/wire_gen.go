// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package group

import (
	"github.com/go-kratos/kratos/v2"
	"rockimserver/app/logic/group/biz"
	"rockimserver/app/logic/group/conf"
	"rockimserver/app/logic/group/data"
	server2 "rockimserver/app/logic/group/server"
	"rockimserver/app/logic/group/service"
	"rockimserver/pkg/component/cache"
	"rockimserver/pkg/component/database/mongo"
	"rockimserver/pkg/component/database/redis"
	"rockimserver/pkg/component/discovery"
	"rockimserver/pkg/component/server"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(config *conf.Config, discoveryConfig *discovery.Config, serverConfig *server.Config, mongoConfig *mongo.Config, redisConfig *redis.Config, cacheConfig *cache.Config) (*kratos.App, error) {
	client := mongo.NewClient(mongoConfig)
	redisClient := redis.NewClient(redisConfig)
	chatRoomRepo := data.NewGroupRepo(client, redisClient)
	chatRoomUseCase := biz.NewChatRoomUseCase(chatRoomRepo)
	chatRoomService := service.NewChatRoomService(chatRoomUseCase)
	grpcServer := server2.NewGRPCServer(serverConfig, chatRoomService)
	registrar, err := discovery.NewRegistrar(discoveryConfig)
	if err != nil {
		return nil, err
	}
	app := newApp(config, grpcServer, registrar)
	return app, nil
}
