// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package group

import (
	"github.com/go-kratos/kratos/v2"
	"rockimserver/app/logic/group/biz"
	"rockimserver/app/logic/group/conf"
	"rockimserver/app/logic/group/data"
	cache2 "rockimserver/app/logic/group/data/cache"
	"rockimserver/app/logic/group/data/database"
	server2 "rockimserver/app/logic/group/server"
	"rockimserver/app/logic/group/service"
	"github.com/soukengo/gopkg/component/cache"
	"github.com/soukengo/gopkg/component/database/mongo"
	"github.com/soukengo/gopkg/component/database/redis"
	"github.com/soukengo/gopkg/component/discovery"
	"github.com/soukengo/gopkg/component/idgen"
	"github.com/soukengo/gopkg/component/lock"
	"github.com/soukengo/gopkg/component/server"
	"github.com/soukengo/gopkg/log"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(logger log.Logger, config *conf.Config, discoveryConfig *discovery.Config, serverConfig *server.Config, mongoConfig *mongo.Config, redisConfig *redis.Config, cacheConfig *cache.Config) (*kratos.App, error) {
	client := mongo.NewClient(mongoConfig)
	groupData := database.NewChatRoomData(client)
	redisClient := redis.NewClient(redisConfig, logger)
	cacheGroupData := cache2.NewGroupData(redisClient, cacheConfig)
	groupRepo := data.NewGroupRepo(groupData, cacheGroupData)
	chatRoomMemberData := cache2.NewChatRoomMemberData(redisClient, cacheConfig)
	chatRoomMemberRepo := data.NewChatRoomMemberRepo(chatRoomMemberData)
	generator := idgen.NewMongoGenerator()
	builder := lock.NewRedisBuilder(logger, redisClient)
	chatRoomMemberManager := biz.NewChatRoomMemberManager(groupRepo, chatRoomMemberRepo, generator)
	chatRoomUseCase := biz.NewChatRoomUseCase(groupRepo, chatRoomMemberRepo, generator, builder, chatRoomMemberManager)
	chatRoomService := service.NewChatRoomService(chatRoomUseCase)
	chatRoomMemberUseCase := biz.NewChatRoomMemberUseCase(groupRepo, chatRoomMemberRepo, builder, generator, chatRoomMemberManager)
	chatRoomMemberService := service.NewChatRoomMemberService(chatRoomMemberUseCase)
	serviceGroup := server2.NewServiceGroup(chatRoomService, chatRoomMemberService)
	grpcServer := server2.NewGRPCServer(serverConfig, serviceGroup)
	registrar, err := discovery.NewRegistrar(discoveryConfig)
	if err != nil {
		return nil, err
	}
	app := newApp(logger, config, grpcServer, registrar)
	return app, nil
}
