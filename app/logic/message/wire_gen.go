// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package message

import (
	"github.com/go-kratos/kratos/v2"
	"rockimserver/app/logic/message/biz"
	"rockimserver/app/logic/message/conf"
	"rockimserver/app/logic/message/data"
	server2 "rockimserver/app/logic/message/server"
	"rockimserver/app/logic/message/service"
	"rockimserver/pkg/component/cache"
	"rockimserver/pkg/component/database/mongo"
	"rockimserver/pkg/component/database/redis"
	"rockimserver/pkg/component/discovery"
	"rockimserver/pkg/component/idgen"
	"rockimserver/pkg/component/lock"
	"rockimserver/pkg/component/server"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(config *conf.Config, discoveryConfig *discovery.Config, serverConfig *server.Config, mongoConfig *mongo.Config, redisConfig *redis.Config, cacheConfig *cache.Config) (*kratos.App, error) {
	client := mongo.NewClient(mongoConfig)
	redisClient := redis.NewClient(redisConfig)
	messageRepo := data.NewMessageRepo(client, redisClient)
	builder := lock.NewRedisBuilder(redisClient)
	generator := idgen.NewMongoGenerator()
	messageUseCase := biz.NewMessageUseCase(messageRepo, builder, generator)
	messageService := service.NewMessageService(messageUseCase)
	serviceGroup := server2.NewServiceGroup(messageService)
	grpcServer := server2.NewGRPCServer(serverConfig, serviceGroup)
	registrar, err := discovery.NewRegistrar(discoveryConfig)
	if err != nil {
		return nil, err
	}
	app := newApp(config, grpcServer, registrar)
	return app, nil
}
