// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package message

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/soukengo/gopkg/component/cache"
	"github.com/soukengo/gopkg/component/database"
	"github.com/soukengo/gopkg/component/discovery"
	"github.com/soukengo/gopkg/component/idgen"
	"github.com/soukengo/gopkg/log"
	"rockimserver/app/logic/message/biz"
	"rockimserver/app/logic/message/conf"
	"rockimserver/app/logic/message/data"
	cache2 "rockimserver/app/logic/message/data/cache"
	database2 "rockimserver/app/logic/message/data/database"
	"rockimserver/app/logic/message/data/grpc"
	"rockimserver/app/logic/message/server"
	"rockimserver/app/logic/message/service"
	"rockimserver/app/logic/message/task"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(logger log.Logger, config *conf.Config, discoveryConfig *discovery.Config, confServer *conf.Server, databaseConfig *database.Config, cacheConfig *cache.Config) (*kratos.App, error) {
	delayed, err := server.NewQueueServer(confServer, logger)
	if err != nil {
		return nil, err
	}
	manager := cache2.NewCacheManager(config, logger)
	messageData := cache2.NewMessageData(manager, cacheConfig)
	databaseManager := database2.NewDatabaseManager(config)
	databaseMessageData := database2.NewMessageSequenceData(databaseManager)
	messageRepo := data.NewMessageRepo(messageData, databaseMessageData)
	messageDeliveryData := cache2.NewMessageDeliveryData(manager, cacheConfig)
	messageDeliveryRepo := data.NewMessageDeliveryRepo(messageDeliveryData)
	messageBoxData := cache2.NewMessageBoxData(manager, cacheConfig)
	messageBoxRepo := data.NewMessageBoxRepo(messageBoxData)
	registryDiscovery, err := discovery.NewDiscovery(discoveryConfig)
	if err != nil {
		return nil, err
	}
	userAPIClient, err := grpc.NewUserAPIClient(registryDiscovery)
	if err != nil {
		return nil, err
	}
	userRepo := data.NewUserRepo(userAPIClient)
	groupAPIClient, err := grpc.NewGroupAPIClient(registryDiscovery)
	if err != nil {
		return nil, err
	}
	groupMemberAPIClient, err := grpc.NewGroupMemberAPIClient(registryDiscovery)
	if err != nil {
		return nil, err
	}
	groupRepo := data.NewGroupRepo(groupAPIClient, groupMemberAPIClient)
	generator := idgen.NewMongoGenerator()
	messageUseCase := biz.NewMessageUseCase(messageRepo, messageDeliveryRepo, messageBoxRepo, userRepo, groupRepo, generator, delayed)
	messageService := service.NewMessageService(messageUseCase)
	serviceRegistry := server.NewServiceRegistry(messageService)
	grpcServer := server.NewGRPCServer(confServer, serviceRegistry)
	messageQueryRepo := data.NewMessageQueryRepo(messageData)
	cometAPIClient, err := grpc.NewCometAPIClient(registryDiscovery)
	if err != nil {
		return nil, err
	}
	pushRepo := data.NewPushMessageRepo(cometAPIClient)
	messageDeliveryUseCase := biz.NewMessageDeliveryUseCase(messageDeliveryRepo, messageQueryRepo, pushRepo)
	messageTask := task.NewMessageTask(messageDeliveryUseCase)
	taskRegistry := server.NewTaskRegistry(messageTask)
	serverGroup := server.NewServerGroup(delayed, grpcServer, serviceRegistry, taskRegistry)
	registrar, err := discovery.NewRegistrar(discoveryConfig)
	if err != nil {
		return nil, err
	}
	app := newApp(config, serverGroup, registrar)
	return app, nil
}
