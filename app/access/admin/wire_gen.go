// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package admin

import (
	"github.com/go-kratos/kratos/v2"
	"rockim/app/access/admin/biz/manager"
	"rockim/app/access/admin/biz/tenant"
	"rockim/app/access/admin/conf"
	"rockim/app/access/admin/data"
	"rockim/app/access/admin/data/grpc"
	"rockim/app/access/admin/server"
	manager2 "rockim/app/access/admin/service/manager"
	tenant2 "rockim/app/access/admin/service/tenant"
	"rockim/pkg/component/discovery"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(env *conf.Env, config *discovery.Config, confServer *conf.Server, auth *conf.Auth) (*kratos.App, error) {
	registryDiscovery, err := discovery.NewDiscovery(config)
	if err != nil {
		return nil, err
	}
	platUserAPIClient, err := grpc.NewPlatUserClient(registryDiscovery)
	if err != nil {
		return nil, err
	}
	platUserRepo := data.NewPlatUserRepo(platUserAPIClient)
	authUseCase := manager.NewAuthUseCase(auth, platUserRepo)
	authService := manager2.NewAuthService(authUseCase)
	platRoleAPIClient, err := grpc.NewPlatRoleClient(registryDiscovery)
	if err != nil {
		return nil, err
	}
	platRoleRepo := data.NewPlatRoleRepo(platRoleAPIClient)
	platResourceAPIClient, err := grpc.NewPlatResourceClient(registryDiscovery)
	if err != nil {
		return nil, err
	}
	platResourceRepo := data.NewPlatResourceRepo(platResourceAPIClient)
	sessionUseCase := manager.NewSessionUseCase(platUserRepo, platRoleRepo, platResourceRepo)
	sessionService := manager2.NewSessionService(sessionUseCase)
	platUserUseCase := manager.NewPlatUserUseCase(platUserRepo)
	platUserService := manager2.NewPlatUserService(platUserUseCase)
	platRoleUseCase := manager.NewPlatRoleUseCase(platRoleRepo)
	platRoleService := manager2.NewPlatRoleService(platRoleUseCase)
	platResourceUseCase := manager.NewPlatResourceUseCase(platResourceRepo)
	platResourceService := manager2.NewPlatResourceService(platResourceUseCase)
	tenantAPIClient, err := grpc.NewTenantAPIClient(registryDiscovery)
	if err != nil {
		return nil, err
	}
	tenantRepo := data.NewManagerTenantRepo(tenantAPIClient)
	tenantUseCase := manager.NewTenantUseCase(tenantRepo)
	tenantService := manager2.NewTenantService(tenantUseCase)
	tenantResourceAPIClient, err := grpc.NewTenantResourceAPIClient(registryDiscovery)
	if err != nil {
		return nil, err
	}
	tenantResourceRepo := data.NewManagerTenantResourceRepo(tenantResourceAPIClient)
	tenantResourceUseCase := manager.NewTenantResourceUseCase(tenantResourceRepo)
	tenantResourceService := manager2.NewTenantResourceService(tenantResourceUseCase)
	managerServiceGroup := server.NewManagerServiceGroup(auth, authService, sessionService, platUserService, platRoleService, platResourceService, tenantService, tenantResourceService)
	tenantTenantRepo := data.NewTenantRepo(tenantAPIClient)
	tenantAuthUseCase := tenant.NewAuthUseCase(auth, tenantTenantRepo)
	tenantAuthService := tenant2.NewAuthService(tenantAuthUseCase)
	tenantTenantResourceRepo := data.NewTenantResourceRepo(tenantResourceAPIClient)
	tenantSessionUseCase := tenant.NewSessionUseCase(tenantTenantResourceRepo)
	tenantSessionService := tenant2.NewSessionService(tenantSessionUseCase)
	tenantServiceGroup := server.NewTenantServiceGroup(auth, tenantAuthService, tenantSessionService)
	httpServer := server.NewHTTPServer(confServer, managerServiceGroup, tenantServiceGroup)
	app := newApp(env, httpServer)
	return app, nil
}
