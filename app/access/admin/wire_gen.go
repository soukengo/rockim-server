// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package admin

import (
	"github.com/go-kratos/kratos/v2"
	"rockimserver/app/access/admin/conf"
	"rockimserver/app/access/admin/infra/database"
	"rockimserver/app/access/admin/infra/grpc"
	"rockimserver/app/access/admin/module/manager/biz"
	"rockimserver/app/access/admin/module/manager/data"
	database2 "rockimserver/app/access/admin/module/manager/data/database"
	"rockimserver/app/access/admin/module/manager/service"
	biz2 "rockimserver/app/access/admin/module/tenant/biz"
	data2 "rockimserver/app/access/admin/module/tenant/data"
	database3 "rockimserver/app/access/admin/module/tenant/data/database"
	service2 "rockimserver/app/access/admin/module/tenant/service"
	"rockimserver/app/access/admin/server"
	"rockimserver/pkg/component/discovery"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(env *conf.Env, config *discovery.Config, confServer *conf.Server, auth *conf.Auth, confDatabase *conf.Database) (*kratos.App, error) {
	client := database.NewMongoClient(confDatabase)
	sysUserData := database2.NewSysUserData(client)
	sysUserRepo := data.NewSysUserRepo(sysUserData)
	authUseCase := biz.NewAuthUseCase(auth, sysUserRepo)
	authService := service.NewAuthService(authUseCase)
	sysRoleData := database2.NewSysRoleData(client)
	sysRoleRepo := data.NewSysRoleRepo(sysRoleData)
	sysResourceData := database2.NewSysResourceData(client)
	sysResourceRepo := data.NewSysResourceRepo(sysResourceData)
	sessionUseCase := biz.NewSessionUseCase(sysUserRepo, sysRoleRepo, sysResourceRepo)
	sessionService := service.NewSessionService(sessionUseCase)
	sysUserUseCase := biz.NewSysUserUseCase(sysUserRepo)
	sysUserService := service.NewSysUserService(sysUserUseCase)
	sysRoleUseCase := biz.NewSysRoleUseCase(sysRoleRepo)
	sysRoleService := service.NewSysRoleService(sysRoleUseCase)
	sysResourceUseCase := biz.NewSysResourceUseCase(sysResourceRepo)
	sysResourceService := service.NewSysResourceService(sysResourceUseCase)
	registryDiscovery, err := discovery.NewDiscovery(config)
	if err != nil {
		return nil, err
	}
	tenantAPIClient, err := grpc.NewTenantAPIClient(registryDiscovery)
	if err != nil {
		return nil, err
	}
	tenantRepo := data.NewTenantRepo(tenantAPIClient)
	tenantUseCase := biz.NewTenantUseCase(tenantRepo)
	tenantService := service.NewTenantService(tenantUseCase)
	sysTenantResourceData := database2.NewTenantResourceData(client)
	sysTenantResourceRepo := data.NewSysTenantResourceRepo(sysTenantResourceData)
	sysTenantResourceUseCase := biz.NewSysTenantResourceUseCase(sysTenantResourceRepo)
	sysTenantResourceService := service.NewSysTenantResourceService(sysTenantResourceUseCase)
	managerServiceGroup := server.NewManagerServiceGroup(auth, authService, sessionService, sysUserService, sysRoleService, sysResourceService, tenantService, sysTenantResourceService)
	bizTenantRepo := data2.NewTenantRepo(tenantAPIClient)
	bizAuthUseCase := biz2.NewAuthUseCase(auth, bizTenantRepo)
	serviceAuthService := service2.NewAuthService(bizAuthUseCase)
	databaseSysTenantResourceData := database3.NewTenantResourceData(client)
	bizSysTenantResourceRepo := data2.NewSysTenantResourceRepo(databaseSysTenantResourceData)
	bizSessionUseCase := biz2.NewSessionUseCase(bizSysTenantResourceRepo)
	serviceSessionService := service2.NewSessionService(bizSessionUseCase)
	productAPIClient, err := grpc.NewProductAPIClient(registryDiscovery)
	if err != nil {
		return nil, err
	}
	productRepo := data2.NewProductRepo(productAPIClient)
	productUseCase := biz2.NewProductUseCase(productRepo)
	productService := service2.NewProductService(productUseCase, bizSessionUseCase)
	tenantServiceGroup := server.NewTenantServiceGroup(auth, serviceAuthService, serviceSessionService, productService)
	httpServer := server.NewHTTPServer(confServer, managerServiceGroup, tenantServiceGroup)
	app := newApp(env, httpServer)
	return app, nil
}
