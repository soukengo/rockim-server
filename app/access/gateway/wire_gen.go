// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package gateway

import (
	"github.com/go-kratos/kratos/v2"
	"rockimserver/app/access/gateway/biz"
	"rockimserver/app/access/gateway/conf"
	"rockimserver/app/access/gateway/data"
	"rockimserver/app/access/gateway/data/grpc"
	"rockimserver/app/access/gateway/server"
	"rockimserver/app/access/gateway/service"
	"rockimserver/pkg/component/discovery"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(env *conf.Env, config *discovery.Config, confServer *conf.Server) (*kratos.App, error) {
	registryDiscovery, err := discovery.NewDiscovery(config)
	if err != nil {
		return nil, err
	}
	userAPIClient, err := grpc.NewUserClient(registryDiscovery)
	if err != nil {
		return nil, err
	}
	authAPIClient, err := grpc.NewAuthClient(registryDiscovery)
	if err != nil {
		return nil, err
	}
	userRepo := data.NewUserRepo(userAPIClient, authAPIClient)
	userUseCase := biz.NewUserUseCase(userRepo)
	userService := service.NewUserService(userUseCase)
	httpServer := server.NewHTTPServer(confServer, userService)
	app := newApp(env, httpServer)
	return app, nil
}
