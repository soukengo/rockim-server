// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package gateway

import (
	"github.com/go-kratos/kratos/v2"
	"rockimserver/app/access/gateway/conf"
	"rockimserver/app/access/gateway/infra/grpc"
	"rockimserver/app/access/gateway/module/client/biz"
	"rockimserver/app/access/gateway/module/client/data"
	"rockimserver/app/access/gateway/module/client/service"
	biz2 "rockimserver/app/access/gateway/module/openapi/biz"
	data2 "rockimserver/app/access/gateway/module/openapi/data"
	service2 "rockimserver/app/access/gateway/module/openapi/service"
	server2 "rockimserver/app/access/gateway/server"
	"github.com/soukengo/gopkg/component/discovery"
	"github.com/soukengo/gopkg/component/server"
	"github.com/soukengo/gopkg/log"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(logger log.Logger, config *conf.Config, discoveryConfig *discovery.Config, serverConfig *server.Config) (*kratos.App, error) {
	registryDiscovery, err := discovery.NewDiscovery(discoveryConfig)
	if err != nil {
		return nil, err
	}
	productAPIClient, err := grpc.NewProductClient(registryDiscovery)
	if err != nil {
		return nil, err
	}
	productRepo := data.NewProductRepo(productAPIClient)
	productUseCase := biz.NewProductUseCase(productRepo)
	authAPIClient, err := grpc.NewAuthClient(registryDiscovery)
	if err != nil {
		return nil, err
	}
	authRepo := data.NewAuthRepo(authAPIClient)
	authUseCase := biz.NewAuthUseCase(authRepo)
	productService := service.NewProductService(config)
	userAPIClient, err := grpc.NewUserClient(registryDiscovery)
	if err != nil {
		return nil, err
	}
	userRepo := data.NewUserRepo(userAPIClient, authAPIClient)
	userUseCase := biz.NewUserUseCase(userRepo)
	userService := service.NewUserService(userUseCase)
	authService := service.NewAuthService(authUseCase)
	chatRoomAPIClient, err := grpc.NewChatRoomClient(registryDiscovery)
	if err != nil {
		return nil, err
	}
	groupAPIClient, err := grpc.NewGroupAPIClient(registryDiscovery)
	if err != nil {
		return nil, err
	}
	chatRoomRepo := data.NewChatRoomRepo(chatRoomAPIClient, groupAPIClient)
	chatRoomUseCase := biz.NewChatRoomUseCase(chatRoomRepo)
	chatRoomService := service.NewChatRoomService(chatRoomUseCase)
	chatRoomMemberAPIClient, err := grpc.NewChatRoomMemberClient(registryDiscovery)
	if err != nil {
		return nil, err
	}
	chatRoomMemberRepo := data.NewChatRoomMemberRepo(chatRoomMemberAPIClient)
	chatRoomMemberUseCase := biz.NewChatRoomMemberUseCase(chatRoomMemberRepo)
	chatRoomMemberService := service.NewChatRoomMemberService(chatRoomMemberUseCase, chatRoomUseCase)
	messageAPIClient, err := grpc.NewMessageAPIClient(registryDiscovery)
	if err != nil {
		return nil, err
	}
	messageRepo := data.NewMessageRepo(messageAPIClient)
	messageUseCase := biz.NewMessageUseCase(messageRepo)
	messageService := service.NewMessageService(messageUseCase)
	clientServiceGroup := server2.NewClientServiceGroup(productUseCase, authUseCase, productService, userService, authService, chatRoomService, chatRoomMemberService, messageService)
	bizProductRepo := data2.NewProductRepo(productAPIClient)
	bizProductUseCase := biz2.NewProductUseCase(bizProductRepo)
	bizUserRepo := data2.NewUserRepo(userAPIClient, authAPIClient)
	bizUserUseCase := biz2.NewUserUseCase(bizUserRepo)
	serviceUserService := service2.NewUserService(bizUserUseCase)
	bizAuthRepo := data2.NewAuthRepo(authAPIClient)
	bizAuthUseCase := biz2.NewAuthUseCase(bizAuthRepo)
	serviceAuthService := service2.NewAuthService(bizAuthUseCase)
	bizChatRoomRepo := data2.NewChatRoomRepo(chatRoomAPIClient)
	bizChatRoomUseCase := biz2.NewChatRoomUseCase(bizChatRoomRepo)
	serviceChatRoomService := service2.NewChatRoomService(bizChatRoomUseCase, bizUserUseCase)
	openApiServiceGroup := server2.NewOpenApiServiceGroup(bizProductUseCase, serviceUserService, serviceAuthService, serviceChatRoomService)
	httpServer := server2.NewHTTPServer(serverConfig, clientServiceGroup, openApiServiceGroup)
	app := newApp(logger, config, httpServer)
	return app, nil
}
