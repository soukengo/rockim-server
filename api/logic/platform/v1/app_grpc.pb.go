// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: api/logic/platform/v1/app.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppAPIClient is the client API for AppAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppAPIClient interface {
	Create(ctx context.Context, in *AppCreateRequest, opts ...grpc.CallOption) (*AppCreateResponse, error)
	Update(ctx context.Context, in *AppUpdateRequest, opts ...grpc.CallOption) (*AppUpdateResponse, error)
	Find(ctx context.Context, in *AppFindRequest, opts ...grpc.CallOption) (*AppFindResponse, error)
}

type appAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAppAPIClient(cc grpc.ClientConnInterface) AppAPIClient {
	return &appAPIClient{cc}
}

func (c *appAPIClient) Create(ctx context.Context, in *AppCreateRequest, opts ...grpc.CallOption) (*AppCreateResponse, error) {
	out := new(AppCreateResponse)
	err := c.cc.Invoke(ctx, "/logic.platform.v1.AppAPI/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAPIClient) Update(ctx context.Context, in *AppUpdateRequest, opts ...grpc.CallOption) (*AppUpdateResponse, error) {
	out := new(AppUpdateResponse)
	err := c.cc.Invoke(ctx, "/logic.platform.v1.AppAPI/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAPIClient) Find(ctx context.Context, in *AppFindRequest, opts ...grpc.CallOption) (*AppFindResponse, error) {
	out := new(AppFindResponse)
	err := c.cc.Invoke(ctx, "/logic.platform.v1.AppAPI/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppAPIServer is the server API for AppAPI service.
// All implementations must embed UnimplementedAppAPIServer
// for forward compatibility
type AppAPIServer interface {
	Create(context.Context, *AppCreateRequest) (*AppCreateResponse, error)
	Update(context.Context, *AppUpdateRequest) (*AppUpdateResponse, error)
	Find(context.Context, *AppFindRequest) (*AppFindResponse, error)
	mustEmbedUnimplementedAppAPIServer()
}

// UnimplementedAppAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAppAPIServer struct {
}

func (UnimplementedAppAPIServer) Create(context.Context, *AppCreateRequest) (*AppCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAppAPIServer) Update(context.Context, *AppUpdateRequest) (*AppUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAppAPIServer) Find(context.Context, *AppFindRequest) (*AppFindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedAppAPIServer) mustEmbedUnimplementedAppAPIServer() {}

// UnsafeAppAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppAPIServer will
// result in compilation errors.
type UnsafeAppAPIServer interface {
	mustEmbedUnimplementedAppAPIServer()
}

func RegisterAppAPIServer(s grpc.ServiceRegistrar, srv AppAPIServer) {
	s.RegisterService(&AppAPI_ServiceDesc, srv)
}

func _AppAPI_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAPIServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logic.platform.v1.AppAPI/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAPIServer).Create(ctx, req.(*AppCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAPI_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAPIServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logic.platform.v1.AppAPI/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAPIServer).Update(ctx, req.(*AppUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAPI_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppFindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAPIServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logic.platform.v1.AppAPI/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAPIServer).Find(ctx, req.(*AppFindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppAPI_ServiceDesc is the grpc.ServiceDesc for AppAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logic.platform.v1.AppAPI",
	HandlerType: (*AppAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AppAPI_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AppAPI_Update_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _AppAPI_Find_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/logic/platform/v1/app.proto",
}
