// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: client/v1/socket.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SocketAPIClient is the client API for SocketAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocketAPIClient interface {
	Auth(ctx context.Context, in *SocketAuthRequest, opts ...grpc.CallOption) (*SocketAuthResponse, error)
	Heartbeat(ctx context.Context, in *SocketHeartbeatRequest, opts ...grpc.CallOption) (*SocketHeartbeatResponse, error)
}

type socketAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSocketAPIClient(cc grpc.ClientConnInterface) SocketAPIClient {
	return &socketAPIClient{cc}
}

func (c *socketAPIClient) Auth(ctx context.Context, in *SocketAuthRequest, opts ...grpc.CallOption) (*SocketAuthResponse, error) {
	out := new(SocketAuthResponse)
	err := c.cc.Invoke(ctx, "/rockim.client.v1.SocketAPI/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socketAPIClient) Heartbeat(ctx context.Context, in *SocketHeartbeatRequest, opts ...grpc.CallOption) (*SocketHeartbeatResponse, error) {
	out := new(SocketHeartbeatResponse)
	err := c.cc.Invoke(ctx, "/rockim.client.v1.SocketAPI/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocketAPIServer is the server API for SocketAPI service.
// All implementations must embed UnimplementedSocketAPIServer
// for forward compatibility
type SocketAPIServer interface {
	Auth(context.Context, *SocketAuthRequest) (*SocketAuthResponse, error)
	Heartbeat(context.Context, *SocketHeartbeatRequest) (*SocketHeartbeatResponse, error)
	mustEmbedUnimplementedSocketAPIServer()
}

// UnimplementedSocketAPIServer must be embedded to have forward compatible implementations.
type UnimplementedSocketAPIServer struct {
}

func (UnimplementedSocketAPIServer) Auth(context.Context, *SocketAuthRequest) (*SocketAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedSocketAPIServer) Heartbeat(context.Context, *SocketHeartbeatRequest) (*SocketHeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedSocketAPIServer) mustEmbedUnimplementedSocketAPIServer() {}

// UnsafeSocketAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocketAPIServer will
// result in compilation errors.
type UnsafeSocketAPIServer interface {
	mustEmbedUnimplementedSocketAPIServer()
}

func RegisterSocketAPIServer(s grpc.ServiceRegistrar, srv SocketAPIServer) {
	s.RegisterService(&SocketAPI_ServiceDesc, srv)
}

func _SocketAPI_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SocketAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocketAPIServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.client.v1.SocketAPI/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocketAPIServer).Auth(ctx, req.(*SocketAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocketAPI_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SocketHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocketAPIServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.client.v1.SocketAPI/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocketAPIServer).Heartbeat(ctx, req.(*SocketHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SocketAPI_ServiceDesc is the grpc.ServiceDesc for SocketAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocketAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rockim.client.v1.SocketAPI",
	HandlerType: (*SocketAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _SocketAPI_Auth_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _SocketAPI_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client/v1/socket.proto",
}
