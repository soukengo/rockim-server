// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.20.0
// source: api/rockim/admin/tenant/v1/app.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAppAPICreate = "/rockim.admin.tenant.v1.AppAPI/Create"
const OperationAppAPIFind = "/rockim.admin.tenant.v1.AppAPI/Find"
const OperationAppAPIPaging = "/rockim.admin.tenant.v1.AppAPI/Paging"
const OperationAppAPIUpdate = "/rockim.admin.tenant.v1.AppAPI/Update"

type AppAPIHTTPServer interface {
	Create(context.Context, *AppCreateRequest) (*AppCreateResponse, error)
	Find(context.Context, *AppFindRequest) (*AppFindResponse, error)
	Paging(context.Context, *AppListRequest) (*AppListResponse, error)
	Update(context.Context, *AppUpdateRequest) (*AppUpdateResponse, error)
}

func RegisterAppAPIHTTPServer(s *http.Server, srv AppAPIHTTPServer) {
	r := s.Route("/")
	r.POST("/api/tenant/v1/app/create", _AppAPI_Create0_HTTP_Handler(srv))
	r.POST("/api/tenant/v1/app/update", _AppAPI_Update0_HTTP_Handler(srv))
	r.POST("/api/tenant/v1/app/find", _AppAPI_Find0_HTTP_Handler(srv))
	r.POST("/api/tenant/v1/app/list", _AppAPI_Paging0_HTTP_Handler(srv))
}

func _AppAPI_Create0_HTTP_Handler(srv AppAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AppCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAPICreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*AppCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AppCreateResponse)
		return ctx.Result(200, reply)
	}
}

func _AppAPI_Update0_HTTP_Handler(srv AppAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AppUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAPIUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*AppUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AppUpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _AppAPI_Find0_HTTP_Handler(srv AppAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AppFindRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAPIFind)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Find(ctx, req.(*AppFindRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AppFindResponse)
		return ctx.Result(200, reply)
	}
}

func _AppAPI_Paging0_HTTP_Handler(srv AppAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AppListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAPIPaging)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Paging(ctx, req.(*AppListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AppListResponse)
		return ctx.Result(200, reply)
	}
}

type AppAPIHTTPClient interface {
	Create(ctx context.Context, req *AppCreateRequest, opts ...http.CallOption) (rsp *AppCreateResponse, err error)
	Find(ctx context.Context, req *AppFindRequest, opts ...http.CallOption) (rsp *AppFindResponse, err error)
	Paging(ctx context.Context, req *AppListRequest, opts ...http.CallOption) (rsp *AppListResponse, err error)
	Update(ctx context.Context, req *AppUpdateRequest, opts ...http.CallOption) (rsp *AppUpdateResponse, err error)
}

type AppAPIHTTPClientImpl struct {
	cc *http.Client
}

func NewAppAPIHTTPClient(client *http.Client) AppAPIHTTPClient {
	return &AppAPIHTTPClientImpl{client}
}

func (c *AppAPIHTTPClientImpl) Create(ctx context.Context, in *AppCreateRequest, opts ...http.CallOption) (*AppCreateResponse, error) {
	var out AppCreateResponse
	pattern := "/api/tenant/v1/app/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppAPICreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppAPIHTTPClientImpl) Find(ctx context.Context, in *AppFindRequest, opts ...http.CallOption) (*AppFindResponse, error) {
	var out AppFindResponse
	pattern := "/api/tenant/v1/app/find"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppAPIFind))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppAPIHTTPClientImpl) Paging(ctx context.Context, in *AppListRequest, opts ...http.CallOption) (*AppListResponse, error) {
	var out AppListResponse
	pattern := "/api/tenant/v1/app/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppAPIPaging))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppAPIHTTPClientImpl) Update(ctx context.Context, in *AppUpdateRequest, opts ...http.CallOption) (*AppUpdateResponse, error) {
	var out AppUpdateResponse
	pattern := "/api/tenant/v1/app/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppAPIUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
