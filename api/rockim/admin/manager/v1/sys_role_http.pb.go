// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.20.0
// source: api/rockim/admin/manager/v1/sys_role.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSysRoleAPICreate = "/rockim.admin.manager.v1.SysRoleAPI/Create"
const OperationSysRoleAPIDelete = "/rockim.admin.manager.v1.SysRoleAPI/Delete"
const OperationSysRoleAPIListResourceId = "/rockim.admin.manager.v1.SysRoleAPI/ListResourceId"
const OperationSysRoleAPIPaging = "/rockim.admin.manager.v1.SysRoleAPI/Paging"
const OperationSysRoleAPISaveResourceId = "/rockim.admin.manager.v1.SysRoleAPI/SaveResourceId"
const OperationSysRoleAPIUpdate = "/rockim.admin.manager.v1.SysRoleAPI/Update"

type SysRoleAPIHTTPServer interface {
	Create(context.Context, *SysRoleCreateRequest) (*SysRoleCreateResponse, error)
	Delete(context.Context, *SysRoleDeleteRequest) (*SysRoleDeleteResponse, error)
	ListResourceId(context.Context, *SysRoleResourceIdListRequest) (*SysRoleResourceIdListResponse, error)
	Paging(context.Context, *SysRolePagingRequest) (*SysRolePagingResponse, error)
	SaveResourceId(context.Context, *SysRoleResourceIdSaveRequest) (*SysRoleResourceIdSaveResponse, error)
	Update(context.Context, *SysRoleUpdateRequest) (*SysRoleUpdateResponse, error)
}

func RegisterSysRoleAPIHTTPServer(s *http.Server, srv SysRoleAPIHTTPServer) {
	r := s.Route("/")
	r.POST("/api/manager/v1/sys/role/create", _SysRoleAPI_Create1_HTTP_Handler(srv))
	r.POST("/api/manager/v1/sys/role/update", _SysRoleAPI_Update1_HTTP_Handler(srv))
	r.POST("/api/manager/v1/sys/role/delete", _SysRoleAPI_Delete1_HTTP_Handler(srv))
	r.POST("/api/manager/v1/sys/role/paging", _SysRoleAPI_Paging0_HTTP_Handler(srv))
	r.POST("/api/manager/v1/sys/role/resource_id/list", _SysRoleAPI_ListResourceId0_HTTP_Handler(srv))
	r.POST("/api/manager/v1/sys/role/resource_id/save", _SysRoleAPI_SaveResourceId0_HTTP_Handler(srv))
}

func _SysRoleAPI_Create1_HTTP_Handler(srv SysRoleAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysRoleCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysRoleAPICreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*SysRoleCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysRoleCreateResponse)
		return ctx.Result(200, reply)
	}
}

func _SysRoleAPI_Update1_HTTP_Handler(srv SysRoleAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysRoleUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysRoleAPIUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*SysRoleUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysRoleUpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _SysRoleAPI_Delete1_HTTP_Handler(srv SysRoleAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysRoleDeleteRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysRoleAPIDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*SysRoleDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysRoleDeleteResponse)
		return ctx.Result(200, reply)
	}
}

func _SysRoleAPI_Paging0_HTTP_Handler(srv SysRoleAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysRolePagingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysRoleAPIPaging)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Paging(ctx, req.(*SysRolePagingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysRolePagingResponse)
		return ctx.Result(200, reply)
	}
}

func _SysRoleAPI_ListResourceId0_HTTP_Handler(srv SysRoleAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysRoleResourceIdListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysRoleAPIListResourceId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListResourceId(ctx, req.(*SysRoleResourceIdListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysRoleResourceIdListResponse)
		return ctx.Result(200, reply)
	}
}

func _SysRoleAPI_SaveResourceId0_HTTP_Handler(srv SysRoleAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysRoleResourceIdSaveRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysRoleAPISaveResourceId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveResourceId(ctx, req.(*SysRoleResourceIdSaveRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysRoleResourceIdSaveResponse)
		return ctx.Result(200, reply)
	}
}

type SysRoleAPIHTTPClient interface {
	Create(ctx context.Context, req *SysRoleCreateRequest, opts ...http.CallOption) (rsp *SysRoleCreateResponse, err error)
	Delete(ctx context.Context, req *SysRoleDeleteRequest, opts ...http.CallOption) (rsp *SysRoleDeleteResponse, err error)
	ListResourceId(ctx context.Context, req *SysRoleResourceIdListRequest, opts ...http.CallOption) (rsp *SysRoleResourceIdListResponse, err error)
	Paging(ctx context.Context, req *SysRolePagingRequest, opts ...http.CallOption) (rsp *SysRolePagingResponse, err error)
	SaveResourceId(ctx context.Context, req *SysRoleResourceIdSaveRequest, opts ...http.CallOption) (rsp *SysRoleResourceIdSaveResponse, err error)
	Update(ctx context.Context, req *SysRoleUpdateRequest, opts ...http.CallOption) (rsp *SysRoleUpdateResponse, err error)
}

type SysRoleAPIHTTPClientImpl struct {
	cc *http.Client
}

func NewSysRoleAPIHTTPClient(client *http.Client) SysRoleAPIHTTPClient {
	return &SysRoleAPIHTTPClientImpl{client}
}

func (c *SysRoleAPIHTTPClientImpl) Create(ctx context.Context, in *SysRoleCreateRequest, opts ...http.CallOption) (*SysRoleCreateResponse, error) {
	var out SysRoleCreateResponse
	pattern := "/api/manager/v1/sys/role/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysRoleAPICreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysRoleAPIHTTPClientImpl) Delete(ctx context.Context, in *SysRoleDeleteRequest, opts ...http.CallOption) (*SysRoleDeleteResponse, error) {
	var out SysRoleDeleteResponse
	pattern := "/api/manager/v1/sys/role/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysRoleAPIDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysRoleAPIHTTPClientImpl) ListResourceId(ctx context.Context, in *SysRoleResourceIdListRequest, opts ...http.CallOption) (*SysRoleResourceIdListResponse, error) {
	var out SysRoleResourceIdListResponse
	pattern := "/api/manager/v1/sys/role/resource_id/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysRoleAPIListResourceId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysRoleAPIHTTPClientImpl) Paging(ctx context.Context, in *SysRolePagingRequest, opts ...http.CallOption) (*SysRolePagingResponse, error) {
	var out SysRolePagingResponse
	pattern := "/api/manager/v1/sys/role/paging"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysRoleAPIPaging))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysRoleAPIHTTPClientImpl) SaveResourceId(ctx context.Context, in *SysRoleResourceIdSaveRequest, opts ...http.CallOption) (*SysRoleResourceIdSaveResponse, error) {
	var out SysRoleResourceIdSaveResponse
	pattern := "/api/manager/v1/sys/role/resource_id/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysRoleAPISaveResourceId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysRoleAPIHTTPClientImpl) Update(ctx context.Context, in *SysRoleUpdateRequest, opts ...http.CallOption) (*SysRoleUpdateResponse, error) {
	var out SysRoleUpdateResponse
	pattern := "/api/manager/v1/sys/role/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysRoleAPIUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
