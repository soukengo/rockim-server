// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/rockim/admin/manager/v1/session.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SessionCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SessionCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SessionCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SessionCheckRequestMultiError, or nil if none found.
func (m *SessionCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SessionCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SessionCheckRequestMultiError(errors)
	}

	return nil
}

// SessionCheckRequestMultiError is an error wrapping multiple validation
// errors returned by SessionCheckRequest.ValidateAll() if the designated
// constraints aren't met.
type SessionCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionCheckRequestMultiError) AllErrors() []error { return m }

// SessionCheckRequestValidationError is the validation error returned by
// SessionCheckRequest.Validate if the designated constraints aren't met.
type SessionCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionCheckRequestValidationError) ErrorName() string {
	return "SessionCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SessionCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionCheckRequestValidationError{}

// Validate checks the field values on SessionCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SessionCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SessionCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SessionCheckResponseMultiError, or nil if none found.
func (m *SessionCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SessionCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSession()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SessionCheckResponseValidationError{
					field:  "Session",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SessionCheckResponseValidationError{
					field:  "Session",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSession()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionCheckResponseValidationError{
				field:  "Session",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SessionCheckResponseMultiError(errors)
	}

	return nil
}

// SessionCheckResponseMultiError is an error wrapping multiple validation
// errors returned by SessionCheckResponse.ValidateAll() if the designated
// constraints aren't met.
type SessionCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionCheckResponseMultiError) AllErrors() []error { return m }

// SessionCheckResponseValidationError is the validation error returned by
// SessionCheckResponse.Validate if the designated constraints aren't met.
type SessionCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionCheckResponseValidationError) ErrorName() string {
	return "SessionCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SessionCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionCheckResponseValidationError{}

// Validate checks the field values on SessionListResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SessionListResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SessionListResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SessionListResourceRequestMultiError, or nil if none found.
func (m *SessionListResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SessionListResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SessionListResourceRequestMultiError(errors)
	}

	return nil
}

// SessionListResourceRequestMultiError is an error wrapping multiple
// validation errors returned by SessionListResourceRequest.ValidateAll() if
// the designated constraints aren't met.
type SessionListResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionListResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionListResourceRequestMultiError) AllErrors() []error { return m }

// SessionListResourceRequestValidationError is the validation error returned
// by SessionListResourceRequest.Validate if the designated constraints aren't met.
type SessionListResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionListResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionListResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionListResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionListResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionListResourceRequestValidationError) ErrorName() string {
	return "SessionListResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SessionListResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionListResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionListResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionListResourceRequestValidationError{}

// Validate checks the field values on SessionListResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SessionListResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SessionListResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SessionListResourceResponseMultiError, or nil if none found.
func (m *SessionListResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SessionListResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SessionListResourceResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SessionListResourceResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SessionListResourceResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SessionListResourceResponseMultiError(errors)
	}

	return nil
}

// SessionListResourceResponseMultiError is an error wrapping multiple
// validation errors returned by SessionListResourceResponse.ValidateAll() if
// the designated constraints aren't met.
type SessionListResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionListResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionListResourceResponseMultiError) AllErrors() []error { return m }

// SessionListResourceResponseValidationError is the validation error returned
// by SessionListResourceResponse.Validate if the designated constraints
// aren't met.
type SessionListResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionListResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionListResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionListResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionListResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionListResourceResponseValidationError) ErrorName() string {
	return "SessionListResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SessionListResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionListResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionListResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionListResourceResponseValidationError{}
