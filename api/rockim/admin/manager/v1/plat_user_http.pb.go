// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.20.0
// source: api/rockim/admin/manager/v1/plat_user.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPlatUserAPICreate = "/rockim.admin.manager.v1.PlatUserAPI/Create"
const OperationPlatUserAPIDelete = "/rockim.admin.manager.v1.PlatUserAPI/Delete"
const OperationPlatUserAPIListRoleId = "/rockim.admin.manager.v1.PlatUserAPI/ListRoleId"
const OperationPlatUserAPIPaging = "/rockim.admin.manager.v1.PlatUserAPI/Paging"
const OperationPlatUserAPIUpdate = "/rockim.admin.manager.v1.PlatUserAPI/Update"

type PlatUserAPIHTTPServer interface {
	Create(context.Context, *PlatUserCreateRequest) (*PlatUserCreateResponse, error)
	Delete(context.Context, *PlatUserDeleteRequest) (*PlatUserDeleteResponse, error)
	ListRoleId(context.Context, *PlatUserRoleIdListRequest) (*PlatUserRoleIdListResponse, error)
	Paging(context.Context, *PlatUserPagingRequest) (*PlatUserPagingResponse, error)
	Update(context.Context, *PlatUserUpdateRequest) (*PlatUserUpdateResponse, error)
}

func RegisterPlatUserAPIHTTPServer(s *http.Server, srv PlatUserAPIHTTPServer) {
	r := s.Route("/")
	r.POST("/api/manager/v1/platform/user/create", _PlatUserAPI_Create0_HTTP_Handler(srv))
	r.POST("/api/manager/v1/platform/user/update", _PlatUserAPI_Update0_HTTP_Handler(srv))
	r.POST("/api/manager/v1/platform/user/delete", _PlatUserAPI_Delete0_HTTP_Handler(srv))
	r.POST("/api/manager/v1/platform/user/paging", _PlatUserAPI_Paging0_HTTP_Handler(srv))
	r.POST("/api/manager/v1/platform/user/role_id/list", _PlatUserAPI_ListRoleId0_HTTP_Handler(srv))
}

func _PlatUserAPI_Create0_HTTP_Handler(srv PlatUserAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PlatUserCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlatUserAPICreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*PlatUserCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PlatUserCreateResponse)
		return ctx.Result(200, reply)
	}
}

func _PlatUserAPI_Update0_HTTP_Handler(srv PlatUserAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PlatUserUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlatUserAPIUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*PlatUserUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PlatUserUpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _PlatUserAPI_Delete0_HTTP_Handler(srv PlatUserAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PlatUserDeleteRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlatUserAPIDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*PlatUserDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PlatUserDeleteResponse)
		return ctx.Result(200, reply)
	}
}

func _PlatUserAPI_Paging0_HTTP_Handler(srv PlatUserAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PlatUserPagingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlatUserAPIPaging)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Paging(ctx, req.(*PlatUserPagingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PlatUserPagingResponse)
		return ctx.Result(200, reply)
	}
}

func _PlatUserAPI_ListRoleId0_HTTP_Handler(srv PlatUserAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PlatUserRoleIdListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlatUserAPIListRoleId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRoleId(ctx, req.(*PlatUserRoleIdListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PlatUserRoleIdListResponse)
		return ctx.Result(200, reply)
	}
}

type PlatUserAPIHTTPClient interface {
	Create(ctx context.Context, req *PlatUserCreateRequest, opts ...http.CallOption) (rsp *PlatUserCreateResponse, err error)
	Delete(ctx context.Context, req *PlatUserDeleteRequest, opts ...http.CallOption) (rsp *PlatUserDeleteResponse, err error)
	ListRoleId(ctx context.Context, req *PlatUserRoleIdListRequest, opts ...http.CallOption) (rsp *PlatUserRoleIdListResponse, err error)
	Paging(ctx context.Context, req *PlatUserPagingRequest, opts ...http.CallOption) (rsp *PlatUserPagingResponse, err error)
	Update(ctx context.Context, req *PlatUserUpdateRequest, opts ...http.CallOption) (rsp *PlatUserUpdateResponse, err error)
}

type PlatUserAPIHTTPClientImpl struct {
	cc *http.Client
}

func NewPlatUserAPIHTTPClient(client *http.Client) PlatUserAPIHTTPClient {
	return &PlatUserAPIHTTPClientImpl{client}
}

func (c *PlatUserAPIHTTPClientImpl) Create(ctx context.Context, in *PlatUserCreateRequest, opts ...http.CallOption) (*PlatUserCreateResponse, error) {
	var out PlatUserCreateResponse
	pattern := "/api/manager/v1/platform/user/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPlatUserAPICreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlatUserAPIHTTPClientImpl) Delete(ctx context.Context, in *PlatUserDeleteRequest, opts ...http.CallOption) (*PlatUserDeleteResponse, error) {
	var out PlatUserDeleteResponse
	pattern := "/api/manager/v1/platform/user/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPlatUserAPIDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlatUserAPIHTTPClientImpl) ListRoleId(ctx context.Context, in *PlatUserRoleIdListRequest, opts ...http.CallOption) (*PlatUserRoleIdListResponse, error) {
	var out PlatUserRoleIdListResponse
	pattern := "/api/manager/v1/platform/user/role_id/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPlatUserAPIListRoleId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlatUserAPIHTTPClientImpl) Paging(ctx context.Context, in *PlatUserPagingRequest, opts ...http.CallOption) (*PlatUserPagingResponse, error) {
	var out PlatUserPagingResponse
	pattern := "/api/manager/v1/platform/user/paging"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPlatUserAPIPaging))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlatUserAPIHTTPClientImpl) Update(ctx context.Context, in *PlatUserUpdateRequest, opts ...http.CallOption) (*PlatUserUpdateResponse, error) {
	var out PlatUserUpdateResponse
	pattern := "/api/manager/v1/platform/user/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPlatUserAPIUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
