// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.20.0
// source: api/rockim/admin/manager/v1/sys_user.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSysUserAPICreate = "/rockim.admin.manager.v1.SysUserAPI/Create"
const OperationSysUserAPIDelete = "/rockim.admin.manager.v1.SysUserAPI/Delete"
const OperationSysUserAPIListRoleId = "/rockim.admin.manager.v1.SysUserAPI/ListRoleId"
const OperationSysUserAPIPaging = "/rockim.admin.manager.v1.SysUserAPI/Paging"
const OperationSysUserAPISaveRoleId = "/rockim.admin.manager.v1.SysUserAPI/SaveRoleId"
const OperationSysUserAPIUpdate = "/rockim.admin.manager.v1.SysUserAPI/Update"

type SysUserAPIHTTPServer interface {
	Create(context.Context, *SysUserCreateRequest) (*SysUserCreateResponse, error)
	Delete(context.Context, *SysUserDeleteRequest) (*SysUserDeleteResponse, error)
	ListRoleId(context.Context, *SysUserRoleIdListRequest) (*SysUserRoleIdListResponse, error)
	Paging(context.Context, *SysUserPagingRequest) (*SysUserPagingResponse, error)
	SaveRoleId(context.Context, *SysUserRoleIdSaveRequest) (*SysUserRoleIdSaveResponse, error)
	Update(context.Context, *SysUserUpdateRequest) (*SysUserUpdateResponse, error)
}

func RegisterSysUserAPIHTTPServer(s *http.Server, srv SysUserAPIHTTPServer) {
	r := s.Route("/")
	r.POST("/api/manager/v1/sys/user/create", _SysUserAPI_Create3_HTTP_Handler(srv))
	r.POST("/api/manager/v1/sys/user/update", _SysUserAPI_Update3_HTTP_Handler(srv))
	r.POST("/api/manager/v1/sys/user/delete", _SysUserAPI_Delete3_HTTP_Handler(srv))
	r.POST("/api/manager/v1/sys/user/paging", _SysUserAPI_Paging1_HTTP_Handler(srv))
	r.POST("/api/manager/v1/sys/user/role_id/list", _SysUserAPI_ListRoleId0_HTTP_Handler(srv))
	r.POST("/api/manager/v1/sys/user/role_id/save", _SysUserAPI_SaveRoleId0_HTTP_Handler(srv))
}

func _SysUserAPI_Create3_HTTP_Handler(srv SysUserAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysUserCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysUserAPICreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*SysUserCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysUserCreateResponse)
		return ctx.Result(200, reply)
	}
}

func _SysUserAPI_Update3_HTTP_Handler(srv SysUserAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysUserUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysUserAPIUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*SysUserUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysUserUpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _SysUserAPI_Delete3_HTTP_Handler(srv SysUserAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysUserDeleteRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysUserAPIDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*SysUserDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysUserDeleteResponse)
		return ctx.Result(200, reply)
	}
}

func _SysUserAPI_Paging1_HTTP_Handler(srv SysUserAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysUserPagingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysUserAPIPaging)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Paging(ctx, req.(*SysUserPagingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysUserPagingResponse)
		return ctx.Result(200, reply)
	}
}

func _SysUserAPI_ListRoleId0_HTTP_Handler(srv SysUserAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysUserRoleIdListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysUserAPIListRoleId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRoleId(ctx, req.(*SysUserRoleIdListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysUserRoleIdListResponse)
		return ctx.Result(200, reply)
	}
}

func _SysUserAPI_SaveRoleId0_HTTP_Handler(srv SysUserAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysUserRoleIdSaveRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysUserAPISaveRoleId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveRoleId(ctx, req.(*SysUserRoleIdSaveRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysUserRoleIdSaveResponse)
		return ctx.Result(200, reply)
	}
}

type SysUserAPIHTTPClient interface {
	Create(ctx context.Context, req *SysUserCreateRequest, opts ...http.CallOption) (rsp *SysUserCreateResponse, err error)
	Delete(ctx context.Context, req *SysUserDeleteRequest, opts ...http.CallOption) (rsp *SysUserDeleteResponse, err error)
	ListRoleId(ctx context.Context, req *SysUserRoleIdListRequest, opts ...http.CallOption) (rsp *SysUserRoleIdListResponse, err error)
	Paging(ctx context.Context, req *SysUserPagingRequest, opts ...http.CallOption) (rsp *SysUserPagingResponse, err error)
	SaveRoleId(ctx context.Context, req *SysUserRoleIdSaveRequest, opts ...http.CallOption) (rsp *SysUserRoleIdSaveResponse, err error)
	Update(ctx context.Context, req *SysUserUpdateRequest, opts ...http.CallOption) (rsp *SysUserUpdateResponse, err error)
}

type SysUserAPIHTTPClientImpl struct {
	cc *http.Client
}

func NewSysUserAPIHTTPClient(client *http.Client) SysUserAPIHTTPClient {
	return &SysUserAPIHTTPClientImpl{client}
}

func (c *SysUserAPIHTTPClientImpl) Create(ctx context.Context, in *SysUserCreateRequest, opts ...http.CallOption) (*SysUserCreateResponse, error) {
	var out SysUserCreateResponse
	pattern := "/api/manager/v1/sys/user/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysUserAPICreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysUserAPIHTTPClientImpl) Delete(ctx context.Context, in *SysUserDeleteRequest, opts ...http.CallOption) (*SysUserDeleteResponse, error) {
	var out SysUserDeleteResponse
	pattern := "/api/manager/v1/sys/user/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysUserAPIDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysUserAPIHTTPClientImpl) ListRoleId(ctx context.Context, in *SysUserRoleIdListRequest, opts ...http.CallOption) (*SysUserRoleIdListResponse, error) {
	var out SysUserRoleIdListResponse
	pattern := "/api/manager/v1/sys/user/role_id/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysUserAPIListRoleId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysUserAPIHTTPClientImpl) Paging(ctx context.Context, in *SysUserPagingRequest, opts ...http.CallOption) (*SysUserPagingResponse, error) {
	var out SysUserPagingResponse
	pattern := "/api/manager/v1/sys/user/paging"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysUserAPIPaging))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysUserAPIHTTPClientImpl) SaveRoleId(ctx context.Context, in *SysUserRoleIdSaveRequest, opts ...http.CallOption) (*SysUserRoleIdSaveResponse, error) {
	var out SysUserRoleIdSaveResponse
	pattern := "/api/manager/v1/sys/user/role_id/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysUserAPISaveRoleId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysUserAPIHTTPClientImpl) Update(ctx context.Context, in *SysUserUpdateRequest, opts ...http.CallOption) (*SysUserUpdateResponse, error) {
	var out SysUserUpdateResponse
	pattern := "/api/manager/v1/sys/user/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysUserAPIUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
