// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/rockim/admin/manager/v1/types/platform.proto

package types

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	v1 "rockim/api/rockim/shared/enums/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = v1.PlatResourceCategory(0)
)

// Validate checks the field values on PlatUser with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlatUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatUser with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlatUserMultiError, or nil
// if none found.
func (m *PlatUser) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreateTime

	// no validation rules for Account

	// no validation rules for Name

	if len(errors) > 0 {
		return PlatUserMultiError(errors)
	}

	return nil
}

// PlatUserMultiError is an error wrapping multiple validation errors returned
// by PlatUser.ValidateAll() if the designated constraints aren't met.
type PlatUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatUserMultiError) AllErrors() []error { return m }

// PlatUserValidationError is the validation error returned by
// PlatUser.Validate if the designated constraints aren't met.
type PlatUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatUserValidationError) ErrorName() string { return "PlatUserValidationError" }

// Error satisfies the builtin error interface
func (e PlatUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatUserValidationError{}

// Validate checks the field values on PlatRole with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlatRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatRole with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlatRoleMultiError, or nil
// if none found.
func (m *PlatRole) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreateTime

	// no validation rules for Name

	if len(errors) > 0 {
		return PlatRoleMultiError(errors)
	}

	return nil
}

// PlatRoleMultiError is an error wrapping multiple validation errors returned
// by PlatRole.ValidateAll() if the designated constraints aren't met.
type PlatRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatRoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatRoleMultiError) AllErrors() []error { return m }

// PlatRoleValidationError is the validation error returned by
// PlatRole.Validate if the designated constraints aren't met.
type PlatRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatRoleValidationError) ErrorName() string { return "PlatRoleValidationError" }

// Error satisfies the builtin error interface
func (e PlatRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatRoleValidationError{}

// Validate checks the field values on PlatResource with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlatResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatResource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlatResourceMultiError, or
// nil if none found.
func (m *PlatResource) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreateTime

	// no validation rules for Category

	// no validation rules for Name

	// no validation rules for ParentId

	// no validation rules for Url

	// no validation rules for Icon

	// no validation rules for Order

	if len(errors) > 0 {
		return PlatResourceMultiError(errors)
	}

	return nil
}

// PlatResourceMultiError is an error wrapping multiple validation errors
// returned by PlatResource.ValidateAll() if the designated constraints aren't met.
type PlatResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatResourceMultiError) AllErrors() []error { return m }

// PlatResourceValidationError is the validation error returned by
// PlatResource.Validate if the designated constraints aren't met.
type PlatResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatResourceValidationError) ErrorName() string { return "PlatResourceValidationError" }

// Error satisfies the builtin error interface
func (e PlatResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatResourceValidationError{}

// Validate checks the field values on PlatResourceTree with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PlatResourceTree) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatResourceTree with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlatResourceTreeMultiError, or nil if none found.
func (m *PlatResourceTree) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatResourceTree) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlatResourceTreeValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlatResourceTreeValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlatResourceTreeValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlatResourceTreeValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlatResourceTreeValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlatResourceTreeValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PlatResourceTreeMultiError(errors)
	}

	return nil
}

// PlatResourceTreeMultiError is an error wrapping multiple validation errors
// returned by PlatResourceTree.ValidateAll() if the designated constraints
// aren't met.
type PlatResourceTreeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatResourceTreeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatResourceTreeMultiError) AllErrors() []error { return m }

// PlatResourceTreeValidationError is the validation error returned by
// PlatResourceTree.Validate if the designated constraints aren't met.
type PlatResourceTreeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatResourceTreeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatResourceTreeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatResourceTreeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatResourceTreeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatResourceTreeValidationError) ErrorName() string { return "PlatResourceTreeValidationError" }

// Error satisfies the builtin error interface
func (e PlatResourceTreeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatResourceTree.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatResourceTreeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatResourceTreeValidationError{}
