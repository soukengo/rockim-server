// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/rockim/admin/manager/v1/sys_role.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SysRoleOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysRoleOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysRoleOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysRoleOptionsMultiError,
// or nil if none found.
func (m *SysRoleOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *SysRoleOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := SysRoleOptionsValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SysRoleOptionsMultiError(errors)
	}

	return nil
}

// SysRoleOptionsMultiError is an error wrapping multiple validation errors
// returned by SysRoleOptions.ValidateAll() if the designated constraints
// aren't met.
type SysRoleOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysRoleOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysRoleOptionsMultiError) AllErrors() []error { return m }

// SysRoleOptionsValidationError is the validation error returned by
// SysRoleOptions.Validate if the designated constraints aren't met.
type SysRoleOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysRoleOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysRoleOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysRoleOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysRoleOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysRoleOptionsValidationError) ErrorName() string { return "SysRoleOptionsValidationError" }

// Error satisfies the builtin error interface
func (e SysRoleOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysRoleOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysRoleOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysRoleOptionsValidationError{}

// Validate checks the field values on SysRoleCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysRoleCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysRoleCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysRoleCreateRequestMultiError, or nil if none found.
func (m *SysRoleCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SysRoleCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOptions() == nil {
		err := SysRoleCreateRequestValidationError{
			field:  "Options",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SysRoleCreateRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SysRoleCreateRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SysRoleCreateRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SysRoleCreateRequestMultiError(errors)
	}

	return nil
}

// SysRoleCreateRequestMultiError is an error wrapping multiple validation
// errors returned by SysRoleCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type SysRoleCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysRoleCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysRoleCreateRequestMultiError) AllErrors() []error { return m }

// SysRoleCreateRequestValidationError is the validation error returned by
// SysRoleCreateRequest.Validate if the designated constraints aren't met.
type SysRoleCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysRoleCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysRoleCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysRoleCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysRoleCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysRoleCreateRequestValidationError) ErrorName() string {
	return "SysRoleCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SysRoleCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysRoleCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysRoleCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysRoleCreateRequestValidationError{}

// Validate checks the field values on SysRoleCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysRoleCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysRoleCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysRoleCreateResponseMultiError, or nil if none found.
func (m *SysRoleCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SysRoleCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysRoleCreateResponseMultiError(errors)
	}

	return nil
}

// SysRoleCreateResponseMultiError is an error wrapping multiple validation
// errors returned by SysRoleCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type SysRoleCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysRoleCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysRoleCreateResponseMultiError) AllErrors() []error { return m }

// SysRoleCreateResponseValidationError is the validation error returned by
// SysRoleCreateResponse.Validate if the designated constraints aren't met.
type SysRoleCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysRoleCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysRoleCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysRoleCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysRoleCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysRoleCreateResponseValidationError) ErrorName() string {
	return "SysRoleCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SysRoleCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysRoleCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysRoleCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysRoleCreateResponseValidationError{}

// Validate checks the field values on SysRoleUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysRoleUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysRoleUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysRoleUpdateRequestMultiError, or nil if none found.
func (m *SysRoleUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SysRoleUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := SysRoleUpdateRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOptions() == nil {
		err := SysRoleUpdateRequestValidationError{
			field:  "Options",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SysRoleUpdateRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SysRoleUpdateRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SysRoleUpdateRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SysRoleUpdateRequestMultiError(errors)
	}

	return nil
}

// SysRoleUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by SysRoleUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type SysRoleUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysRoleUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysRoleUpdateRequestMultiError) AllErrors() []error { return m }

// SysRoleUpdateRequestValidationError is the validation error returned by
// SysRoleUpdateRequest.Validate if the designated constraints aren't met.
type SysRoleUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysRoleUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysRoleUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysRoleUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysRoleUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysRoleUpdateRequestValidationError) ErrorName() string {
	return "SysRoleUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SysRoleUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysRoleUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysRoleUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysRoleUpdateRequestValidationError{}

// Validate checks the field values on SysRoleUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysRoleUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysRoleUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysRoleUpdateResponseMultiError, or nil if none found.
func (m *SysRoleUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SysRoleUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysRoleUpdateResponseMultiError(errors)
	}

	return nil
}

// SysRoleUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by SysRoleUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type SysRoleUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysRoleUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysRoleUpdateResponseMultiError) AllErrors() []error { return m }

// SysRoleUpdateResponseValidationError is the validation error returned by
// SysRoleUpdateResponse.Validate if the designated constraints aren't met.
type SysRoleUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysRoleUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysRoleUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysRoleUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysRoleUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysRoleUpdateResponseValidationError) ErrorName() string {
	return "SysRoleUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SysRoleUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysRoleUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysRoleUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysRoleUpdateResponseValidationError{}

// Validate checks the field values on SysRoleDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysRoleDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysRoleDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysRoleDeleteRequestMultiError, or nil if none found.
func (m *SysRoleDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SysRoleDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := SysRoleDeleteRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SysRoleDeleteRequestMultiError(errors)
	}

	return nil
}

// SysRoleDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by SysRoleDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type SysRoleDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysRoleDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysRoleDeleteRequestMultiError) AllErrors() []error { return m }

// SysRoleDeleteRequestValidationError is the validation error returned by
// SysRoleDeleteRequest.Validate if the designated constraints aren't met.
type SysRoleDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysRoleDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysRoleDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysRoleDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysRoleDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysRoleDeleteRequestValidationError) ErrorName() string {
	return "SysRoleDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SysRoleDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysRoleDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysRoleDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysRoleDeleteRequestValidationError{}

// Validate checks the field values on SysRoleDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysRoleDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysRoleDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysRoleDeleteResponseMultiError, or nil if none found.
func (m *SysRoleDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SysRoleDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysRoleDeleteResponseMultiError(errors)
	}

	return nil
}

// SysRoleDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by SysRoleDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type SysRoleDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysRoleDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysRoleDeleteResponseMultiError) AllErrors() []error { return m }

// SysRoleDeleteResponseValidationError is the validation error returned by
// SysRoleDeleteResponse.Validate if the designated constraints aren't met.
type SysRoleDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysRoleDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysRoleDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysRoleDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysRoleDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysRoleDeleteResponseValidationError) ErrorName() string {
	return "SysRoleDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SysRoleDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysRoleDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysRoleDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysRoleDeleteResponseValidationError{}

// Validate checks the field values on SysRolePagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysRolePagingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysRolePagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysRolePagingRequestMultiError, or nil if none found.
func (m *SysRolePagingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SysRolePagingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SysRolePagingRequestValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SysRolePagingRequestValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SysRolePagingRequestValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Keyword

	if len(errors) > 0 {
		return SysRolePagingRequestMultiError(errors)
	}

	return nil
}

// SysRolePagingRequestMultiError is an error wrapping multiple validation
// errors returned by SysRolePagingRequest.ValidateAll() if the designated
// constraints aren't met.
type SysRolePagingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysRolePagingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysRolePagingRequestMultiError) AllErrors() []error { return m }

// SysRolePagingRequestValidationError is the validation error returned by
// SysRolePagingRequest.Validate if the designated constraints aren't met.
type SysRolePagingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysRolePagingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysRolePagingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysRolePagingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysRolePagingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysRolePagingRequestValidationError) ErrorName() string {
	return "SysRolePagingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SysRolePagingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysRolePagingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysRolePagingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysRolePagingRequestValidationError{}

// Validate checks the field values on SysRolePagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysRolePagingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysRolePagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysRolePagingResponseMultiError, or nil if none found.
func (m *SysRolePagingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SysRolePagingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SysRolePagingResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SysRolePagingResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SysRolePagingResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SysRolePagingResponseValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SysRolePagingResponseValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SysRolePagingResponseValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SysRolePagingResponseMultiError(errors)
	}

	return nil
}

// SysRolePagingResponseMultiError is an error wrapping multiple validation
// errors returned by SysRolePagingResponse.ValidateAll() if the designated
// constraints aren't met.
type SysRolePagingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysRolePagingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysRolePagingResponseMultiError) AllErrors() []error { return m }

// SysRolePagingResponseValidationError is the validation error returned by
// SysRolePagingResponse.Validate if the designated constraints aren't met.
type SysRolePagingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysRolePagingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysRolePagingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysRolePagingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysRolePagingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysRolePagingResponseValidationError) ErrorName() string {
	return "SysRolePagingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SysRolePagingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysRolePagingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysRolePagingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysRolePagingResponseValidationError{}

// Validate checks the field values on SysRoleResourceIdListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysRoleResourceIdListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysRoleResourceIdListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysRoleResourceIdListRequestMultiError, or nil if none found.
func (m *SysRoleResourceIdListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SysRoleResourceIdListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRoleId()) < 1 {
		err := SysRoleResourceIdListRequestValidationError{
			field:  "RoleId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SysRoleResourceIdListRequestMultiError(errors)
	}

	return nil
}

// SysRoleResourceIdListRequestMultiError is an error wrapping multiple
// validation errors returned by SysRoleResourceIdListRequest.ValidateAll() if
// the designated constraints aren't met.
type SysRoleResourceIdListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysRoleResourceIdListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysRoleResourceIdListRequestMultiError) AllErrors() []error { return m }

// SysRoleResourceIdListRequestValidationError is the validation error returned
// by SysRoleResourceIdListRequest.Validate if the designated constraints
// aren't met.
type SysRoleResourceIdListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysRoleResourceIdListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysRoleResourceIdListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysRoleResourceIdListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysRoleResourceIdListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysRoleResourceIdListRequestValidationError) ErrorName() string {
	return "SysRoleResourceIdListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SysRoleResourceIdListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysRoleResourceIdListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysRoleResourceIdListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysRoleResourceIdListRequestValidationError{}

// Validate checks the field values on SysRoleResourceIdListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysRoleResourceIdListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysRoleResourceIdListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SysRoleResourceIdListResponseMultiError, or nil if none found.
func (m *SysRoleResourceIdListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SysRoleResourceIdListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysRoleResourceIdListResponseMultiError(errors)
	}

	return nil
}

// SysRoleResourceIdListResponseMultiError is an error wrapping multiple
// validation errors returned by SysRoleResourceIdListResponse.ValidateAll()
// if the designated constraints aren't met.
type SysRoleResourceIdListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysRoleResourceIdListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysRoleResourceIdListResponseMultiError) AllErrors() []error { return m }

// SysRoleResourceIdListResponseValidationError is the validation error
// returned by SysRoleResourceIdListResponse.Validate if the designated
// constraints aren't met.
type SysRoleResourceIdListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysRoleResourceIdListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysRoleResourceIdListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysRoleResourceIdListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysRoleResourceIdListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysRoleResourceIdListResponseValidationError) ErrorName() string {
	return "SysRoleResourceIdListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SysRoleResourceIdListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysRoleResourceIdListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysRoleResourceIdListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysRoleResourceIdListResponseValidationError{}

// Validate checks the field values on SysRoleResourceIdSaveRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysRoleResourceIdSaveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysRoleResourceIdSaveRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysRoleResourceIdSaveRequestMultiError, or nil if none found.
func (m *SysRoleResourceIdSaveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SysRoleResourceIdSaveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRoleId()) < 1 {
		err := SysRoleResourceIdSaveRequestValidationError{
			field:  "RoleId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SysRoleResourceIdSaveRequestMultiError(errors)
	}

	return nil
}

// SysRoleResourceIdSaveRequestMultiError is an error wrapping multiple
// validation errors returned by SysRoleResourceIdSaveRequest.ValidateAll() if
// the designated constraints aren't met.
type SysRoleResourceIdSaveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysRoleResourceIdSaveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysRoleResourceIdSaveRequestMultiError) AllErrors() []error { return m }

// SysRoleResourceIdSaveRequestValidationError is the validation error returned
// by SysRoleResourceIdSaveRequest.Validate if the designated constraints
// aren't met.
type SysRoleResourceIdSaveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysRoleResourceIdSaveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysRoleResourceIdSaveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysRoleResourceIdSaveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysRoleResourceIdSaveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysRoleResourceIdSaveRequestValidationError) ErrorName() string {
	return "SysRoleResourceIdSaveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SysRoleResourceIdSaveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysRoleResourceIdSaveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysRoleResourceIdSaveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysRoleResourceIdSaveRequestValidationError{}

// Validate checks the field values on SysRoleResourceIdSaveResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysRoleResourceIdSaveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysRoleResourceIdSaveResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SysRoleResourceIdSaveResponseMultiError, or nil if none found.
func (m *SysRoleResourceIdSaveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SysRoleResourceIdSaveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysRoleResourceIdSaveResponseMultiError(errors)
	}

	return nil
}

// SysRoleResourceIdSaveResponseMultiError is an error wrapping multiple
// validation errors returned by SysRoleResourceIdSaveResponse.ValidateAll()
// if the designated constraints aren't met.
type SysRoleResourceIdSaveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysRoleResourceIdSaveResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysRoleResourceIdSaveResponseMultiError) AllErrors() []error { return m }

// SysRoleResourceIdSaveResponseValidationError is the validation error
// returned by SysRoleResourceIdSaveResponse.Validate if the designated
// constraints aren't met.
type SysRoleResourceIdSaveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysRoleResourceIdSaveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysRoleResourceIdSaveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysRoleResourceIdSaveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysRoleResourceIdSaveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysRoleResourceIdSaveResponseValidationError) ErrorName() string {
	return "SysRoleResourceIdSaveResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SysRoleResourceIdSaveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysRoleResourceIdSaveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysRoleResourceIdSaveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysRoleResourceIdSaveResponseValidationError{}
