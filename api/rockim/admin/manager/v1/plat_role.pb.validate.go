// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/rockim/admin/manager/v1/plat_role.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PlatRoleOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PlatRoleOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatRoleOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlatRoleOptionsMultiError, or nil if none found.
func (m *PlatRoleOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatRoleOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := PlatRoleOptionsValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRemark()) < 1 {
		err := PlatRoleOptionsValidationError{
			field:  "Remark",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PlatRoleOptionsMultiError(errors)
	}

	return nil
}

// PlatRoleOptionsMultiError is an error wrapping multiple validation errors
// returned by PlatRoleOptions.ValidateAll() if the designated constraints
// aren't met.
type PlatRoleOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatRoleOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatRoleOptionsMultiError) AllErrors() []error { return m }

// PlatRoleOptionsValidationError is the validation error returned by
// PlatRoleOptions.Validate if the designated constraints aren't met.
type PlatRoleOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatRoleOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatRoleOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatRoleOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatRoleOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatRoleOptionsValidationError) ErrorName() string { return "PlatRoleOptionsValidationError" }

// Error satisfies the builtin error interface
func (e PlatRoleOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatRoleOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatRoleOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatRoleOptionsValidationError{}

// Validate checks the field values on PlatRoleCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlatRoleCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatRoleCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlatRoleCreateRequestMultiError, or nil if none found.
func (m *PlatRoleCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatRoleCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOptions() == nil {
		err := PlatRoleCreateRequestValidationError{
			field:  "Options",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlatRoleCreateRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlatRoleCreateRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlatRoleCreateRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PlatRoleCreateRequestMultiError(errors)
	}

	return nil
}

// PlatRoleCreateRequestMultiError is an error wrapping multiple validation
// errors returned by PlatRoleCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type PlatRoleCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatRoleCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatRoleCreateRequestMultiError) AllErrors() []error { return m }

// PlatRoleCreateRequestValidationError is the validation error returned by
// PlatRoleCreateRequest.Validate if the designated constraints aren't met.
type PlatRoleCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatRoleCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatRoleCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatRoleCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatRoleCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatRoleCreateRequestValidationError) ErrorName() string {
	return "PlatRoleCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PlatRoleCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatRoleCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatRoleCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatRoleCreateRequestValidationError{}

// Validate checks the field values on PlatRoleCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlatRoleCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatRoleCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlatRoleCreateResponseMultiError, or nil if none found.
func (m *PlatRoleCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatRoleCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PlatRoleCreateResponseMultiError(errors)
	}

	return nil
}

// PlatRoleCreateResponseMultiError is an error wrapping multiple validation
// errors returned by PlatRoleCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type PlatRoleCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatRoleCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatRoleCreateResponseMultiError) AllErrors() []error { return m }

// PlatRoleCreateResponseValidationError is the validation error returned by
// PlatRoleCreateResponse.Validate if the designated constraints aren't met.
type PlatRoleCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatRoleCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatRoleCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatRoleCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatRoleCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatRoleCreateResponseValidationError) ErrorName() string {
	return "PlatRoleCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PlatRoleCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatRoleCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatRoleCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatRoleCreateResponseValidationError{}

// Validate checks the field values on PlatRoleUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlatRoleUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatRoleUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlatRoleUpdateRequestMultiError, or nil if none found.
func (m *PlatRoleUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatRoleUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := PlatRoleUpdateRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOptions() == nil {
		err := PlatRoleUpdateRequestValidationError{
			field:  "Options",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlatRoleUpdateRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlatRoleUpdateRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlatRoleUpdateRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PlatRoleUpdateRequestMultiError(errors)
	}

	return nil
}

// PlatRoleUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by PlatRoleUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type PlatRoleUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatRoleUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatRoleUpdateRequestMultiError) AllErrors() []error { return m }

// PlatRoleUpdateRequestValidationError is the validation error returned by
// PlatRoleUpdateRequest.Validate if the designated constraints aren't met.
type PlatRoleUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatRoleUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatRoleUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatRoleUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatRoleUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatRoleUpdateRequestValidationError) ErrorName() string {
	return "PlatRoleUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PlatRoleUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatRoleUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatRoleUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatRoleUpdateRequestValidationError{}

// Validate checks the field values on PlatRoleUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlatRoleUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatRoleUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlatRoleUpdateResponseMultiError, or nil if none found.
func (m *PlatRoleUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatRoleUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PlatRoleUpdateResponseMultiError(errors)
	}

	return nil
}

// PlatRoleUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by PlatRoleUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type PlatRoleUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatRoleUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatRoleUpdateResponseMultiError) AllErrors() []error { return m }

// PlatRoleUpdateResponseValidationError is the validation error returned by
// PlatRoleUpdateResponse.Validate if the designated constraints aren't met.
type PlatRoleUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatRoleUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatRoleUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatRoleUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatRoleUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatRoleUpdateResponseValidationError) ErrorName() string {
	return "PlatRoleUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PlatRoleUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatRoleUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatRoleUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatRoleUpdateResponseValidationError{}

// Validate checks the field values on PlatRoleDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlatRoleDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatRoleDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlatRoleDeleteRequestMultiError, or nil if none found.
func (m *PlatRoleDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatRoleDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := PlatRoleDeleteRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PlatRoleDeleteRequestMultiError(errors)
	}

	return nil
}

// PlatRoleDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by PlatRoleDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type PlatRoleDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatRoleDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatRoleDeleteRequestMultiError) AllErrors() []error { return m }

// PlatRoleDeleteRequestValidationError is the validation error returned by
// PlatRoleDeleteRequest.Validate if the designated constraints aren't met.
type PlatRoleDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatRoleDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatRoleDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatRoleDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatRoleDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatRoleDeleteRequestValidationError) ErrorName() string {
	return "PlatRoleDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PlatRoleDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatRoleDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatRoleDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatRoleDeleteRequestValidationError{}

// Validate checks the field values on PlatRoleDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlatRoleDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatRoleDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlatRoleDeleteResponseMultiError, or nil if none found.
func (m *PlatRoleDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatRoleDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PlatRoleDeleteResponseMultiError(errors)
	}

	return nil
}

// PlatRoleDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by PlatRoleDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type PlatRoleDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatRoleDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatRoleDeleteResponseMultiError) AllErrors() []error { return m }

// PlatRoleDeleteResponseValidationError is the validation error returned by
// PlatRoleDeleteResponse.Validate if the designated constraints aren't met.
type PlatRoleDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatRoleDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatRoleDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatRoleDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatRoleDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatRoleDeleteResponseValidationError) ErrorName() string {
	return "PlatRoleDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PlatRoleDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatRoleDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatRoleDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatRoleDeleteResponseValidationError{}

// Validate checks the field values on PlatRolePagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlatRolePagingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatRolePagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlatRolePagingRequestMultiError, or nil if none found.
func (m *PlatRolePagingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatRolePagingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlatRolePagingRequestValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlatRolePagingRequestValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlatRolePagingRequestValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Keyword

	if len(errors) > 0 {
		return PlatRolePagingRequestMultiError(errors)
	}

	return nil
}

// PlatRolePagingRequestMultiError is an error wrapping multiple validation
// errors returned by PlatRolePagingRequest.ValidateAll() if the designated
// constraints aren't met.
type PlatRolePagingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatRolePagingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatRolePagingRequestMultiError) AllErrors() []error { return m }

// PlatRolePagingRequestValidationError is the validation error returned by
// PlatRolePagingRequest.Validate if the designated constraints aren't met.
type PlatRolePagingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatRolePagingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatRolePagingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatRolePagingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatRolePagingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatRolePagingRequestValidationError) ErrorName() string {
	return "PlatRolePagingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PlatRolePagingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatRolePagingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatRolePagingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatRolePagingRequestValidationError{}

// Validate checks the field values on PlatRolePagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlatRolePagingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatRolePagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlatRolePagingResponseMultiError, or nil if none found.
func (m *PlatRolePagingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatRolePagingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlatRolePagingResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlatRolePagingResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlatRolePagingResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlatRolePagingResponseValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlatRolePagingResponseValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlatRolePagingResponseValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PlatRolePagingResponseMultiError(errors)
	}

	return nil
}

// PlatRolePagingResponseMultiError is an error wrapping multiple validation
// errors returned by PlatRolePagingResponse.ValidateAll() if the designated
// constraints aren't met.
type PlatRolePagingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatRolePagingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatRolePagingResponseMultiError) AllErrors() []error { return m }

// PlatRolePagingResponseValidationError is the validation error returned by
// PlatRolePagingResponse.Validate if the designated constraints aren't met.
type PlatRolePagingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatRolePagingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatRolePagingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatRolePagingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatRolePagingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatRolePagingResponseValidationError) ErrorName() string {
	return "PlatRolePagingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PlatRolePagingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatRolePagingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatRolePagingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatRolePagingResponseValidationError{}

// Validate checks the field values on PlatRoleResourceIdListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlatRoleResourceIdListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatRoleResourceIdListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PlatRoleResourceIdListRequestMultiError, or nil if none found.
func (m *PlatRoleResourceIdListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatRoleResourceIdListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRoleId()) < 1 {
		err := PlatRoleResourceIdListRequestValidationError{
			field:  "RoleId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PlatRoleResourceIdListRequestMultiError(errors)
	}

	return nil
}

// PlatRoleResourceIdListRequestMultiError is an error wrapping multiple
// validation errors returned by PlatRoleResourceIdListRequest.ValidateAll()
// if the designated constraints aren't met.
type PlatRoleResourceIdListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatRoleResourceIdListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatRoleResourceIdListRequestMultiError) AllErrors() []error { return m }

// PlatRoleResourceIdListRequestValidationError is the validation error
// returned by PlatRoleResourceIdListRequest.Validate if the designated
// constraints aren't met.
type PlatRoleResourceIdListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatRoleResourceIdListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatRoleResourceIdListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatRoleResourceIdListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatRoleResourceIdListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatRoleResourceIdListRequestValidationError) ErrorName() string {
	return "PlatRoleResourceIdListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PlatRoleResourceIdListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatRoleResourceIdListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatRoleResourceIdListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatRoleResourceIdListRequestValidationError{}

// Validate checks the field values on PlatRoleResourceIdListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlatRoleResourceIdListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatRoleResourceIdListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PlatRoleResourceIdListResponseMultiError, or nil if none found.
func (m *PlatRoleResourceIdListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatRoleResourceIdListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PlatRoleResourceIdListResponseMultiError(errors)
	}

	return nil
}

// PlatRoleResourceIdListResponseMultiError is an error wrapping multiple
// validation errors returned by PlatRoleResourceIdListResponse.ValidateAll()
// if the designated constraints aren't met.
type PlatRoleResourceIdListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatRoleResourceIdListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatRoleResourceIdListResponseMultiError) AllErrors() []error { return m }

// PlatRoleResourceIdListResponseValidationError is the validation error
// returned by PlatRoleResourceIdListResponse.Validate if the designated
// constraints aren't met.
type PlatRoleResourceIdListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatRoleResourceIdListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatRoleResourceIdListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatRoleResourceIdListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatRoleResourceIdListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatRoleResourceIdListResponseValidationError) ErrorName() string {
	return "PlatRoleResourceIdListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PlatRoleResourceIdListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatRoleResourceIdListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatRoleResourceIdListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatRoleResourceIdListResponseValidationError{}
