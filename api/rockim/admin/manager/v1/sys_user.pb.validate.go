// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/rockim/admin/manager/v1/sys_user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SysUserOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysUserOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysUserOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysUserOptionsMultiError,
// or nil if none found.
func (m *SysUserOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *SysUserOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := SysUserOptionsValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SysUserOptionsMultiError(errors)
	}

	return nil
}

// SysUserOptionsMultiError is an error wrapping multiple validation errors
// returned by SysUserOptions.ValidateAll() if the designated constraints
// aren't met.
type SysUserOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysUserOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysUserOptionsMultiError) AllErrors() []error { return m }

// SysUserOptionsValidationError is the validation error returned by
// SysUserOptions.Validate if the designated constraints aren't met.
type SysUserOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysUserOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysUserOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysUserOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysUserOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysUserOptionsValidationError) ErrorName() string { return "SysUserOptionsValidationError" }

// Error satisfies the builtin error interface
func (e SysUserOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysUserOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysUserOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysUserOptionsValidationError{}

// Validate checks the field values on SysUserCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysUserCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysUserCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysUserCreateRequestMultiError, or nil if none found.
func (m *SysUserCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SysUserCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOptions() == nil {
		err := SysUserCreateRequestValidationError{
			field:  "Options",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SysUserCreateRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SysUserCreateRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SysUserCreateRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Account

	// no validation rules for Password

	if len(errors) > 0 {
		return SysUserCreateRequestMultiError(errors)
	}

	return nil
}

// SysUserCreateRequestMultiError is an error wrapping multiple validation
// errors returned by SysUserCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type SysUserCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysUserCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysUserCreateRequestMultiError) AllErrors() []error { return m }

// SysUserCreateRequestValidationError is the validation error returned by
// SysUserCreateRequest.Validate if the designated constraints aren't met.
type SysUserCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysUserCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysUserCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysUserCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysUserCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysUserCreateRequestValidationError) ErrorName() string {
	return "SysUserCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SysUserCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysUserCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysUserCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysUserCreateRequestValidationError{}

// Validate checks the field values on SysUserCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysUserCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysUserCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysUserCreateResponseMultiError, or nil if none found.
func (m *SysUserCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SysUserCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysUserCreateResponseMultiError(errors)
	}

	return nil
}

// SysUserCreateResponseMultiError is an error wrapping multiple validation
// errors returned by SysUserCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type SysUserCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysUserCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysUserCreateResponseMultiError) AllErrors() []error { return m }

// SysUserCreateResponseValidationError is the validation error returned by
// SysUserCreateResponse.Validate if the designated constraints aren't met.
type SysUserCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysUserCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysUserCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysUserCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysUserCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysUserCreateResponseValidationError) ErrorName() string {
	return "SysUserCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SysUserCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysUserCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysUserCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysUserCreateResponseValidationError{}

// Validate checks the field values on SysUserUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysUserUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysUserUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysUserUpdateRequestMultiError, or nil if none found.
func (m *SysUserUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SysUserUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := SysUserUpdateRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOptions() == nil {
		err := SysUserUpdateRequestValidationError{
			field:  "Options",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SysUserUpdateRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SysUserUpdateRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SysUserUpdateRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SysUserUpdateRequestMultiError(errors)
	}

	return nil
}

// SysUserUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by SysUserUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type SysUserUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysUserUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysUserUpdateRequestMultiError) AllErrors() []error { return m }

// SysUserUpdateRequestValidationError is the validation error returned by
// SysUserUpdateRequest.Validate if the designated constraints aren't met.
type SysUserUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysUserUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysUserUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysUserUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysUserUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysUserUpdateRequestValidationError) ErrorName() string {
	return "SysUserUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SysUserUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysUserUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysUserUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysUserUpdateRequestValidationError{}

// Validate checks the field values on SysUserUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysUserUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysUserUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysUserUpdateResponseMultiError, or nil if none found.
func (m *SysUserUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SysUserUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysUserUpdateResponseMultiError(errors)
	}

	return nil
}

// SysUserUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by SysUserUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type SysUserUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysUserUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysUserUpdateResponseMultiError) AllErrors() []error { return m }

// SysUserUpdateResponseValidationError is the validation error returned by
// SysUserUpdateResponse.Validate if the designated constraints aren't met.
type SysUserUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysUserUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysUserUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysUserUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysUserUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysUserUpdateResponseValidationError) ErrorName() string {
	return "SysUserUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SysUserUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysUserUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysUserUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysUserUpdateResponseValidationError{}

// Validate checks the field values on SysUserDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysUserDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysUserDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysUserDeleteRequestMultiError, or nil if none found.
func (m *SysUserDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SysUserDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := SysUserDeleteRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SysUserDeleteRequestMultiError(errors)
	}

	return nil
}

// SysUserDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by SysUserDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type SysUserDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysUserDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysUserDeleteRequestMultiError) AllErrors() []error { return m }

// SysUserDeleteRequestValidationError is the validation error returned by
// SysUserDeleteRequest.Validate if the designated constraints aren't met.
type SysUserDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysUserDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysUserDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysUserDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysUserDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysUserDeleteRequestValidationError) ErrorName() string {
	return "SysUserDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SysUserDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysUserDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysUserDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysUserDeleteRequestValidationError{}

// Validate checks the field values on SysUserDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysUserDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysUserDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysUserDeleteResponseMultiError, or nil if none found.
func (m *SysUserDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SysUserDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysUserDeleteResponseMultiError(errors)
	}

	return nil
}

// SysUserDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by SysUserDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type SysUserDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysUserDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysUserDeleteResponseMultiError) AllErrors() []error { return m }

// SysUserDeleteResponseValidationError is the validation error returned by
// SysUserDeleteResponse.Validate if the designated constraints aren't met.
type SysUserDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysUserDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysUserDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysUserDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysUserDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysUserDeleteResponseValidationError) ErrorName() string {
	return "SysUserDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SysUserDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysUserDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysUserDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysUserDeleteResponseValidationError{}

// Validate checks the field values on SysUserPagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysUserPagingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysUserPagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysUserPagingRequestMultiError, or nil if none found.
func (m *SysUserPagingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SysUserPagingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SysUserPagingRequestValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SysUserPagingRequestValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SysUserPagingRequestValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Keyword

	if len(errors) > 0 {
		return SysUserPagingRequestMultiError(errors)
	}

	return nil
}

// SysUserPagingRequestMultiError is an error wrapping multiple validation
// errors returned by SysUserPagingRequest.ValidateAll() if the designated
// constraints aren't met.
type SysUserPagingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysUserPagingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysUserPagingRequestMultiError) AllErrors() []error { return m }

// SysUserPagingRequestValidationError is the validation error returned by
// SysUserPagingRequest.Validate if the designated constraints aren't met.
type SysUserPagingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysUserPagingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysUserPagingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysUserPagingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysUserPagingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysUserPagingRequestValidationError) ErrorName() string {
	return "SysUserPagingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SysUserPagingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysUserPagingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysUserPagingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysUserPagingRequestValidationError{}

// Validate checks the field values on SysUserPagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysUserPagingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysUserPagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysUserPagingResponseMultiError, or nil if none found.
func (m *SysUserPagingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SysUserPagingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SysUserPagingResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SysUserPagingResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SysUserPagingResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SysUserPagingResponseValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SysUserPagingResponseValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SysUserPagingResponseValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SysUserPagingResponseMultiError(errors)
	}

	return nil
}

// SysUserPagingResponseMultiError is an error wrapping multiple validation
// errors returned by SysUserPagingResponse.ValidateAll() if the designated
// constraints aren't met.
type SysUserPagingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysUserPagingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysUserPagingResponseMultiError) AllErrors() []error { return m }

// SysUserPagingResponseValidationError is the validation error returned by
// SysUserPagingResponse.Validate if the designated constraints aren't met.
type SysUserPagingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysUserPagingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysUserPagingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysUserPagingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysUserPagingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysUserPagingResponseValidationError) ErrorName() string {
	return "SysUserPagingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SysUserPagingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysUserPagingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysUserPagingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysUserPagingResponseValidationError{}

// Validate checks the field values on SysUserRoleIdListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysUserRoleIdListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysUserRoleIdListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysUserRoleIdListRequestMultiError, or nil if none found.
func (m *SysUserRoleIdListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SysUserRoleIdListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := SysUserRoleIdListRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SysUserRoleIdListRequestMultiError(errors)
	}

	return nil
}

// SysUserRoleIdListRequestMultiError is an error wrapping multiple validation
// errors returned by SysUserRoleIdListRequest.ValidateAll() if the designated
// constraints aren't met.
type SysUserRoleIdListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysUserRoleIdListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysUserRoleIdListRequestMultiError) AllErrors() []error { return m }

// SysUserRoleIdListRequestValidationError is the validation error returned by
// SysUserRoleIdListRequest.Validate if the designated constraints aren't met.
type SysUserRoleIdListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysUserRoleIdListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysUserRoleIdListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysUserRoleIdListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysUserRoleIdListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysUserRoleIdListRequestValidationError) ErrorName() string {
	return "SysUserRoleIdListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SysUserRoleIdListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysUserRoleIdListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysUserRoleIdListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysUserRoleIdListRequestValidationError{}

// Validate checks the field values on SysUserRoleIdListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysUserRoleIdListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysUserRoleIdListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysUserRoleIdListResponseMultiError, or nil if none found.
func (m *SysUserRoleIdListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SysUserRoleIdListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysUserRoleIdListResponseMultiError(errors)
	}

	return nil
}

// SysUserRoleIdListResponseMultiError is an error wrapping multiple validation
// errors returned by SysUserRoleIdListResponse.ValidateAll() if the
// designated constraints aren't met.
type SysUserRoleIdListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysUserRoleIdListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysUserRoleIdListResponseMultiError) AllErrors() []error { return m }

// SysUserRoleIdListResponseValidationError is the validation error returned by
// SysUserRoleIdListResponse.Validate if the designated constraints aren't met.
type SysUserRoleIdListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysUserRoleIdListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysUserRoleIdListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysUserRoleIdListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysUserRoleIdListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysUserRoleIdListResponseValidationError) ErrorName() string {
	return "SysUserRoleIdListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SysUserRoleIdListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysUserRoleIdListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysUserRoleIdListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysUserRoleIdListResponseValidationError{}

// Validate checks the field values on SysUserRoleIdSaveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysUserRoleIdSaveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysUserRoleIdSaveRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysUserRoleIdSaveRequestMultiError, or nil if none found.
func (m *SysUserRoleIdSaveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SysUserRoleIdSaveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := SysUserRoleIdSaveRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SysUserRoleIdSaveRequestMultiError(errors)
	}

	return nil
}

// SysUserRoleIdSaveRequestMultiError is an error wrapping multiple validation
// errors returned by SysUserRoleIdSaveRequest.ValidateAll() if the designated
// constraints aren't met.
type SysUserRoleIdSaveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysUserRoleIdSaveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysUserRoleIdSaveRequestMultiError) AllErrors() []error { return m }

// SysUserRoleIdSaveRequestValidationError is the validation error returned by
// SysUserRoleIdSaveRequest.Validate if the designated constraints aren't met.
type SysUserRoleIdSaveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysUserRoleIdSaveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysUserRoleIdSaveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysUserRoleIdSaveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysUserRoleIdSaveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysUserRoleIdSaveRequestValidationError) ErrorName() string {
	return "SysUserRoleIdSaveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SysUserRoleIdSaveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysUserRoleIdSaveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysUserRoleIdSaveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysUserRoleIdSaveRequestValidationError{}

// Validate checks the field values on SysUserRoleIdSaveResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysUserRoleIdSaveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysUserRoleIdSaveResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysUserRoleIdSaveResponseMultiError, or nil if none found.
func (m *SysUserRoleIdSaveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SysUserRoleIdSaveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysUserRoleIdSaveResponseMultiError(errors)
	}

	return nil
}

// SysUserRoleIdSaveResponseMultiError is an error wrapping multiple validation
// errors returned by SysUserRoleIdSaveResponse.ValidateAll() if the
// designated constraints aren't met.
type SysUserRoleIdSaveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysUserRoleIdSaveResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysUserRoleIdSaveResponseMultiError) AllErrors() []error { return m }

// SysUserRoleIdSaveResponseValidationError is the validation error returned by
// SysUserRoleIdSaveResponse.Validate if the designated constraints aren't met.
type SysUserRoleIdSaveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysUserRoleIdSaveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysUserRoleIdSaveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysUserRoleIdSaveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysUserRoleIdSaveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysUserRoleIdSaveResponseValidationError) ErrorName() string {
	return "SysUserRoleIdSaveResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SysUserRoleIdSaveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysUserRoleIdSaveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysUserRoleIdSaveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysUserRoleIdSaveResponseValidationError{}
