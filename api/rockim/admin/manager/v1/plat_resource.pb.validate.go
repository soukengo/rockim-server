// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/rockim/admin/manager/v1/plat_resource.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PlatResourceOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlatResourceOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatResourceOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlatResourceOptionsMultiError, or nil if none found.
func (m *PlatResourceOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatResourceOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := v1.PlatResourceCategory_name[int32(m.GetCategory())]; !ok {
		err := PlatResourceOptionsValidationError{
			field:  "Category",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := PlatResourceOptionsValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetParentId()) < 1 {
		err := PlatResourceOptionsValidationError{
			field:  "ParentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Url

	// no validation rules for Icon

	// no validation rules for Order

	if len(errors) > 0 {
		return PlatResourceOptionsMultiError(errors)
	}

	return nil
}

// PlatResourceOptionsMultiError is an error wrapping multiple validation
// errors returned by PlatResourceOptions.ValidateAll() if the designated
// constraints aren't met.
type PlatResourceOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatResourceOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatResourceOptionsMultiError) AllErrors() []error { return m }

// PlatResourceOptionsValidationError is the validation error returned by
// PlatResourceOptions.Validate if the designated constraints aren't met.
type PlatResourceOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatResourceOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatResourceOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatResourceOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatResourceOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatResourceOptionsValidationError) ErrorName() string {
	return "PlatResourceOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e PlatResourceOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatResourceOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatResourceOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatResourceOptionsValidationError{}

// Validate checks the field values on PlatResourceCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlatResourceCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatResourceCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlatResourceCreateRequestMultiError, or nil if none found.
func (m *PlatResourceCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatResourceCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOptions() == nil {
		err := PlatResourceCreateRequestValidationError{
			field:  "Options",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlatResourceCreateRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlatResourceCreateRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlatResourceCreateRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PlatResourceCreateRequestMultiError(errors)
	}

	return nil
}

// PlatResourceCreateRequestMultiError is an error wrapping multiple validation
// errors returned by PlatResourceCreateRequest.ValidateAll() if the
// designated constraints aren't met.
type PlatResourceCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatResourceCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatResourceCreateRequestMultiError) AllErrors() []error { return m }

// PlatResourceCreateRequestValidationError is the validation error returned by
// PlatResourceCreateRequest.Validate if the designated constraints aren't met.
type PlatResourceCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatResourceCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatResourceCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatResourceCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatResourceCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatResourceCreateRequestValidationError) ErrorName() string {
	return "PlatResourceCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PlatResourceCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatResourceCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatResourceCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatResourceCreateRequestValidationError{}

// Validate checks the field values on PlatResourceCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlatResourceCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatResourceCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlatResourceCreateResponseMultiError, or nil if none found.
func (m *PlatResourceCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatResourceCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PlatResourceCreateResponseMultiError(errors)
	}

	return nil
}

// PlatResourceCreateResponseMultiError is an error wrapping multiple
// validation errors returned by PlatResourceCreateResponse.ValidateAll() if
// the designated constraints aren't met.
type PlatResourceCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatResourceCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatResourceCreateResponseMultiError) AllErrors() []error { return m }

// PlatResourceCreateResponseValidationError is the validation error returned
// by PlatResourceCreateResponse.Validate if the designated constraints aren't met.
type PlatResourceCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatResourceCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatResourceCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatResourceCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatResourceCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatResourceCreateResponseValidationError) ErrorName() string {
	return "PlatResourceCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PlatResourceCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatResourceCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatResourceCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatResourceCreateResponseValidationError{}

// Validate checks the field values on PlatResourceUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlatResourceUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatResourceUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlatResourceUpdateRequestMultiError, or nil if none found.
func (m *PlatResourceUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatResourceUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := PlatResourceUpdateRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOptions() == nil {
		err := PlatResourceUpdateRequestValidationError{
			field:  "Options",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlatResourceUpdateRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlatResourceUpdateRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlatResourceUpdateRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PlatResourceUpdateRequestMultiError(errors)
	}

	return nil
}

// PlatResourceUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by PlatResourceUpdateRequest.ValidateAll() if the
// designated constraints aren't met.
type PlatResourceUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatResourceUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatResourceUpdateRequestMultiError) AllErrors() []error { return m }

// PlatResourceUpdateRequestValidationError is the validation error returned by
// PlatResourceUpdateRequest.Validate if the designated constraints aren't met.
type PlatResourceUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatResourceUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatResourceUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatResourceUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatResourceUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatResourceUpdateRequestValidationError) ErrorName() string {
	return "PlatResourceUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PlatResourceUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatResourceUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatResourceUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatResourceUpdateRequestValidationError{}

// Validate checks the field values on PlatResourceUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlatResourceUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatResourceUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlatResourceUpdateResponseMultiError, or nil if none found.
func (m *PlatResourceUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatResourceUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PlatResourceUpdateResponseMultiError(errors)
	}

	return nil
}

// PlatResourceUpdateResponseMultiError is an error wrapping multiple
// validation errors returned by PlatResourceUpdateResponse.ValidateAll() if
// the designated constraints aren't met.
type PlatResourceUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatResourceUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatResourceUpdateResponseMultiError) AllErrors() []error { return m }

// PlatResourceUpdateResponseValidationError is the validation error returned
// by PlatResourceUpdateResponse.Validate if the designated constraints aren't met.
type PlatResourceUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatResourceUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatResourceUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatResourceUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatResourceUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatResourceUpdateResponseValidationError) ErrorName() string {
	return "PlatResourceUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PlatResourceUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatResourceUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatResourceUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatResourceUpdateResponseValidationError{}

// Validate checks the field values on PlatResourceDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlatResourceDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatResourceDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlatResourceDeleteRequestMultiError, or nil if none found.
func (m *PlatResourceDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatResourceDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := PlatResourceDeleteRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PlatResourceDeleteRequestMultiError(errors)
	}

	return nil
}

// PlatResourceDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by PlatResourceDeleteRequest.ValidateAll() if the
// designated constraints aren't met.
type PlatResourceDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatResourceDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatResourceDeleteRequestMultiError) AllErrors() []error { return m }

// PlatResourceDeleteRequestValidationError is the validation error returned by
// PlatResourceDeleteRequest.Validate if the designated constraints aren't met.
type PlatResourceDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatResourceDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatResourceDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatResourceDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatResourceDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatResourceDeleteRequestValidationError) ErrorName() string {
	return "PlatResourceDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PlatResourceDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatResourceDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatResourceDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatResourceDeleteRequestValidationError{}

// Validate checks the field values on PlatResourceDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlatResourceDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatResourceDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlatResourceDeleteResponseMultiError, or nil if none found.
func (m *PlatResourceDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatResourceDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PlatResourceDeleteResponseMultiError(errors)
	}

	return nil
}

// PlatResourceDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by PlatResourceDeleteResponse.ValidateAll() if
// the designated constraints aren't met.
type PlatResourceDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatResourceDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatResourceDeleteResponseMultiError) AllErrors() []error { return m }

// PlatResourceDeleteResponseValidationError is the validation error returned
// by PlatResourceDeleteResponse.Validate if the designated constraints aren't met.
type PlatResourceDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatResourceDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatResourceDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatResourceDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatResourceDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatResourceDeleteResponseValidationError) ErrorName() string {
	return "PlatResourceDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PlatResourceDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatResourceDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatResourceDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatResourceDeleteResponseValidationError{}

// Validate checks the field values on PlatResourceTreeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlatResourceTreeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatResourceTreeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlatResourceTreeRequestMultiError, or nil if none found.
func (m *PlatResourceTreeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatResourceTreeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PlatResourceTreeRequestMultiError(errors)
	}

	return nil
}

// PlatResourceTreeRequestMultiError is an error wrapping multiple validation
// errors returned by PlatResourceTreeRequest.ValidateAll() if the designated
// constraints aren't met.
type PlatResourceTreeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatResourceTreeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatResourceTreeRequestMultiError) AllErrors() []error { return m }

// PlatResourceTreeRequestValidationError is the validation error returned by
// PlatResourceTreeRequest.Validate if the designated constraints aren't met.
type PlatResourceTreeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatResourceTreeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatResourceTreeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatResourceTreeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatResourceTreeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatResourceTreeRequestValidationError) ErrorName() string {
	return "PlatResourceTreeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PlatResourceTreeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatResourceTreeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatResourceTreeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatResourceTreeRequestValidationError{}

// Validate checks the field values on PlatResourceTreeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlatResourceTreeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatResourceTreeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlatResourceTreeResponseMultiError, or nil if none found.
func (m *PlatResourceTreeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatResourceTreeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlatResourceTreeResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlatResourceTreeResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlatResourceTreeResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PlatResourceTreeResponseMultiError(errors)
	}

	return nil
}

// PlatResourceTreeResponseMultiError is an error wrapping multiple validation
// errors returned by PlatResourceTreeResponse.ValidateAll() if the designated
// constraints aren't met.
type PlatResourceTreeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatResourceTreeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatResourceTreeResponseMultiError) AllErrors() []error { return m }

// PlatResourceTreeResponseValidationError is the validation error returned by
// PlatResourceTreeResponse.Validate if the designated constraints aren't met.
type PlatResourceTreeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatResourceTreeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatResourceTreeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatResourceTreeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatResourceTreeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatResourceTreeResponseValidationError) ErrorName() string {
	return "PlatResourceTreeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PlatResourceTreeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatResourceTreeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatResourceTreeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatResourceTreeResponseValidationError{}
