// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: api/rockim/service/platform/v1/product.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductAPIClient is the client API for ProductAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductAPIClient interface {
	Create(ctx context.Context, in *ProductCreateRequest, opts ...grpc.CallOption) (*ProductCreateResponse, error)
	Update(ctx context.Context, in *ProductUpdateRequest, opts ...grpc.CallOption) (*ProductUpdateResponse, error)
	Find(ctx context.Context, in *ProductFindRequest, opts ...grpc.CallOption) (*ProductFindResponse, error)
	ListByTenant(ctx context.Context, in *ProductListByTenantRequest, opts ...grpc.CallOption) (*ProductListByTenantResponse, error)
}

type productAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewProductAPIClient(cc grpc.ClientConnInterface) ProductAPIClient {
	return &productAPIClient{cc}
}

func (c *productAPIClient) Create(ctx context.Context, in *ProductCreateRequest, opts ...grpc.CallOption) (*ProductCreateResponse, error) {
	out := new(ProductCreateResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.platform.v1.ProductAPI/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAPIClient) Update(ctx context.Context, in *ProductUpdateRequest, opts ...grpc.CallOption) (*ProductUpdateResponse, error) {
	out := new(ProductUpdateResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.platform.v1.ProductAPI/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAPIClient) Find(ctx context.Context, in *ProductFindRequest, opts ...grpc.CallOption) (*ProductFindResponse, error) {
	out := new(ProductFindResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.platform.v1.ProductAPI/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAPIClient) ListByTenant(ctx context.Context, in *ProductListByTenantRequest, opts ...grpc.CallOption) (*ProductListByTenantResponse, error) {
	out := new(ProductListByTenantResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.platform.v1.ProductAPI/ListByTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductAPIServer is the server API for ProductAPI service.
// All implementations must embed UnimplementedProductAPIServer
// for forward compatibility
type ProductAPIServer interface {
	Create(context.Context, *ProductCreateRequest) (*ProductCreateResponse, error)
	Update(context.Context, *ProductUpdateRequest) (*ProductUpdateResponse, error)
	Find(context.Context, *ProductFindRequest) (*ProductFindResponse, error)
	ListByTenant(context.Context, *ProductListByTenantRequest) (*ProductListByTenantResponse, error)
	mustEmbedUnimplementedProductAPIServer()
}

// UnimplementedProductAPIServer must be embedded to have forward compatible implementations.
type UnimplementedProductAPIServer struct {
}

func (UnimplementedProductAPIServer) Create(context.Context, *ProductCreateRequest) (*ProductCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProductAPIServer) Update(context.Context, *ProductUpdateRequest) (*ProductUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProductAPIServer) Find(context.Context, *ProductFindRequest) (*ProductFindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedProductAPIServer) ListByTenant(context.Context, *ProductListByTenantRequest) (*ProductListByTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByTenant not implemented")
}
func (UnimplementedProductAPIServer) mustEmbedUnimplementedProductAPIServer() {}

// UnsafeProductAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductAPIServer will
// result in compilation errors.
type UnsafeProductAPIServer interface {
	mustEmbedUnimplementedProductAPIServer()
}

func RegisterProductAPIServer(s grpc.ServiceRegistrar, srv ProductAPIServer) {
	s.RegisterService(&ProductAPI_ServiceDesc, srv)
}

func _ProductAPI_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAPIServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.platform.v1.ProductAPI/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAPIServer).Create(ctx, req.(*ProductCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAPI_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAPIServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.platform.v1.ProductAPI/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAPIServer).Update(ctx, req.(*ProductUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAPI_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductFindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAPIServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.platform.v1.ProductAPI/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAPIServer).Find(ctx, req.(*ProductFindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAPI_ListByTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductListByTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAPIServer).ListByTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.platform.v1.ProductAPI/ListByTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAPIServer).ListByTenant(ctx, req.(*ProductListByTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductAPI_ServiceDesc is the grpc.ServiceDesc for ProductAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rockim.service.platform.v1.ProductAPI",
	HandlerType: (*ProductAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ProductAPI_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProductAPI_Update_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _ProductAPI_Find_Handler,
		},
		{
			MethodName: "ListByTenant",
			Handler:    _ProductAPI_ListByTenant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/rockim/service/platform/v1/product.proto",
}
