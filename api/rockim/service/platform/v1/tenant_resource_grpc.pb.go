// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: api/rockim/service/platform/v1/tenant_resource.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TenantResourceAPIClient is the client API for TenantResourceAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenantResourceAPIClient interface {
	// 创建资源
	Create(ctx context.Context, in *TenantResourceCreateRequest, opts ...grpc.CallOption) (*TenantResourceCreateResponse, error)
	// 修改资源
	Update(ctx context.Context, in *TenantResourceUpdateRequest, opts ...grpc.CallOption) (*TenantResourceUpdateResponse, error)
	// 删除资源
	Delete(ctx context.Context, in *TenantResourceDeleteRequest, opts ...grpc.CallOption) (*TenantResourceDeleteResponse, error)
	// 获取平台资源列表
	List(ctx context.Context, in *TenantResourceListRequest, opts ...grpc.CallOption) (*TenantResourceListResponse, error)
	// 获取平台资源列表 (指定id列表)
	ListByIds(ctx context.Context, in *TenantResourceListByIdsRequest, opts ...grpc.CallOption) (*TenantResourceListByIdsResponse, error)
}

type tenantResourceAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantResourceAPIClient(cc grpc.ClientConnInterface) TenantResourceAPIClient {
	return &tenantResourceAPIClient{cc}
}

func (c *tenantResourceAPIClient) Create(ctx context.Context, in *TenantResourceCreateRequest, opts ...grpc.CallOption) (*TenantResourceCreateResponse, error) {
	out := new(TenantResourceCreateResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.platform.v1.TenantResourceAPI/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantResourceAPIClient) Update(ctx context.Context, in *TenantResourceUpdateRequest, opts ...grpc.CallOption) (*TenantResourceUpdateResponse, error) {
	out := new(TenantResourceUpdateResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.platform.v1.TenantResourceAPI/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantResourceAPIClient) Delete(ctx context.Context, in *TenantResourceDeleteRequest, opts ...grpc.CallOption) (*TenantResourceDeleteResponse, error) {
	out := new(TenantResourceDeleteResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.platform.v1.TenantResourceAPI/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantResourceAPIClient) List(ctx context.Context, in *TenantResourceListRequest, opts ...grpc.CallOption) (*TenantResourceListResponse, error) {
	out := new(TenantResourceListResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.platform.v1.TenantResourceAPI/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantResourceAPIClient) ListByIds(ctx context.Context, in *TenantResourceListByIdsRequest, opts ...grpc.CallOption) (*TenantResourceListByIdsResponse, error) {
	out := new(TenantResourceListByIdsResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.platform.v1.TenantResourceAPI/ListByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantResourceAPIServer is the server API for TenantResourceAPI service.
// All implementations must embed UnimplementedTenantResourceAPIServer
// for forward compatibility
type TenantResourceAPIServer interface {
	// 创建资源
	Create(context.Context, *TenantResourceCreateRequest) (*TenantResourceCreateResponse, error)
	// 修改资源
	Update(context.Context, *TenantResourceUpdateRequest) (*TenantResourceUpdateResponse, error)
	// 删除资源
	Delete(context.Context, *TenantResourceDeleteRequest) (*TenantResourceDeleteResponse, error)
	// 获取平台资源列表
	List(context.Context, *TenantResourceListRequest) (*TenantResourceListResponse, error)
	// 获取平台资源列表 (指定id列表)
	ListByIds(context.Context, *TenantResourceListByIdsRequest) (*TenantResourceListByIdsResponse, error)
	mustEmbedUnimplementedTenantResourceAPIServer()
}

// UnimplementedTenantResourceAPIServer must be embedded to have forward compatible implementations.
type UnimplementedTenantResourceAPIServer struct {
}

func (UnimplementedTenantResourceAPIServer) Create(context.Context, *TenantResourceCreateRequest) (*TenantResourceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTenantResourceAPIServer) Update(context.Context, *TenantResourceUpdateRequest) (*TenantResourceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTenantResourceAPIServer) Delete(context.Context, *TenantResourceDeleteRequest) (*TenantResourceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTenantResourceAPIServer) List(context.Context, *TenantResourceListRequest) (*TenantResourceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTenantResourceAPIServer) ListByIds(context.Context, *TenantResourceListByIdsRequest) (*TenantResourceListByIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByIds not implemented")
}
func (UnimplementedTenantResourceAPIServer) mustEmbedUnimplementedTenantResourceAPIServer() {}

// UnsafeTenantResourceAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantResourceAPIServer will
// result in compilation errors.
type UnsafeTenantResourceAPIServer interface {
	mustEmbedUnimplementedTenantResourceAPIServer()
}

func RegisterTenantResourceAPIServer(s grpc.ServiceRegistrar, srv TenantResourceAPIServer) {
	s.RegisterService(&TenantResourceAPI_ServiceDesc, srv)
}

func _TenantResourceAPI_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantResourceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantResourceAPIServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.platform.v1.TenantResourceAPI/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantResourceAPIServer).Create(ctx, req.(*TenantResourceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantResourceAPI_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantResourceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantResourceAPIServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.platform.v1.TenantResourceAPI/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantResourceAPIServer).Update(ctx, req.(*TenantResourceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantResourceAPI_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantResourceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantResourceAPIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.platform.v1.TenantResourceAPI/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantResourceAPIServer).Delete(ctx, req.(*TenantResourceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantResourceAPI_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantResourceAPIServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.platform.v1.TenantResourceAPI/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantResourceAPIServer).List(ctx, req.(*TenantResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantResourceAPI_ListByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantResourceListByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantResourceAPIServer).ListByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.platform.v1.TenantResourceAPI/ListByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantResourceAPIServer).ListByIds(ctx, req.(*TenantResourceListByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TenantResourceAPI_ServiceDesc is the grpc.ServiceDesc for TenantResourceAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenantResourceAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rockim.service.platform.v1.TenantResourceAPI",
	HandlerType: (*TenantResourceAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TenantResourceAPI_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TenantResourceAPI_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TenantResourceAPI_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _TenantResourceAPI_List_Handler,
		},
		{
			MethodName: "ListByIds",
			Handler:    _TenantResourceAPI_ListByIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/rockim/service/platform/v1/tenant_resource.proto",
}
