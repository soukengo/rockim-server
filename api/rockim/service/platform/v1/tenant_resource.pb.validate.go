// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/rockim/service/platform/v1/tenant_resource.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TenantResourceOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantResourceOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantResourceOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantResourceOptionsMultiError, or nil if none found.
func (m *TenantResourceOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantResourceOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Category

	// no validation rules for Name

	// no validation rules for ParentId

	// no validation rules for Url

	// no validation rules for Icon

	// no validation rules for Order

	if len(errors) > 0 {
		return TenantResourceOptionsMultiError(errors)
	}

	return nil
}

// TenantResourceOptionsMultiError is an error wrapping multiple validation
// errors returned by TenantResourceOptions.ValidateAll() if the designated
// constraints aren't met.
type TenantResourceOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantResourceOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantResourceOptionsMultiError) AllErrors() []error { return m }

// TenantResourceOptionsValidationError is the validation error returned by
// TenantResourceOptions.Validate if the designated constraints aren't met.
type TenantResourceOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantResourceOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantResourceOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantResourceOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantResourceOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantResourceOptionsValidationError) ErrorName() string {
	return "TenantResourceOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e TenantResourceOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantResourceOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantResourceOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantResourceOptionsValidationError{}

// Validate checks the field values on TenantResourceCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantResourceCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantResourceCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantResourceCreateRequestMultiError, or nil if none found.
func (m *TenantResourceCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantResourceCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOptions() == nil {
		err := TenantResourceCreateRequestValidationError{
			field:  "Options",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantResourceCreateRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantResourceCreateRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantResourceCreateRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantResourceCreateRequestMultiError(errors)
	}

	return nil
}

// TenantResourceCreateRequestMultiError is an error wrapping multiple
// validation errors returned by TenantResourceCreateRequest.ValidateAll() if
// the designated constraints aren't met.
type TenantResourceCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantResourceCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantResourceCreateRequestMultiError) AllErrors() []error { return m }

// TenantResourceCreateRequestValidationError is the validation error returned
// by TenantResourceCreateRequest.Validate if the designated constraints
// aren't met.
type TenantResourceCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantResourceCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantResourceCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantResourceCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantResourceCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantResourceCreateRequestValidationError) ErrorName() string {
	return "TenantResourceCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantResourceCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantResourceCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantResourceCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantResourceCreateRequestValidationError{}

// Validate checks the field values on TenantResourceCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantResourceCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantResourceCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantResourceCreateResponseMultiError, or nil if none found.
func (m *TenantResourceCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantResourceCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TenantResourceCreateResponseMultiError(errors)
	}

	return nil
}

// TenantResourceCreateResponseMultiError is an error wrapping multiple
// validation errors returned by TenantResourceCreateResponse.ValidateAll() if
// the designated constraints aren't met.
type TenantResourceCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantResourceCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantResourceCreateResponseMultiError) AllErrors() []error { return m }

// TenantResourceCreateResponseValidationError is the validation error returned
// by TenantResourceCreateResponse.Validate if the designated constraints
// aren't met.
type TenantResourceCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantResourceCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantResourceCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantResourceCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantResourceCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantResourceCreateResponseValidationError) ErrorName() string {
	return "TenantResourceCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantResourceCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantResourceCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantResourceCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantResourceCreateResponseValidationError{}

// Validate checks the field values on TenantResourceUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantResourceUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantResourceUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantResourceUpdateRequestMultiError, or nil if none found.
func (m *TenantResourceUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantResourceUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetOptions() == nil {
		err := TenantResourceUpdateRequestValidationError{
			field:  "Options",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantResourceUpdateRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantResourceUpdateRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantResourceUpdateRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantResourceUpdateRequestMultiError(errors)
	}

	return nil
}

// TenantResourceUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by TenantResourceUpdateRequest.ValidateAll() if
// the designated constraints aren't met.
type TenantResourceUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantResourceUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantResourceUpdateRequestMultiError) AllErrors() []error { return m }

// TenantResourceUpdateRequestValidationError is the validation error returned
// by TenantResourceUpdateRequest.Validate if the designated constraints
// aren't met.
type TenantResourceUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantResourceUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantResourceUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantResourceUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantResourceUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantResourceUpdateRequestValidationError) ErrorName() string {
	return "TenantResourceUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantResourceUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantResourceUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantResourceUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantResourceUpdateRequestValidationError{}

// Validate checks the field values on TenantResourceUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantResourceUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantResourceUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantResourceUpdateResponseMultiError, or nil if none found.
func (m *TenantResourceUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantResourceUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TenantResourceUpdateResponseMultiError(errors)
	}

	return nil
}

// TenantResourceUpdateResponseMultiError is an error wrapping multiple
// validation errors returned by TenantResourceUpdateResponse.ValidateAll() if
// the designated constraints aren't met.
type TenantResourceUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantResourceUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantResourceUpdateResponseMultiError) AllErrors() []error { return m }

// TenantResourceUpdateResponseValidationError is the validation error returned
// by TenantResourceUpdateResponse.Validate if the designated constraints
// aren't met.
type TenantResourceUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantResourceUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantResourceUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantResourceUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantResourceUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantResourceUpdateResponseValidationError) ErrorName() string {
	return "TenantResourceUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantResourceUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantResourceUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantResourceUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantResourceUpdateResponseValidationError{}

// Validate checks the field values on TenantResourceDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantResourceDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantResourceDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantResourceDeleteRequestMultiError, or nil if none found.
func (m *TenantResourceDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantResourceDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return TenantResourceDeleteRequestMultiError(errors)
	}

	return nil
}

// TenantResourceDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by TenantResourceDeleteRequest.ValidateAll() if
// the designated constraints aren't met.
type TenantResourceDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantResourceDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantResourceDeleteRequestMultiError) AllErrors() []error { return m }

// TenantResourceDeleteRequestValidationError is the validation error returned
// by TenantResourceDeleteRequest.Validate if the designated constraints
// aren't met.
type TenantResourceDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantResourceDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantResourceDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantResourceDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantResourceDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantResourceDeleteRequestValidationError) ErrorName() string {
	return "TenantResourceDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantResourceDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantResourceDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantResourceDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantResourceDeleteRequestValidationError{}

// Validate checks the field values on TenantResourceDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantResourceDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantResourceDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantResourceDeleteResponseMultiError, or nil if none found.
func (m *TenantResourceDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantResourceDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TenantResourceDeleteResponseMultiError(errors)
	}

	return nil
}

// TenantResourceDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by TenantResourceDeleteResponse.ValidateAll() if
// the designated constraints aren't met.
type TenantResourceDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantResourceDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantResourceDeleteResponseMultiError) AllErrors() []error { return m }

// TenantResourceDeleteResponseValidationError is the validation error returned
// by TenantResourceDeleteResponse.Validate if the designated constraints
// aren't met.
type TenantResourceDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantResourceDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantResourceDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantResourceDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantResourceDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantResourceDeleteResponseValidationError) ErrorName() string {
	return "TenantResourceDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantResourceDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantResourceDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantResourceDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantResourceDeleteResponseValidationError{}

// Validate checks the field values on TenantResourceListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantResourceListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantResourceListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantResourceListRequestMultiError, or nil if none found.
func (m *TenantResourceListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantResourceListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TenantResourceListRequestMultiError(errors)
	}

	return nil
}

// TenantResourceListRequestMultiError is an error wrapping multiple validation
// errors returned by TenantResourceListRequest.ValidateAll() if the
// designated constraints aren't met.
type TenantResourceListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantResourceListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantResourceListRequestMultiError) AllErrors() []error { return m }

// TenantResourceListRequestValidationError is the validation error returned by
// TenantResourceListRequest.Validate if the designated constraints aren't met.
type TenantResourceListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantResourceListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantResourceListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantResourceListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantResourceListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantResourceListRequestValidationError) ErrorName() string {
	return "TenantResourceListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantResourceListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantResourceListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantResourceListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantResourceListRequestValidationError{}

// Validate checks the field values on TenantResourceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantResourceListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantResourceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantResourceListResponseMultiError, or nil if none found.
func (m *TenantResourceListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantResourceListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TenantResourceListResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TenantResourceListResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TenantResourceListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TenantResourceListResponseMultiError(errors)
	}

	return nil
}

// TenantResourceListResponseMultiError is an error wrapping multiple
// validation errors returned by TenantResourceListResponse.ValidateAll() if
// the designated constraints aren't met.
type TenantResourceListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantResourceListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantResourceListResponseMultiError) AllErrors() []error { return m }

// TenantResourceListResponseValidationError is the validation error returned
// by TenantResourceListResponse.Validate if the designated constraints aren't met.
type TenantResourceListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantResourceListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantResourceListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantResourceListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantResourceListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantResourceListResponseValidationError) ErrorName() string {
	return "TenantResourceListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantResourceListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantResourceListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantResourceListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantResourceListResponseValidationError{}

// Validate checks the field values on TenantResourceListByIdsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantResourceListByIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantResourceListByIdsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TenantResourceListByIdsRequestMultiError, or nil if none found.
func (m *TenantResourceListByIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantResourceListByIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIds()) < 1 {
		err := TenantResourceListByIdsRequestValidationError{
			field:  "Ids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TenantResourceListByIdsRequestMultiError(errors)
	}

	return nil
}

// TenantResourceListByIdsRequestMultiError is an error wrapping multiple
// validation errors returned by TenantResourceListByIdsRequest.ValidateAll()
// if the designated constraints aren't met.
type TenantResourceListByIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantResourceListByIdsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantResourceListByIdsRequestMultiError) AllErrors() []error { return m }

// TenantResourceListByIdsRequestValidationError is the validation error
// returned by TenantResourceListByIdsRequest.Validate if the designated
// constraints aren't met.
type TenantResourceListByIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantResourceListByIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantResourceListByIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantResourceListByIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantResourceListByIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantResourceListByIdsRequestValidationError) ErrorName() string {
	return "TenantResourceListByIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantResourceListByIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantResourceListByIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantResourceListByIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantResourceListByIdsRequestValidationError{}

// Validate checks the field values on TenantResourceListByIdsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantResourceListByIdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantResourceListByIdsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TenantResourceListByIdsResponseMultiError, or nil if none found.
func (m *TenantResourceListByIdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantResourceListByIdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TenantResourceListByIdsResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TenantResourceListByIdsResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TenantResourceListByIdsResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TenantResourceListByIdsResponseMultiError(errors)
	}

	return nil
}

// TenantResourceListByIdsResponseMultiError is an error wrapping multiple
// validation errors returned by TenantResourceListByIdsResponse.ValidateAll()
// if the designated constraints aren't met.
type TenantResourceListByIdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantResourceListByIdsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantResourceListByIdsResponseMultiError) AllErrors() []error { return m }

// TenantResourceListByIdsResponseValidationError is the validation error
// returned by TenantResourceListByIdsResponse.Validate if the designated
// constraints aren't met.
type TenantResourceListByIdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantResourceListByIdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantResourceListByIdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantResourceListByIdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantResourceListByIdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantResourceListByIdsResponseValidationError) ErrorName() string {
	return "TenantResourceListByIdsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantResourceListByIdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantResourceListByIdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantResourceListByIdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantResourceListByIdsResponseValidationError{}
