// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: api/rockim/service/platform/v1/plat_role.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlatRoleAPIClient is the client API for PlatRoleAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlatRoleAPIClient interface {
	// 创建角色
	Create(ctx context.Context, in *PlatRoleCreateRequest, opts ...grpc.CallOption) (*PlatRoleCreateResponse, error)
	// 修改角色
	Update(ctx context.Context, in *PlatRoleUpdateRequest, opts ...grpc.CallOption) (*PlatRoleUpdateResponse, error)
	// 删除角色
	Delete(ctx context.Context, in *PlatRoleDeleteRequest, opts ...grpc.CallOption) (*PlatRoleDeleteResponse, error)
	// 分页获取角色列表
	Paging(ctx context.Context, in *PlatRolePagingRequest, opts ...grpc.CallOption) (*PlatRolePagingResponse, error)
	// 获取角色角色ID列表
	ListResourceId(ctx context.Context, in *PlatRoleResourceIdListRequest, opts ...grpc.CallOption) (*PlatRoleResourceIdListResponse, error)
}

type platRoleAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPlatRoleAPIClient(cc grpc.ClientConnInterface) PlatRoleAPIClient {
	return &platRoleAPIClient{cc}
}

func (c *platRoleAPIClient) Create(ctx context.Context, in *PlatRoleCreateRequest, opts ...grpc.CallOption) (*PlatRoleCreateResponse, error) {
	out := new(PlatRoleCreateResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.platform.v1.PlatRoleAPI/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platRoleAPIClient) Update(ctx context.Context, in *PlatRoleUpdateRequest, opts ...grpc.CallOption) (*PlatRoleUpdateResponse, error) {
	out := new(PlatRoleUpdateResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.platform.v1.PlatRoleAPI/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platRoleAPIClient) Delete(ctx context.Context, in *PlatRoleDeleteRequest, opts ...grpc.CallOption) (*PlatRoleDeleteResponse, error) {
	out := new(PlatRoleDeleteResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.platform.v1.PlatRoleAPI/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platRoleAPIClient) Paging(ctx context.Context, in *PlatRolePagingRequest, opts ...grpc.CallOption) (*PlatRolePagingResponse, error) {
	out := new(PlatRolePagingResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.platform.v1.PlatRoleAPI/Paging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platRoleAPIClient) ListResourceId(ctx context.Context, in *PlatRoleResourceIdListRequest, opts ...grpc.CallOption) (*PlatRoleResourceIdListResponse, error) {
	out := new(PlatRoleResourceIdListResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.platform.v1.PlatRoleAPI/ListResourceId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlatRoleAPIServer is the server API for PlatRoleAPI service.
// All implementations must embed UnimplementedPlatRoleAPIServer
// for forward compatibility
type PlatRoleAPIServer interface {
	// 创建角色
	Create(context.Context, *PlatRoleCreateRequest) (*PlatRoleCreateResponse, error)
	// 修改角色
	Update(context.Context, *PlatRoleUpdateRequest) (*PlatRoleUpdateResponse, error)
	// 删除角色
	Delete(context.Context, *PlatRoleDeleteRequest) (*PlatRoleDeleteResponse, error)
	// 分页获取角色列表
	Paging(context.Context, *PlatRolePagingRequest) (*PlatRolePagingResponse, error)
	// 获取角色角色ID列表
	ListResourceId(context.Context, *PlatRoleResourceIdListRequest) (*PlatRoleResourceIdListResponse, error)
	mustEmbedUnimplementedPlatRoleAPIServer()
}

// UnimplementedPlatRoleAPIServer must be embedded to have forward compatible implementations.
type UnimplementedPlatRoleAPIServer struct {
}

func (UnimplementedPlatRoleAPIServer) Create(context.Context, *PlatRoleCreateRequest) (*PlatRoleCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPlatRoleAPIServer) Update(context.Context, *PlatRoleUpdateRequest) (*PlatRoleUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPlatRoleAPIServer) Delete(context.Context, *PlatRoleDeleteRequest) (*PlatRoleDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPlatRoleAPIServer) Paging(context.Context, *PlatRolePagingRequest) (*PlatRolePagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paging not implemented")
}
func (UnimplementedPlatRoleAPIServer) ListResourceId(context.Context, *PlatRoleResourceIdListRequest) (*PlatRoleResourceIdListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceId not implemented")
}
func (UnimplementedPlatRoleAPIServer) mustEmbedUnimplementedPlatRoleAPIServer() {}

// UnsafePlatRoleAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlatRoleAPIServer will
// result in compilation errors.
type UnsafePlatRoleAPIServer interface {
	mustEmbedUnimplementedPlatRoleAPIServer()
}

func RegisterPlatRoleAPIServer(s grpc.ServiceRegistrar, srv PlatRoleAPIServer) {
	s.RegisterService(&PlatRoleAPI_ServiceDesc, srv)
}

func _PlatRoleAPI_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlatRoleCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatRoleAPIServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.platform.v1.PlatRoleAPI/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatRoleAPIServer).Create(ctx, req.(*PlatRoleCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatRoleAPI_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlatRoleUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatRoleAPIServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.platform.v1.PlatRoleAPI/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatRoleAPIServer).Update(ctx, req.(*PlatRoleUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatRoleAPI_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlatRoleDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatRoleAPIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.platform.v1.PlatRoleAPI/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatRoleAPIServer).Delete(ctx, req.(*PlatRoleDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatRoleAPI_Paging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlatRolePagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatRoleAPIServer).Paging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.platform.v1.PlatRoleAPI/Paging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatRoleAPIServer).Paging(ctx, req.(*PlatRolePagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatRoleAPI_ListResourceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlatRoleResourceIdListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatRoleAPIServer).ListResourceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.platform.v1.PlatRoleAPI/ListResourceId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatRoleAPIServer).ListResourceId(ctx, req.(*PlatRoleResourceIdListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlatRoleAPI_ServiceDesc is the grpc.ServiceDesc for PlatRoleAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlatRoleAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rockim.service.platform.v1.PlatRoleAPI",
	HandlerType: (*PlatRoleAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PlatRoleAPI_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PlatRoleAPI_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PlatRoleAPI_Delete_Handler,
		},
		{
			MethodName: "Paging",
			Handler:    _PlatRoleAPI_Paging_Handler,
		},
		{
			MethodName: "ListResourceId",
			Handler:    _PlatRoleAPI_ListResourceId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/rockim/service/platform/v1/plat_role.proto",
}
