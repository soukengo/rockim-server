// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.20.0
// source: rockim/api/admin/manager/v1/sys_tenant_resource.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSysTenantResourceAPICreate = "/rockim.api.admin.manager.v1.SysTenantResourceAPI/Create"
const OperationSysTenantResourceAPIDelete = "/rockim.api.admin.manager.v1.SysTenantResourceAPI/Delete"
const OperationSysTenantResourceAPIListTree = "/rockim.api.admin.manager.v1.SysTenantResourceAPI/ListTree"
const OperationSysTenantResourceAPIUpdate = "/rockim.api.admin.manager.v1.SysTenantResourceAPI/Update"

type SysTenantResourceAPIHTTPServer interface {
	Create(context.Context, *TenantResourceCreateRequest) (*TenantResourceCreateResponse, error)
	Delete(context.Context, *TenantResourceDeleteRequest) (*TenantResourceDeleteResponse, error)
	ListTree(context.Context, *TenantResourceTreeRequest) (*TenantResourceTreeResponse, error)
	Update(context.Context, *TenantResourceUpdateRequest) (*TenantResourceUpdateResponse, error)
}

func RegisterSysTenantResourceAPIHTTPServer(s *http.Server, srv SysTenantResourceAPIHTTPServer) {
	r := s.Route("/")
	r.POST("/api/manager/v1/sys/tenant/resource/create", _SysTenantResourceAPI_Create2_HTTP_Handler(srv))
	r.POST("/api/manager/v1/sys/tenant/resource/update", _SysTenantResourceAPI_Update2_HTTP_Handler(srv))
	r.POST("/api/manager/v1/sys/tenant/resource/delete", _SysTenantResourceAPI_Delete2_HTTP_Handler(srv))
	r.POST("/api/manager/v1/sys/tenant/resource/tree", _SysTenantResourceAPI_ListTree1_HTTP_Handler(srv))
}

func _SysTenantResourceAPI_Create2_HTTP_Handler(srv SysTenantResourceAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TenantResourceCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysTenantResourceAPICreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*TenantResourceCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TenantResourceCreateResponse)
		return ctx.Result(200, reply)
	}
}

func _SysTenantResourceAPI_Update2_HTTP_Handler(srv SysTenantResourceAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TenantResourceUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysTenantResourceAPIUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*TenantResourceUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TenantResourceUpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _SysTenantResourceAPI_Delete2_HTTP_Handler(srv SysTenantResourceAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TenantResourceDeleteRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysTenantResourceAPIDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*TenantResourceDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TenantResourceDeleteResponse)
		return ctx.Result(200, reply)
	}
}

func _SysTenantResourceAPI_ListTree1_HTTP_Handler(srv SysTenantResourceAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TenantResourceTreeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysTenantResourceAPIListTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTree(ctx, req.(*TenantResourceTreeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TenantResourceTreeResponse)
		return ctx.Result(200, reply)
	}
}

type SysTenantResourceAPIHTTPClient interface {
	Create(ctx context.Context, req *TenantResourceCreateRequest, opts ...http.CallOption) (rsp *TenantResourceCreateResponse, err error)
	Delete(ctx context.Context, req *TenantResourceDeleteRequest, opts ...http.CallOption) (rsp *TenantResourceDeleteResponse, err error)
	ListTree(ctx context.Context, req *TenantResourceTreeRequest, opts ...http.CallOption) (rsp *TenantResourceTreeResponse, err error)
	Update(ctx context.Context, req *TenantResourceUpdateRequest, opts ...http.CallOption) (rsp *TenantResourceUpdateResponse, err error)
}

type SysTenantResourceAPIHTTPClientImpl struct {
	cc *http.Client
}

func NewSysTenantResourceAPIHTTPClient(client *http.Client) SysTenantResourceAPIHTTPClient {
	return &SysTenantResourceAPIHTTPClientImpl{client}
}

func (c *SysTenantResourceAPIHTTPClientImpl) Create(ctx context.Context, in *TenantResourceCreateRequest, opts ...http.CallOption) (*TenantResourceCreateResponse, error) {
	var out TenantResourceCreateResponse
	pattern := "/api/manager/v1/sys/tenant/resource/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysTenantResourceAPICreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysTenantResourceAPIHTTPClientImpl) Delete(ctx context.Context, in *TenantResourceDeleteRequest, opts ...http.CallOption) (*TenantResourceDeleteResponse, error) {
	var out TenantResourceDeleteResponse
	pattern := "/api/manager/v1/sys/tenant/resource/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysTenantResourceAPIDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysTenantResourceAPIHTTPClientImpl) ListTree(ctx context.Context, in *TenantResourceTreeRequest, opts ...http.CallOption) (*TenantResourceTreeResponse, error) {
	var out TenantResourceTreeResponse
	pattern := "/api/manager/v1/sys/tenant/resource/tree"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysTenantResourceAPIListTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysTenantResourceAPIHTTPClientImpl) Update(ctx context.Context, in *TenantResourceUpdateRequest, opts ...http.CallOption) (*TenantResourceUpdateResponse, error) {
	var out TenantResourceUpdateResponse
	pattern := "/api/manager/v1/sys/tenant/resource/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysTenantResourceAPIUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
