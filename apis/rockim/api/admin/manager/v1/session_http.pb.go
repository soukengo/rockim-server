// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.20.0
// source: rockim/api/admin/manager/v1/session.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSessionAPICheck = "/rockim.api.admin.manager.v1.SessionAPI/Check"
const OperationSessionAPIListResource = "/rockim.api.admin.manager.v1.SessionAPI/ListResource"

type SessionAPIHTTPServer interface {
	// Check 验证登录信息
	Check(context.Context, *SessionCheckRequest) (*SessionCheckResponse, error)
	ListResource(context.Context, *SessionListResourceRequest) (*SessionListResourceResponse, error)
}

func RegisterSessionAPIHTTPServer(s *http.Server, srv SessionAPIHTTPServer) {
	r := s.Route("/")
	r.POST("/admin/manager/v1/session/check", _SessionAPI_Check0_HTTP_Handler(srv))
	r.POST("/admin/manager/v1/session/resources", _SessionAPI_ListResource0_HTTP_Handler(srv))
}

func _SessionAPI_Check0_HTTP_Handler(srv SessionAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SessionCheckRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSessionAPICheck)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Check(ctx, req.(*SessionCheckRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SessionCheckResponse)
		return ctx.Result(200, reply)
	}
}

func _SessionAPI_ListResource0_HTTP_Handler(srv SessionAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SessionListResourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSessionAPIListResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListResource(ctx, req.(*SessionListResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SessionListResourceResponse)
		return ctx.Result(200, reply)
	}
}

type SessionAPIHTTPClient interface {
	Check(ctx context.Context, req *SessionCheckRequest, opts ...http.CallOption) (rsp *SessionCheckResponse, err error)
	ListResource(ctx context.Context, req *SessionListResourceRequest, opts ...http.CallOption) (rsp *SessionListResourceResponse, err error)
}

type SessionAPIHTTPClientImpl struct {
	cc *http.Client
}

func NewSessionAPIHTTPClient(client *http.Client) SessionAPIHTTPClient {
	return &SessionAPIHTTPClientImpl{client}
}

func (c *SessionAPIHTTPClientImpl) Check(ctx context.Context, in *SessionCheckRequest, opts ...http.CallOption) (*SessionCheckResponse, error) {
	var out SessionCheckResponse
	pattern := "/admin/manager/v1/session/check"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSessionAPICheck))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SessionAPIHTTPClientImpl) ListResource(ctx context.Context, in *SessionListResourceRequest, opts ...http.CallOption) (*SessionListResourceResponse, error) {
	var out SessionListResourceResponse
	pattern := "/admin/manager/v1/session/resources"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSessionAPIListResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
