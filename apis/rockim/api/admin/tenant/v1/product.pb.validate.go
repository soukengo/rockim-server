// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rockim/api/admin/tenant/v1/product.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ProductCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductCreateRequestMultiError, or nil if none found.
func (m *ProductCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ProductCreateRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProductCreateRequestMultiError(errors)
	}

	return nil
}

// ProductCreateRequestMultiError is an error wrapping multiple validation
// errors returned by ProductCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type ProductCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductCreateRequestMultiError) AllErrors() []error { return m }

// ProductCreateRequestValidationError is the validation error returned by
// ProductCreateRequest.Validate if the designated constraints aren't met.
type ProductCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductCreateRequestValidationError) ErrorName() string {
	return "ProductCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProductCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductCreateRequestValidationError{}

// Validate checks the field values on ProductCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductCreateResponseMultiError, or nil if none found.
func (m *ProductCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ProductCreateResponseMultiError(errors)
	}

	return nil
}

// ProductCreateResponseMultiError is an error wrapping multiple validation
// errors returned by ProductCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type ProductCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductCreateResponseMultiError) AllErrors() []error { return m }

// ProductCreateResponseValidationError is the validation error returned by
// ProductCreateResponse.Validate if the designated constraints aren't met.
type ProductCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductCreateResponseValidationError) ErrorName() string {
	return "ProductCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProductCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductCreateResponseValidationError{}

// Validate checks the field values on ProductUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductUpdateRequestMultiError, or nil if none found.
func (m *ProductUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := ProductUpdateRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if len(errors) > 0 {
		return ProductUpdateRequestMultiError(errors)
	}

	return nil
}

// ProductUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by ProductUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type ProductUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductUpdateRequestMultiError) AllErrors() []error { return m }

// ProductUpdateRequestValidationError is the validation error returned by
// ProductUpdateRequest.Validate if the designated constraints aren't met.
type ProductUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductUpdateRequestValidationError) ErrorName() string {
	return "ProductUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProductUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductUpdateRequestValidationError{}

// Validate checks the field values on ProductUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductUpdateResponseMultiError, or nil if none found.
func (m *ProductUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ProductUpdateResponseMultiError(errors)
	}

	return nil
}

// ProductUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by ProductUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type ProductUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductUpdateResponseMultiError) AllErrors() []error { return m }

// ProductUpdateResponseValidationError is the validation error returned by
// ProductUpdateResponse.Validate if the designated constraints aren't met.
type ProductUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductUpdateResponseValidationError) ErrorName() string {
	return "ProductUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProductUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductUpdateResponseValidationError{}

// Validate checks the field values on ProductPagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductPagingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductPagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductPagingRequestMultiError, or nil if none found.
func (m *ProductPagingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductPagingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ProductPagingRequestMultiError(errors)
	}

	return nil
}

// ProductPagingRequestMultiError is an error wrapping multiple validation
// errors returned by ProductPagingRequest.ValidateAll() if the designated
// constraints aren't met.
type ProductPagingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductPagingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductPagingRequestMultiError) AllErrors() []error { return m }

// ProductPagingRequestValidationError is the validation error returned by
// ProductPagingRequest.Validate if the designated constraints aren't met.
type ProductPagingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductPagingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductPagingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductPagingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductPagingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductPagingRequestValidationError) ErrorName() string {
	return "ProductPagingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProductPagingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductPagingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductPagingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductPagingRequestValidationError{}

// Validate checks the field values on ProductPagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductPagingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductPagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductPagingResponseMultiError, or nil if none found.
func (m *ProductPagingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductPagingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProductPagingResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProductPagingResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductPagingResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductPagingResponseValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductPagingResponseValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductPagingResponseValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProductPagingResponseMultiError(errors)
	}

	return nil
}

// ProductPagingResponseMultiError is an error wrapping multiple validation
// errors returned by ProductPagingResponse.ValidateAll() if the designated
// constraints aren't met.
type ProductPagingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductPagingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductPagingResponseMultiError) AllErrors() []error { return m }

// ProductPagingResponseValidationError is the validation error returned by
// ProductPagingResponse.Validate if the designated constraints aren't met.
type ProductPagingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductPagingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductPagingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductPagingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductPagingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductPagingResponseValidationError) ErrorName() string {
	return "ProductPagingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProductPagingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductPagingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductPagingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductPagingResponseValidationError{}
