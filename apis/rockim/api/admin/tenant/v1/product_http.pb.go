// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.20.0
// source: rockim/api/admin/tenant/v1/product.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationProductAPICreate = "/rockim.api.admin.tenant.v1.ProductAPI/Create"
const OperationProductAPIPaging = "/rockim.api.admin.tenant.v1.ProductAPI/Paging"
const OperationProductAPIUpdate = "/rockim.api.admin.tenant.v1.ProductAPI/Update"

type ProductAPIHTTPServer interface {
	Create(context.Context, *ProductCreateRequest) (*ProductCreateResponse, error)
	Paging(context.Context, *ProductPagingRequest) (*ProductPagingResponse, error)
	Update(context.Context, *ProductUpdateRequest) (*ProductUpdateResponse, error)
}

func RegisterProductAPIHTTPServer(s *http.Server, srv ProductAPIHTTPServer) {
	r := s.Route("/")
	r.POST("/admin/tenant/v1/product/create", _ProductAPI_Create0_HTTP_Handler(srv))
	r.POST("/admin/tenant/v1/product/update", _ProductAPI_Update0_HTTP_Handler(srv))
	r.POST("/admin/tenant/v1/product/paging", _ProductAPI_Paging0_HTTP_Handler(srv))
}

func _ProductAPI_Create0_HTTP_Handler(srv ProductAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProductCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductAPICreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*ProductCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProductCreateResponse)
		return ctx.Result(200, reply)
	}
}

func _ProductAPI_Update0_HTTP_Handler(srv ProductAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProductUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductAPIUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*ProductUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProductUpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _ProductAPI_Paging0_HTTP_Handler(srv ProductAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProductPagingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductAPIPaging)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Paging(ctx, req.(*ProductPagingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProductPagingResponse)
		return ctx.Result(200, reply)
	}
}

type ProductAPIHTTPClient interface {
	Create(ctx context.Context, req *ProductCreateRequest, opts ...http.CallOption) (rsp *ProductCreateResponse, err error)
	Paging(ctx context.Context, req *ProductPagingRequest, opts ...http.CallOption) (rsp *ProductPagingResponse, err error)
	Update(ctx context.Context, req *ProductUpdateRequest, opts ...http.CallOption) (rsp *ProductUpdateResponse, err error)
}

type ProductAPIHTTPClientImpl struct {
	cc *http.Client
}

func NewProductAPIHTTPClient(client *http.Client) ProductAPIHTTPClient {
	return &ProductAPIHTTPClientImpl{client}
}

func (c *ProductAPIHTTPClientImpl) Create(ctx context.Context, in *ProductCreateRequest, opts ...http.CallOption) (*ProductCreateResponse, error) {
	var out ProductCreateResponse
	pattern := "/admin/tenant/v1/product/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductAPICreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductAPIHTTPClientImpl) Paging(ctx context.Context, in *ProductPagingRequest, opts ...http.CallOption) (*ProductPagingResponse, error) {
	var out ProductPagingResponse
	pattern := "/admin/tenant/v1/product/paging"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductAPIPaging))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductAPIHTTPClientImpl) Update(ctx context.Context, in *ProductUpdateRequest, opts ...http.CallOption) (*ProductUpdateResponse, error) {
	var out ProductUpdateResponse
	pattern := "/admin/tenant/v1/product/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductAPIUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
