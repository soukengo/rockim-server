// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.20.0
// source: rockim/api/client/v1/http/chatroom_member.proto

package http

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationChatRoomMemberAPIJoin = "/rockim.api.client.v1.http.ChatRoomMemberAPI/Join"
const OperationChatRoomMemberAPIQuit = "/rockim.api.client.v1.http.ChatRoomMemberAPI/Quit"

type ChatRoomMemberAPIHTTPServer interface {
	// Join Join 加入聊天室
	Join(context.Context, *ChatRoomJoinRequest) (*ChatRoomJoinResponse, error)
	// Quit Quit 退出聊天室
	Quit(context.Context, *ChatRoomQuitRequest) (*ChatRoomQuitResponse, error)
}

func RegisterChatRoomMemberAPIHTTPServer(s *http.Server, srv ChatRoomMemberAPIHTTPServer) {
	r := s.Route("/")
	r.POST("/client/v1/chatroom/member/join", _ChatRoomMemberAPI_Join0_HTTP_Handler(srv))
	r.POST("/client/v1/chatroom/member/quit", _ChatRoomMemberAPI_Quit0_HTTP_Handler(srv))
}

func _ChatRoomMemberAPI_Join0_HTTP_Handler(srv ChatRoomMemberAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChatRoomJoinRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChatRoomMemberAPIJoin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Join(ctx, req.(*ChatRoomJoinRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ChatRoomJoinResponse)
		return ctx.Result(200, reply)
	}
}

func _ChatRoomMemberAPI_Quit0_HTTP_Handler(srv ChatRoomMemberAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChatRoomQuitRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChatRoomMemberAPIQuit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Quit(ctx, req.(*ChatRoomQuitRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ChatRoomQuitResponse)
		return ctx.Result(200, reply)
	}
}

type ChatRoomMemberAPIHTTPClient interface {
	Join(ctx context.Context, req *ChatRoomJoinRequest, opts ...http.CallOption) (rsp *ChatRoomJoinResponse, err error)
	Quit(ctx context.Context, req *ChatRoomQuitRequest, opts ...http.CallOption) (rsp *ChatRoomQuitResponse, err error)
}

type ChatRoomMemberAPIHTTPClientImpl struct {
	cc *http.Client
}

func NewChatRoomMemberAPIHTTPClient(client *http.Client) ChatRoomMemberAPIHTTPClient {
	return &ChatRoomMemberAPIHTTPClientImpl{client}
}

func (c *ChatRoomMemberAPIHTTPClientImpl) Join(ctx context.Context, in *ChatRoomJoinRequest, opts ...http.CallOption) (*ChatRoomJoinResponse, error) {
	var out ChatRoomJoinResponse
	pattern := "/client/v1/chatroom/member/join"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationChatRoomMemberAPIJoin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChatRoomMemberAPIHTTPClientImpl) Quit(ctx context.Context, in *ChatRoomQuitRequest, opts ...http.CallOption) (*ChatRoomQuitResponse, error) {
	var out ChatRoomQuitResponse
	pattern := "/client/v1/chatroom/member/quit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationChatRoomMemberAPIQuit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
