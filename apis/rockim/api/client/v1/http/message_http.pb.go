// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.20.0
// source: rockim/api/client/v1/http/message.proto

package http

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMessageAPISend = "/rockim.api.client.v1.http.MessageAPI/Send"

type MessageAPIHTTPServer interface {
	// Send Send 发送消息
	Send(context.Context, *MessageSendRequest) (*MessageSendResponse, error)
}

func RegisterMessageAPIHTTPServer(s *http.Server, srv MessageAPIHTTPServer) {
	r := s.Route("/")
	r.POST("/client/v1/message/send", _MessageAPI_Send0_HTTP_Handler(srv))
}

func _MessageAPI_Send0_HTTP_Handler(srv MessageAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MessageSendRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMessageAPISend)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Send(ctx, req.(*MessageSendRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MessageSendResponse)
		return ctx.Result(200, reply)
	}
}

type MessageAPIHTTPClient interface {
	Send(ctx context.Context, req *MessageSendRequest, opts ...http.CallOption) (rsp *MessageSendResponse, err error)
}

type MessageAPIHTTPClientImpl struct {
	cc *http.Client
}

func NewMessageAPIHTTPClient(client *http.Client) MessageAPIHTTPClient {
	return &MessageAPIHTTPClientImpl{client}
}

func (c *MessageAPIHTTPClientImpl) Send(ctx context.Context, in *MessageSendRequest, opts ...http.CallOption) (*MessageSendResponse, error) {
	var out MessageSendResponse
	pattern := "/client/v1/message/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMessageAPISend))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
