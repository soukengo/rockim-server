// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rockim/api/client/v1/protocol/socket/protocol.proto

package socket

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	enums "rockimserver/apis/rockim/shared/enums"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = enums.Comet_PushOperation(0)
)

// Validate checks the field values on RequestPacketHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestPacketHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestPacketHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestPacketHeaderMultiError, or nil if none found.
func (m *RequestPacketHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestPacketHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Operation

	// no validation rules for RequestId

	if len(errors) > 0 {
		return RequestPacketHeaderMultiError(errors)
	}

	return nil
}

// RequestPacketHeaderMultiError is an error wrapping multiple validation
// errors returned by RequestPacketHeader.ValidateAll() if the designated
// constraints aren't met.
type RequestPacketHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestPacketHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestPacketHeaderMultiError) AllErrors() []error { return m }

// RequestPacketHeaderValidationError is the validation error returned by
// RequestPacketHeader.Validate if the designated constraints aren't met.
type RequestPacketHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestPacketHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestPacketHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestPacketHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestPacketHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestPacketHeaderValidationError) ErrorName() string {
	return "RequestPacketHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e RequestPacketHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestPacketHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestPacketHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestPacketHeaderValidationError{}

// Validate checks the field values on RequestPacketBody with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RequestPacketBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestPacketBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestPacketBodyMultiError, or nil if none found.
func (m *RequestPacketBody) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestPacketBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Body

	if len(errors) > 0 {
		return RequestPacketBodyMultiError(errors)
	}

	return nil
}

// RequestPacketBodyMultiError is an error wrapping multiple validation errors
// returned by RequestPacketBody.ValidateAll() if the designated constraints
// aren't met.
type RequestPacketBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestPacketBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestPacketBodyMultiError) AllErrors() []error { return m }

// RequestPacketBodyValidationError is the validation error returned by
// RequestPacketBody.Validate if the designated constraints aren't met.
type RequestPacketBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestPacketBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestPacketBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestPacketBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestPacketBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestPacketBodyValidationError) ErrorName() string {
	return "RequestPacketBodyValidationError"
}

// Error satisfies the builtin error interface
func (e RequestPacketBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestPacketBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestPacketBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestPacketBodyValidationError{}

// Validate checks the field values on ResponsePacketHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResponsePacketHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponsePacketHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResponsePacketHeaderMultiError, or nil if none found.
func (m *ResponsePacketHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponsePacketHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Operation

	// no validation rules for RequestId

	// no validation rules for Success

	// no validation rules for TraceId

	if len(errors) > 0 {
		return ResponsePacketHeaderMultiError(errors)
	}

	return nil
}

// ResponsePacketHeaderMultiError is an error wrapping multiple validation
// errors returned by ResponsePacketHeader.ValidateAll() if the designated
// constraints aren't met.
type ResponsePacketHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponsePacketHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponsePacketHeaderMultiError) AllErrors() []error { return m }

// ResponsePacketHeaderValidationError is the validation error returned by
// ResponsePacketHeader.Validate if the designated constraints aren't met.
type ResponsePacketHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponsePacketHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponsePacketHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponsePacketHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponsePacketHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponsePacketHeaderValidationError) ErrorName() string {
	return "ResponsePacketHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e ResponsePacketHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponsePacketHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponsePacketHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponsePacketHeaderValidationError{}

// Validate checks the field values on ResponsePacketBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResponsePacketBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponsePacketBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResponsePacketBodyMultiError, or nil if none found.
func (m *ResponsePacketBody) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponsePacketBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Body

	if len(errors) > 0 {
		return ResponsePacketBodyMultiError(errors)
	}

	return nil
}

// ResponsePacketBodyMultiError is an error wrapping multiple validation errors
// returned by ResponsePacketBody.ValidateAll() if the designated constraints
// aren't met.
type ResponsePacketBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponsePacketBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponsePacketBodyMultiError) AllErrors() []error { return m }

// ResponsePacketBodyValidationError is the validation error returned by
// ResponsePacketBody.Validate if the designated constraints aren't met.
type ResponsePacketBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponsePacketBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponsePacketBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponsePacketBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponsePacketBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponsePacketBodyValidationError) ErrorName() string {
	return "ResponsePacketBodyValidationError"
}

// Error satisfies the builtin error interface
func (e ResponsePacketBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponsePacketBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponsePacketBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponsePacketBodyValidationError{}

// Validate checks the field values on PushPacketHeader with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PushPacketHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushPacketHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushPacketHeaderMultiError, or nil if none found.
func (m *PushPacketHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *PushPacketHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Operation

	if len(errors) > 0 {
		return PushPacketHeaderMultiError(errors)
	}

	return nil
}

// PushPacketHeaderMultiError is an error wrapping multiple validation errors
// returned by PushPacketHeader.ValidateAll() if the designated constraints
// aren't met.
type PushPacketHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushPacketHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushPacketHeaderMultiError) AllErrors() []error { return m }

// PushPacketHeaderValidationError is the validation error returned by
// PushPacketHeader.Validate if the designated constraints aren't met.
type PushPacketHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushPacketHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushPacketHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushPacketHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushPacketHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushPacketHeaderValidationError) ErrorName() string { return "PushPacketHeaderValidationError" }

// Error satisfies the builtin error interface
func (e PushPacketHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushPacketHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushPacketHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushPacketHeaderValidationError{}

// Validate checks the field values on PushPacketBody with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushPacketBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushPacketBody with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PushPacketBodyMultiError,
// or nil if none found.
func (m *PushPacketBody) ValidateAll() error {
	return m.validate(true)
}

func (m *PushPacketBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Body

	if len(errors) > 0 {
		return PushPacketBodyMultiError(errors)
	}

	return nil
}

// PushPacketBodyMultiError is an error wrapping multiple validation errors
// returned by PushPacketBody.ValidateAll() if the designated constraints
// aren't met.
type PushPacketBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushPacketBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushPacketBodyMultiError) AllErrors() []error { return m }

// PushPacketBodyValidationError is the validation error returned by
// PushPacketBody.Validate if the designated constraints aren't met.
type PushPacketBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushPacketBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushPacketBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushPacketBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushPacketBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushPacketBodyValidationError) ErrorName() string { return "PushPacketBodyValidationError" }

// Error satisfies the builtin error interface
func (e PushPacketBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushPacketBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushPacketBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushPacketBodyValidationError{}
