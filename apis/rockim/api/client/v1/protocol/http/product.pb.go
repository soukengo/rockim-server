// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.0
// source: rockim/api/client/v1/protocol/http/product.proto

package http

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ConfigFetchRequest 获取全局配置请求
type ConfigFetchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 基本参数
	Base *APIRequest `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *ConfigFetchRequest) Reset() {
	*x = ConfigFetchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rockim_api_client_v1_protocol_http_product_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigFetchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigFetchRequest) ProtoMessage() {}

func (x *ConfigFetchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rockim_api_client_v1_protocol_http_product_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigFetchRequest.ProtoReflect.Descriptor instead.
func (*ConfigFetchRequest) Descriptor() ([]byte, []int) {
	return file_rockim_api_client_v1_protocol_http_product_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigFetchRequest) GetBase() *APIRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

// Socket 长连接配置
type Socket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tcp *Socket_TCP       `protobuf:"bytes,1,opt,name=tcp,proto3" json:"tcp,omitempty"`
	Ws  *Socket_Websocket `protobuf:"bytes,2,opt,name=ws,proto3" json:"ws,omitempty"`
}

func (x *Socket) Reset() {
	*x = Socket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rockim_api_client_v1_protocol_http_product_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Socket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Socket) ProtoMessage() {}

func (x *Socket) ProtoReflect() protoreflect.Message {
	mi := &file_rockim_api_client_v1_protocol_http_product_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Socket.ProtoReflect.Descriptor instead.
func (*Socket) Descriptor() ([]byte, []int) {
	return file_rockim_api_client_v1_protocol_http_product_proto_rawDescGZIP(), []int{1}
}

func (x *Socket) GetTcp() *Socket_TCP {
	if x != nil {
		return x.Tcp
	}
	return nil
}

func (x *Socket) GetWs() *Socket_Websocket {
	if x != nil {
		return x.Ws
	}
	return nil
}

// ConfigFetchResponse 获取全局配置响应
type ConfigFetchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Socket *Socket `protobuf:"bytes,1,opt,name=socket,proto3" json:"socket,omitempty"`
}

func (x *ConfigFetchResponse) Reset() {
	*x = ConfigFetchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rockim_api_client_v1_protocol_http_product_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigFetchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigFetchResponse) ProtoMessage() {}

func (x *ConfigFetchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rockim_api_client_v1_protocol_http_product_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigFetchResponse.ProtoReflect.Descriptor instead.
func (*ConfigFetchResponse) Descriptor() ([]byte, []int) {
	return file_rockim_api_client_v1_protocol_http_product_proto_rawDescGZIP(), []int{2}
}

func (x *ConfigFetchResponse) GetSocket() *Socket {
	if x != nil {
		return x.Socket
	}
	return nil
}

// TCP tcp 配置
type Socket_TCP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tcp host
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Socket_TCP) Reset() {
	*x = Socket_TCP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rockim_api_client_v1_protocol_http_product_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Socket_TCP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Socket_TCP) ProtoMessage() {}

func (x *Socket_TCP) ProtoReflect() protoreflect.Message {
	mi := &file_rockim_api_client_v1_protocol_http_product_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Socket_TCP.ProtoReflect.Descriptor instead.
func (*Socket_TCP) Descriptor() ([]byte, []int) {
	return file_rockim_api_client_v1_protocol_http_product_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Socket_TCP) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Websocket websocket 配置
type Socket_Websocket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// websocket host
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Socket_Websocket) Reset() {
	*x = Socket_Websocket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rockim_api_client_v1_protocol_http_product_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Socket_Websocket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Socket_Websocket) ProtoMessage() {}

func (x *Socket_Websocket) ProtoReflect() protoreflect.Message {
	mi := &file_rockim_api_client_v1_protocol_http_product_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Socket_Websocket.ProtoReflect.Descriptor instead.
func (*Socket_Websocket) Descriptor() ([]byte, []int) {
	return file_rockim_api_client_v1_protocol_http_product_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Socket_Websocket) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

var File_rockim_api_client_v1_protocol_http_product_proto protoreflect.FileDescriptor

var file_rockim_api_client_v1_protocol_http_product_proto_rawDesc = []byte{
	0x0a, 0x30, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x68, 0x74, 0x74, 0x70, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x22, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x72,
	0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x68, 0x74, 0x74,
	0x70, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x62, 0x0a, 0x12,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4c, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x22, 0xd8, 0x01, 0x0a, 0x06, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x03, 0x74,
	0x63, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x6f, 0x63, 0x6b, 0x69,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x53, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x54, 0x43, 0x50, 0x52, 0x03, 0x74, 0x63, 0x70, 0x12, 0x44, 0x0a,
	0x02, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x6f, 0x63, 0x6b,
	0x69, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x53,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x02, 0x77, 0x73, 0x1a, 0x1f, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x1a, 0x25, 0x0a, 0x09, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x59, 0x0a, 0x13, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x32, 0xb9, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x41, 0x50, 0x49, 0x12, 0xaa, 0x01, 0x0a, 0x0b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x2e, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x3a,
	0x01, 0x2a, 0x42, 0x60, 0x5a, 0x39, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3b, 0x68, 0x74, 0x74, 0x70, 0xaa,
	0x02, 0x22, 0x52, 0x6f, 0x63, 0x6b, 0x49, 0x4d, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x48, 0x74, 0x74, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rockim_api_client_v1_protocol_http_product_proto_rawDescOnce sync.Once
	file_rockim_api_client_v1_protocol_http_product_proto_rawDescData = file_rockim_api_client_v1_protocol_http_product_proto_rawDesc
)

func file_rockim_api_client_v1_protocol_http_product_proto_rawDescGZIP() []byte {
	file_rockim_api_client_v1_protocol_http_product_proto_rawDescOnce.Do(func() {
		file_rockim_api_client_v1_protocol_http_product_proto_rawDescData = protoimpl.X.CompressGZIP(file_rockim_api_client_v1_protocol_http_product_proto_rawDescData)
	})
	return file_rockim_api_client_v1_protocol_http_product_proto_rawDescData
}

var file_rockim_api_client_v1_protocol_http_product_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_rockim_api_client_v1_protocol_http_product_proto_goTypes = []interface{}{
	(*ConfigFetchRequest)(nil),  // 0: rockim.api.client.v1.protocol.http.ConfigFetchRequest
	(*Socket)(nil),              // 1: rockim.api.client.v1.protocol.http.Socket
	(*ConfigFetchResponse)(nil), // 2: rockim.api.client.v1.protocol.http.ConfigFetchResponse
	(*Socket_TCP)(nil),          // 3: rockim.api.client.v1.protocol.http.Socket.TCP
	(*Socket_Websocket)(nil),    // 4: rockim.api.client.v1.protocol.http.Socket.Websocket
	(*APIRequest)(nil),          // 5: rockim.api.client.v1.protocol.http.APIRequest
}
var file_rockim_api_client_v1_protocol_http_product_proto_depIdxs = []int32{
	5, // 0: rockim.api.client.v1.protocol.http.ConfigFetchRequest.base:type_name -> rockim.api.client.v1.protocol.http.APIRequest
	3, // 1: rockim.api.client.v1.protocol.http.Socket.tcp:type_name -> rockim.api.client.v1.protocol.http.Socket.TCP
	4, // 2: rockim.api.client.v1.protocol.http.Socket.ws:type_name -> rockim.api.client.v1.protocol.http.Socket.Websocket
	1, // 3: rockim.api.client.v1.protocol.http.ConfigFetchResponse.socket:type_name -> rockim.api.client.v1.protocol.http.Socket
	0, // 4: rockim.api.client.v1.protocol.http.ProductAPI.FetchConfig:input_type -> rockim.api.client.v1.protocol.http.ConfigFetchRequest
	2, // 5: rockim.api.client.v1.protocol.http.ProductAPI.FetchConfig:output_type -> rockim.api.client.v1.protocol.http.ConfigFetchResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_rockim_api_client_v1_protocol_http_product_proto_init() }
func file_rockim_api_client_v1_protocol_http_product_proto_init() {
	if File_rockim_api_client_v1_protocol_http_product_proto != nil {
		return
	}
	file_rockim_api_client_v1_protocol_http_http_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_rockim_api_client_v1_protocol_http_product_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigFetchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rockim_api_client_v1_protocol_http_product_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Socket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rockim_api_client_v1_protocol_http_product_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigFetchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rockim_api_client_v1_protocol_http_product_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Socket_TCP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rockim_api_client_v1_protocol_http_product_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Socket_Websocket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rockim_api_client_v1_protocol_http_product_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rockim_api_client_v1_protocol_http_product_proto_goTypes,
		DependencyIndexes: file_rockim_api_client_v1_protocol_http_product_proto_depIdxs,
		MessageInfos:      file_rockim_api_client_v1_protocol_http_product_proto_msgTypes,
	}.Build()
	File_rockim_api_client_v1_protocol_http_product_proto = out.File
	file_rockim_api_client_v1_protocol_http_product_proto_rawDesc = nil
	file_rockim_api_client_v1_protocol_http_product_proto_goTypes = nil
	file_rockim_api_client_v1_protocol_http_product_proto_depIdxs = nil
}
func (x *ConfigFetchRequest) SetBase(base *APIRequest) {
	if x == nil {
		return
	}
	x.Base = base
}

func (x *Socket) SetTcp(tcp *Socket_TCP) {
	if x == nil {
		return
	}
	x.Tcp = tcp
}

func (x *Socket) SetWs(ws *Socket_Websocket) {
	if x == nil {
		return
	}
	x.Ws = ws
}

func (x *ConfigFetchResponse) SetSocket(socket *Socket) {
	if x == nil {
		return
	}
	x.Socket = socket
}
