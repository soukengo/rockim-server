// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rockim/api/client/v1/types/message.proto

package types

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	enums "rockimserver/apis/rockim/shared/enums"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = enums.Message_MessageType(0)
)

// Validate checks the field values on TargetID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TargetID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TargetID with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TargetIDMultiError, or nil
// if none found.
func (m *TargetID) ValidateAll() error {
	return m.validate(true)
}

func (m *TargetID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := enums.Conversation_Category_name[int32(m.GetCategory())]; !ok {
		err := TargetIDValidationError{
			field:  "Category",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetValue()) < 1 {
		err := TargetIDValidationError{
			field:  "Value",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TargetIDMultiError(errors)
	}

	return nil
}

// TargetIDMultiError is an error wrapping multiple validation errors returned
// by TargetID.ValidateAll() if the designated constraints aren't met.
type TargetIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TargetIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TargetIDMultiError) AllErrors() []error { return m }

// TargetIDValidationError is the validation error returned by
// TargetID.Validate if the designated constraints aren't met.
type TargetIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TargetIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TargetIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TargetIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TargetIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TargetIDValidationError) ErrorName() string { return "TargetIDValidationError" }

// Error satisfies the builtin error interface
func (e TargetIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTargetID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TargetIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TargetIDValidationError{}

// Validate checks the field values on IMMessage with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IMMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IMMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IMMessageMultiError, or nil
// if none found.
func (m *IMMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *IMMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	// no validation rules for MsgId

	if all {
		switch v := interface{}(m.GetTarget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IMMessageValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IMMessageValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTarget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IMMessageValidationError{
				field:  "Target",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IMMessageValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IMMessageValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IMMessageValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Sequence

	// no validation rules for Status

	// no validation rules for Version

	if len(errors) > 0 {
		return IMMessageMultiError(errors)
	}

	return nil
}

// IMMessageMultiError is an error wrapping multiple validation errors returned
// by IMMessage.ValidateAll() if the designated constraints aren't met.
type IMMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IMMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IMMessageMultiError) AllErrors() []error { return m }

// IMMessageValidationError is the validation error returned by
// IMMessage.Validate if the designated constraints aren't met.
type IMMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IMMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IMMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IMMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IMMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IMMessageValidationError) ErrorName() string { return "IMMessageValidationError" }

// Error satisfies the builtin error interface
func (e IMMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIMMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IMMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IMMessageValidationError{}

// Validate checks the field values on IMMessageBody with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IMMessageBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IMMessageBody with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IMMessageBodyMultiError, or
// nil if none found.
func (m *IMMessageBody) ValidateAll() error {
	return m.validate(true)
}

func (m *IMMessageBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	if all {
		switch v := interface{}(m.GetSender()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IMMessageBodyValidationError{
					field:  "Sender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IMMessageBodyValidationError{
					field:  "Sender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSender()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IMMessageBodyValidationError{
				field:  "Sender",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClientMsgId

	// no validation rules for MessageType

	// no validation rules for Content

	// no validation rules for Payload

	// no validation rules for NeedReceipt

	if len(errors) > 0 {
		return IMMessageBodyMultiError(errors)
	}

	return nil
}

// IMMessageBodyMultiError is an error wrapping multiple validation errors
// returned by IMMessageBody.ValidateAll() if the designated constraints
// aren't met.
type IMMessageBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IMMessageBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IMMessageBodyMultiError) AllErrors() []error { return m }

// IMMessageBodyValidationError is the validation error returned by
// IMMessageBody.Validate if the designated constraints aren't met.
type IMMessageBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IMMessageBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IMMessageBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IMMessageBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IMMessageBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IMMessageBodyValidationError) ErrorName() string { return "IMMessageBodyValidationError" }

// Error satisfies the builtin error interface
func (e IMMessageBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIMMessageBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IMMessageBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IMMessageBodyValidationError{}

// Validate checks the field values on IMMessageSender with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IMMessageSender) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IMMessageSender with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IMMessageSenderMultiError, or nil if none found.
func (m *IMMessageSender) ValidateAll() error {
	return m.validate(true)
}

func (m *IMMessageSender) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Account

	// no validation rules for Name

	// no validation rules for AvatarUrl

	if len(errors) > 0 {
		return IMMessageSenderMultiError(errors)
	}

	return nil
}

// IMMessageSenderMultiError is an error wrapping multiple validation errors
// returned by IMMessageSender.ValidateAll() if the designated constraints
// aren't met.
type IMMessageSenderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IMMessageSenderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IMMessageSenderMultiError) AllErrors() []error { return m }

// IMMessageSenderValidationError is the validation error returned by
// IMMessageSender.Validate if the designated constraints aren't met.
type IMMessageSenderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IMMessageSenderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IMMessageSenderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IMMessageSenderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IMMessageSenderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IMMessageSenderValidationError) ErrorName() string { return "IMMessageSenderValidationError" }

// Error satisfies the builtin error interface
func (e IMMessageSenderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIMMessageSender.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IMMessageSenderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IMMessageSenderValidationError{}

// Validate checks the field values on IMMessagePacket with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IMMessagePacket) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IMMessagePacket with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IMMessagePacketMultiError, or nil if none found.
func (m *IMMessagePacket) ValidateAll() error {
	return m.validate(true)
}

func (m *IMMessagePacket) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IMMessagePacketValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IMMessagePacketValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IMMessagePacketValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IMMessagePacketMultiError(errors)
	}

	return nil
}

// IMMessagePacketMultiError is an error wrapping multiple validation errors
// returned by IMMessagePacket.ValidateAll() if the designated constraints
// aren't met.
type IMMessagePacketMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IMMessagePacketMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IMMessagePacketMultiError) AllErrors() []error { return m }

// IMMessagePacketValidationError is the validation error returned by
// IMMessagePacket.Validate if the designated constraints aren't met.
type IMMessagePacketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IMMessagePacketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IMMessagePacketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IMMessagePacketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IMMessagePacketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IMMessagePacketValidationError) ErrorName() string { return "IMMessagePacketValidationError" }

// Error satisfies the builtin error interface
func (e IMMessagePacketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIMMessagePacket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IMMessagePacketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IMMessagePacketValidationError{}
