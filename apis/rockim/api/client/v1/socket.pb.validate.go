// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rockim/api/client/v1/socket.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SocketAuthRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SocketAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SocketAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SocketAuthRequestMultiError, or nil if none found.
func (m *SocketAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SocketAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SocketAuthRequestMultiError(errors)
	}

	return nil
}

// SocketAuthRequestMultiError is an error wrapping multiple validation errors
// returned by SocketAuthRequest.ValidateAll() if the designated constraints
// aren't met.
type SocketAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SocketAuthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SocketAuthRequestMultiError) AllErrors() []error { return m }

// SocketAuthRequestValidationError is the validation error returned by
// SocketAuthRequest.Validate if the designated constraints aren't met.
type SocketAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SocketAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SocketAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SocketAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SocketAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SocketAuthRequestValidationError) ErrorName() string {
	return "SocketAuthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SocketAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSocketAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SocketAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SocketAuthRequestValidationError{}

// Validate checks the field values on SocketAuthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SocketAuthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SocketAuthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SocketAuthResponseMultiError, or nil if none found.
func (m *SocketAuthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SocketAuthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SocketAuthResponseMultiError(errors)
	}

	return nil
}

// SocketAuthResponseMultiError is an error wrapping multiple validation errors
// returned by SocketAuthResponse.ValidateAll() if the designated constraints
// aren't met.
type SocketAuthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SocketAuthResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SocketAuthResponseMultiError) AllErrors() []error { return m }

// SocketAuthResponseValidationError is the validation error returned by
// SocketAuthResponse.Validate if the designated constraints aren't met.
type SocketAuthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SocketAuthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SocketAuthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SocketAuthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SocketAuthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SocketAuthResponseValidationError) ErrorName() string {
	return "SocketAuthResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SocketAuthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSocketAuthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SocketAuthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SocketAuthResponseValidationError{}

// Validate checks the field values on SocketHeartbeatRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SocketHeartbeatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SocketHeartbeatRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SocketHeartbeatRequestMultiError, or nil if none found.
func (m *SocketHeartbeatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SocketHeartbeatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SocketHeartbeatRequestMultiError(errors)
	}

	return nil
}

// SocketHeartbeatRequestMultiError is an error wrapping multiple validation
// errors returned by SocketHeartbeatRequest.ValidateAll() if the designated
// constraints aren't met.
type SocketHeartbeatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SocketHeartbeatRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SocketHeartbeatRequestMultiError) AllErrors() []error { return m }

// SocketHeartbeatRequestValidationError is the validation error returned by
// SocketHeartbeatRequest.Validate if the designated constraints aren't met.
type SocketHeartbeatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SocketHeartbeatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SocketHeartbeatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SocketHeartbeatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SocketHeartbeatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SocketHeartbeatRequestValidationError) ErrorName() string {
	return "SocketHeartbeatRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SocketHeartbeatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSocketHeartbeatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SocketHeartbeatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SocketHeartbeatRequestValidationError{}

// Validate checks the field values on SocketHeartbeatResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SocketHeartbeatResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SocketHeartbeatResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SocketHeartbeatResponseMultiError, or nil if none found.
func (m *SocketHeartbeatResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SocketHeartbeatResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SocketHeartbeatResponseMultiError(errors)
	}

	return nil
}

// SocketHeartbeatResponseMultiError is an error wrapping multiple validation
// errors returned by SocketHeartbeatResponse.ValidateAll() if the designated
// constraints aren't met.
type SocketHeartbeatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SocketHeartbeatResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SocketHeartbeatResponseMultiError) AllErrors() []error { return m }

// SocketHeartbeatResponseValidationError is the validation error returned by
// SocketHeartbeatResponse.Validate if the designated constraints aren't met.
type SocketHeartbeatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SocketHeartbeatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SocketHeartbeatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SocketHeartbeatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SocketHeartbeatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SocketHeartbeatResponseValidationError) ErrorName() string {
	return "SocketHeartbeatResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SocketHeartbeatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSocketHeartbeatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SocketHeartbeatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SocketHeartbeatResponseValidationError{}
