// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.20.0
// source: rockim/api/openapi/v1/user.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserAPIRegister = "/rockim.api.openapi.v1.UserAPI/RegisterGrpc"

type UserAPIHTTPServer interface {
	// Register Register 注册用户
	Register(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error)
}

func RegisterUserAPIHTTPServer(s *http.Server, srv UserAPIHTTPServer) {
	r := s.Route("/")
	r.POST("/openapi/v1/user/register", _UserAPI_Register0_HTTP_Handler(srv))
}

func _UserAPI_Register0_HTTP_Handler(srv UserAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserRegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAPIRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*UserRegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserRegisterResponse)
		return ctx.Result(200, reply)
	}
}

type UserAPIHTTPClient interface {
	Register(ctx context.Context, req *UserRegisterRequest, opts ...http.CallOption) (rsp *UserRegisterResponse, err error)
}

type UserAPIHTTPClientImpl struct {
	cc *http.Client
}

func NewUserAPIHTTPClient(client *http.Client) UserAPIHTTPClient {
	return &UserAPIHTTPClientImpl{client}
}

func (c *UserAPIHTTPClientImpl) Register(ctx context.Context, in *UserRegisterRequest, opts ...http.CallOption) (*UserRegisterResponse, error) {
	var out UserRegisterResponse
	pattern := "/openapi/v1/user/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserAPIRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
