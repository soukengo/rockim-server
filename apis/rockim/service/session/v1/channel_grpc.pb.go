// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: rockim/service/session/v1/channel.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChannelAPIClient is the client API for ChannelAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelAPIClient interface {
	// Add 添加连接
	Add(ctx context.Context, in *ChannelAddRequest, opts ...grpc.CallOption) (*ChannelAddResponse, error)
	// Delete 移除连接
	Delete(ctx context.Context, in *ChannelDeleteRequest, opts ...grpc.CallOption) (*ChannelDeleteResponse, error)
	// Refresh 刷新连接
	Refresh(ctx context.Context, in *ChannelRefreshRequest, opts ...grpc.CallOption) (*ChannelRefreshResponse, error)
}

type channelAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelAPIClient(cc grpc.ClientConnInterface) ChannelAPIClient {
	return &channelAPIClient{cc}
}

func (c *channelAPIClient) Add(ctx context.Context, in *ChannelAddRequest, opts ...grpc.CallOption) (*ChannelAddResponse, error) {
	out := new(ChannelAddResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.session.v1.ChannelAPI/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelAPIClient) Delete(ctx context.Context, in *ChannelDeleteRequest, opts ...grpc.CallOption) (*ChannelDeleteResponse, error) {
	out := new(ChannelDeleteResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.session.v1.ChannelAPI/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelAPIClient) Refresh(ctx context.Context, in *ChannelRefreshRequest, opts ...grpc.CallOption) (*ChannelRefreshResponse, error) {
	out := new(ChannelRefreshResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.session.v1.ChannelAPI/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelAPIServer is the server API for ChannelAPI service.
// All implementations must embed UnimplementedChannelAPIServer
// for forward compatibility
type ChannelAPIServer interface {
	// Add 添加连接
	Add(context.Context, *ChannelAddRequest) (*ChannelAddResponse, error)
	// Delete 移除连接
	Delete(context.Context, *ChannelDeleteRequest) (*ChannelDeleteResponse, error)
	// Refresh 刷新连接
	Refresh(context.Context, *ChannelRefreshRequest) (*ChannelRefreshResponse, error)
	mustEmbedUnimplementedChannelAPIServer()
}

// UnimplementedChannelAPIServer must be embedded to have forward compatible implementations.
type UnimplementedChannelAPIServer struct {
}

func (UnimplementedChannelAPIServer) Add(context.Context, *ChannelAddRequest) (*ChannelAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedChannelAPIServer) Delete(context.Context, *ChannelDeleteRequest) (*ChannelDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedChannelAPIServer) Refresh(context.Context, *ChannelRefreshRequest) (*ChannelRefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedChannelAPIServer) mustEmbedUnimplementedChannelAPIServer() {}

// UnsafeChannelAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelAPIServer will
// result in compilation errors.
type UnsafeChannelAPIServer interface {
	mustEmbedUnimplementedChannelAPIServer()
}

func RegisterChannelAPIServer(s grpc.ServiceRegistrar, srv ChannelAPIServer) {
	s.RegisterService(&ChannelAPI_ServiceDesc, srv)
}

func _ChannelAPI_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelAPIServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.session.v1.ChannelAPI/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelAPIServer).Add(ctx, req.(*ChannelAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelAPI_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelAPIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.session.v1.ChannelAPI/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelAPIServer).Delete(ctx, req.(*ChannelDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelAPI_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelRefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelAPIServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.session.v1.ChannelAPI/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelAPIServer).Refresh(ctx, req.(*ChannelRefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChannelAPI_ServiceDesc is the grpc.ServiceDesc for ChannelAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChannelAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rockim.service.session.v1.ChannelAPI",
	HandlerType: (*ChannelAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _ChannelAPI_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ChannelAPI_Delete_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _ChannelAPI_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rockim/service/session/v1/channel.proto",
}
