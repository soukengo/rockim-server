// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rockim/service/session/v1/channel.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ChannelAddRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChannelAddRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelAddRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChannelAddRequestMultiError, or nil if none found.
func (m *ChannelAddRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelAddRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBase() == nil {
		err := ChannelAddRequestValidationError{
			field:  "Base",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChannelAddRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChannelAddRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChannelAddRequestValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetServerId()) < 1 {
		err := ChannelAddRequestValidationError{
			field:  "ServerId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetChannelId()) < 1 {
		err := ChannelAddRequestValidationError{
			field:  "ChannelId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUid()) < 1 {
		err := ChannelAddRequestValidationError{
			field:  "Uid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChannelAddRequestMultiError(errors)
	}

	return nil
}

// ChannelAddRequestMultiError is an error wrapping multiple validation errors
// returned by ChannelAddRequest.ValidateAll() if the designated constraints
// aren't met.
type ChannelAddRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelAddRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelAddRequestMultiError) AllErrors() []error { return m }

// ChannelAddRequestValidationError is the validation error returned by
// ChannelAddRequest.Validate if the designated constraints aren't met.
type ChannelAddRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelAddRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelAddRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelAddRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelAddRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelAddRequestValidationError) ErrorName() string {
	return "ChannelAddRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelAddRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelAddRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelAddRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelAddRequestValidationError{}

// Validate checks the field values on ChannelAddResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChannelAddResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelAddResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChannelAddResponseMultiError, or nil if none found.
func (m *ChannelAddResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelAddResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChannelAddResponseMultiError(errors)
	}

	return nil
}

// ChannelAddResponseMultiError is an error wrapping multiple validation errors
// returned by ChannelAddResponse.ValidateAll() if the designated constraints
// aren't met.
type ChannelAddResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelAddResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelAddResponseMultiError) AllErrors() []error { return m }

// ChannelAddResponseValidationError is the validation error returned by
// ChannelAddResponse.Validate if the designated constraints aren't met.
type ChannelAddResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelAddResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelAddResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelAddResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelAddResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelAddResponseValidationError) ErrorName() string {
	return "ChannelAddResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelAddResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelAddResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelAddResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelAddResponseValidationError{}

// Validate checks the field values on ChannelDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChannelDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChannelDeleteRequestMultiError, or nil if none found.
func (m *ChannelDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBase() == nil {
		err := ChannelDeleteRequestValidationError{
			field:  "Base",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChannelDeleteRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChannelDeleteRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChannelDeleteRequestValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetServerId()) < 1 {
		err := ChannelDeleteRequestValidationError{
			field:  "ServerId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetChannelId()) < 1 {
		err := ChannelDeleteRequestValidationError{
			field:  "ChannelId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUid()) < 1 {
		err := ChannelDeleteRequestValidationError{
			field:  "Uid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChannelDeleteRequestMultiError(errors)
	}

	return nil
}

// ChannelDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by ChannelDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type ChannelDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelDeleteRequestMultiError) AllErrors() []error { return m }

// ChannelDeleteRequestValidationError is the validation error returned by
// ChannelDeleteRequest.Validate if the designated constraints aren't met.
type ChannelDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelDeleteRequestValidationError) ErrorName() string {
	return "ChannelDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelDeleteRequestValidationError{}

// Validate checks the field values on ChannelDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChannelDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChannelDeleteResponseMultiError, or nil if none found.
func (m *ChannelDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChannelDeleteResponseMultiError(errors)
	}

	return nil
}

// ChannelDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by ChannelDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type ChannelDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelDeleteResponseMultiError) AllErrors() []error { return m }

// ChannelDeleteResponseValidationError is the validation error returned by
// ChannelDeleteResponse.Validate if the designated constraints aren't met.
type ChannelDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelDeleteResponseValidationError) ErrorName() string {
	return "ChannelDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelDeleteResponseValidationError{}

// Validate checks the field values on ChannelRefreshRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChannelRefreshRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelRefreshRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChannelRefreshRequestMultiError, or nil if none found.
func (m *ChannelRefreshRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelRefreshRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBase() == nil {
		err := ChannelRefreshRequestValidationError{
			field:  "Base",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChannelRefreshRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChannelRefreshRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChannelRefreshRequestValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetServerId()) < 1 {
		err := ChannelRefreshRequestValidationError{
			field:  "ServerId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetChannelId()) < 1 {
		err := ChannelRefreshRequestValidationError{
			field:  "ChannelId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUid()) < 1 {
		err := ChannelRefreshRequestValidationError{
			field:  "Uid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChannelRefreshRequestMultiError(errors)
	}

	return nil
}

// ChannelRefreshRequestMultiError is an error wrapping multiple validation
// errors returned by ChannelRefreshRequest.ValidateAll() if the designated
// constraints aren't met.
type ChannelRefreshRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelRefreshRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelRefreshRequestMultiError) AllErrors() []error { return m }

// ChannelRefreshRequestValidationError is the validation error returned by
// ChannelRefreshRequest.Validate if the designated constraints aren't met.
type ChannelRefreshRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelRefreshRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelRefreshRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelRefreshRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelRefreshRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelRefreshRequestValidationError) ErrorName() string {
	return "ChannelRefreshRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelRefreshRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelRefreshRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelRefreshRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelRefreshRequestValidationError{}

// Validate checks the field values on ChannelRefreshResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChannelRefreshResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelRefreshResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChannelRefreshResponseMultiError, or nil if none found.
func (m *ChannelRefreshResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelRefreshResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChannelRefreshResponseMultiError(errors)
	}

	return nil
}

// ChannelRefreshResponseMultiError is an error wrapping multiple validation
// errors returned by ChannelRefreshResponse.ValidateAll() if the designated
// constraints aren't met.
type ChannelRefreshResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelRefreshResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelRefreshResponseMultiError) AllErrors() []error { return m }

// ChannelRefreshResponseValidationError is the validation error returned by
// ChannelRefreshResponse.Validate if the designated constraints aren't met.
type ChannelRefreshResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelRefreshResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelRefreshResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelRefreshResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelRefreshResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelRefreshResponseValidationError) ErrorName() string {
	return "ChannelRefreshResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelRefreshResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelRefreshResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelRefreshResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelRefreshResponseValidationError{}

// Validate checks the field values on ChannelRoomListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChannelRoomListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelRoomListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChannelRoomListRequestMultiError, or nil if none found.
func (m *ChannelRoomListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelRoomListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBase() == nil {
		err := ChannelRoomListRequestValidationError{
			field:  "Base",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChannelRoomListRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChannelRoomListRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChannelRoomListRequestValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetUid()) < 1 {
		err := ChannelRoomListRequestValidationError{
			field:  "Uid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChannelRoomListRequestMultiError(errors)
	}

	return nil
}

// ChannelRoomListRequestMultiError is an error wrapping multiple validation
// errors returned by ChannelRoomListRequest.ValidateAll() if the designated
// constraints aren't met.
type ChannelRoomListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelRoomListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelRoomListRequestMultiError) AllErrors() []error { return m }

// ChannelRoomListRequestValidationError is the validation error returned by
// ChannelRoomListRequest.Validate if the designated constraints aren't met.
type ChannelRoomListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelRoomListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelRoomListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelRoomListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelRoomListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelRoomListRequestValidationError) ErrorName() string {
	return "ChannelRoomListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelRoomListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelRoomListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelRoomListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelRoomListRequestValidationError{}
