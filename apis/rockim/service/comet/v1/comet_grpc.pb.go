// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: rockim/service/comet/v1/comet.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChannelAPIClient is the client API for ChannelAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelAPIClient interface {
	// Dispatch 分发数据
	Dispatch(ctx context.Context, in *DispatchRequest, opts ...grpc.CallOption) (*DispatchResponse, error)
	// DispatchRoom 分发房间数据
	DispatchRoom(ctx context.Context, in *DispatchRoomRequest, opts ...grpc.CallOption) (*DispatchRoomResponse, error)
}

type channelAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelAPIClient(cc grpc.ClientConnInterface) ChannelAPIClient {
	return &channelAPIClient{cc}
}

func (c *channelAPIClient) Dispatch(ctx context.Context, in *DispatchRequest, opts ...grpc.CallOption) (*DispatchResponse, error) {
	out := new(DispatchResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.comet.v1.ChannelAPI/Dispatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelAPIClient) DispatchRoom(ctx context.Context, in *DispatchRoomRequest, opts ...grpc.CallOption) (*DispatchRoomResponse, error) {
	out := new(DispatchRoomResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.comet.v1.ChannelAPI/DispatchRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelAPIServer is the server API for ChannelAPI service.
// All implementations must embed UnimplementedChannelAPIServer
// for forward compatibility
type ChannelAPIServer interface {
	// Dispatch 分发数据
	Dispatch(context.Context, *DispatchRequest) (*DispatchResponse, error)
	// DispatchRoom 分发房间数据
	DispatchRoom(context.Context, *DispatchRoomRequest) (*DispatchRoomResponse, error)
	mustEmbedUnimplementedChannelAPIServer()
}

// UnimplementedChannelAPIServer must be embedded to have forward compatible implementations.
type UnimplementedChannelAPIServer struct {
}

func (UnimplementedChannelAPIServer) Dispatch(context.Context, *DispatchRequest) (*DispatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dispatch not implemented")
}
func (UnimplementedChannelAPIServer) DispatchRoom(context.Context, *DispatchRoomRequest) (*DispatchRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DispatchRoom not implemented")
}
func (UnimplementedChannelAPIServer) mustEmbedUnimplementedChannelAPIServer() {}

// UnsafeChannelAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelAPIServer will
// result in compilation errors.
type UnsafeChannelAPIServer interface {
	mustEmbedUnimplementedChannelAPIServer()
}

func RegisterChannelAPIServer(s grpc.ServiceRegistrar, srv ChannelAPIServer) {
	s.RegisterService(&ChannelAPI_ServiceDesc, srv)
}

func _ChannelAPI_Dispatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DispatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelAPIServer).Dispatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.comet.v1.ChannelAPI/Dispatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelAPIServer).Dispatch(ctx, req.(*DispatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelAPI_DispatchRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DispatchRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelAPIServer).DispatchRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.comet.v1.ChannelAPI/DispatchRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelAPIServer).DispatchRoom(ctx, req.(*DispatchRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChannelAPI_ServiceDesc is the grpc.ServiceDesc for ChannelAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChannelAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rockim.service.comet.v1.ChannelAPI",
	HandlerType: (*ChannelAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dispatch",
			Handler:    _ChannelAPI_Dispatch_Handler,
		},
		{
			MethodName: "DispatchRoom",
			Handler:    _ChannelAPI_DispatchRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rockim/service/comet/v1/comet.proto",
}
