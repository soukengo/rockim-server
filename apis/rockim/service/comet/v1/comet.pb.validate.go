// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rockim/service/comet/v1/comet.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DispatchRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DispatchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DispatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DispatchRequestMultiError, or nil if none found.
func (m *DispatchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DispatchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBase() == nil {
		err := DispatchRequestValidationError{
			field:  "Base",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DispatchRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DispatchRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DispatchRequestValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetChannelIds()) < 1 {
		err := DispatchRequestValidationError{
			field:  "ChannelIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPush()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DispatchRequestValidationError{
					field:  "Dispatch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DispatchRequestValidationError{
					field:  "Dispatch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPush()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DispatchRequestValidationError{
				field:  "Dispatch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetControl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DispatchRequestValidationError{
					field:  "Control",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DispatchRequestValidationError{
					field:  "Control",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetControl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DispatchRequestValidationError{
				field:  "Control",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DispatchRequestMultiError(errors)
	}

	return nil
}

// DispatchRequestMultiError is an error wrapping multiple validation errors
// returned by DispatchRequest.ValidateAll() if the designated constraints
// aren't met.
type DispatchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DispatchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DispatchRequestMultiError) AllErrors() []error { return m }

// DispatchRequestValidationError is the validation error returned by
// DispatchRequest.Validate if the designated constraints aren't met.
type DispatchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DispatchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DispatchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DispatchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DispatchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DispatchRequestValidationError) ErrorName() string { return "DispatchRequestValidationError" }

// Error satisfies the builtin error interface
func (e DispatchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDispatchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DispatchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DispatchRequestValidationError{}

// Validate checks the field values on DispatchResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DispatchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DispatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DispatchResponseMultiError, or nil if none found.
func (m *DispatchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DispatchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DispatchResponseMultiError(errors)
	}

	return nil
}

// DispatchResponseMultiError is an error wrapping multiple validation errors
// returned by DispatchResponse.ValidateAll() if the designated constraints
// aren't met.
type DispatchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DispatchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DispatchResponseMultiError) AllErrors() []error { return m }

// DispatchResponseValidationError is the validation error returned by
// DispatchResponse.Validate if the designated constraints aren't met.
type DispatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DispatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DispatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DispatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DispatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DispatchResponseValidationError) ErrorName() string { return "DispatchResponseValidationError" }

// Error satisfies the builtin error interface
func (e DispatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDispatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DispatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DispatchResponseValidationError{}

// Validate checks the field values on DispatchRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DispatchRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DispatchRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DispatchRoomRequestMultiError, or nil if none found.
func (m *DispatchRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DispatchRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBase() == nil {
		err := DispatchRoomRequestValidationError{
			field:  "Base",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DispatchRoomRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DispatchRoomRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DispatchRoomRequestValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetRoom() == nil {
		err := DispatchRoomRequestValidationError{
			field:  "Room",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DispatchRoomRequestValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DispatchRoomRequestValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DispatchRoomRequestValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPush() == nil {
		err := DispatchRoomRequestValidationError{
			field:  "Dispatch",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPush()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DispatchRoomRequestValidationError{
					field:  "Dispatch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DispatchRoomRequestValidationError{
					field:  "Dispatch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPush()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DispatchRoomRequestValidationError{
				field:  "Dispatch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DispatchRoomRequestMultiError(errors)
	}

	return nil
}

// DispatchRoomRequestMultiError is an error wrapping multiple validation
// errors returned by DispatchRoomRequest.ValidateAll() if the designated
// constraints aren't met.
type DispatchRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DispatchRoomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DispatchRoomRequestMultiError) AllErrors() []error { return m }

// DispatchRoomRequestValidationError is the validation error returned by
// DispatchRoomRequest.Validate if the designated constraints aren't met.
type DispatchRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DispatchRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DispatchRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DispatchRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DispatchRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DispatchRoomRequestValidationError) ErrorName() string {
	return "DispatchRoomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DispatchRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDispatchRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DispatchRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DispatchRoomRequestValidationError{}

// Validate checks the field values on DispatchRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DispatchRoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DispatchRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DispatchRoomResponseMultiError, or nil if none found.
func (m *DispatchRoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DispatchRoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DispatchRoomResponseMultiError(errors)
	}

	return nil
}

// DispatchRoomResponseMultiError is an error wrapping multiple validation
// errors returned by DispatchRoomResponse.ValidateAll() if the designated
// constraints aren't met.
type DispatchRoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DispatchRoomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DispatchRoomResponseMultiError) AllErrors() []error { return m }

// DispatchRoomResponseValidationError is the validation error returned by
// DispatchRoomResponse.Validate if the designated constraints aren't met.
type DispatchRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DispatchRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DispatchRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DispatchRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DispatchRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DispatchRoomResponseValidationError) ErrorName() string {
	return "DispatchRoomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DispatchRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDispatchRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DispatchRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DispatchRoomResponseValidationError{}
