// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: rockim/service/group/v1/group_member.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GroupMemberAPIClient is the client API for GroupMemberAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupMemberAPIClient interface {
	// IsMember 判断是否为聊天室成员
	IsMember(ctx context.Context, in *GroupMemberCheckRequest, opts ...grpc.CallOption) (*GroupMemberCheckResponse, error)
	// Find 获取成员信息
	Find(ctx context.Context, in *GroupMemberFindRequest, opts ...grpc.CallOption) (*GroupMemberFindResponse, error)
	// List 批量获取成员信息
	List(ctx context.Context, in *GroupMemberListRequest, opts ...grpc.CallOption) (*GroupMemberListResponse, error)
	// PaginateUid 获取成员ID列表
	PaginateUid(ctx context.Context, in *GroupMemberIdPaginateRequest, opts ...grpc.CallOption) (*GroupMemberIdPaginateResponse, error)
	// 根据成员获取群组id列表
	ListGroupIdByUid(ctx context.Context, in *GroupIdListByUidRequest, opts ...grpc.CallOption) (*GroupIdListByUidResponse, error)
}

type groupMemberAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupMemberAPIClient(cc grpc.ClientConnInterface) GroupMemberAPIClient {
	return &groupMemberAPIClient{cc}
}

func (c *groupMemberAPIClient) IsMember(ctx context.Context, in *GroupMemberCheckRequest, opts ...grpc.CallOption) (*GroupMemberCheckResponse, error) {
	out := new(GroupMemberCheckResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.group.v1.GroupMemberAPI/IsMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupMemberAPIClient) Find(ctx context.Context, in *GroupMemberFindRequest, opts ...grpc.CallOption) (*GroupMemberFindResponse, error) {
	out := new(GroupMemberFindResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.group.v1.GroupMemberAPI/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupMemberAPIClient) List(ctx context.Context, in *GroupMemberListRequest, opts ...grpc.CallOption) (*GroupMemberListResponse, error) {
	out := new(GroupMemberListResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.group.v1.GroupMemberAPI/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupMemberAPIClient) PaginateUid(ctx context.Context, in *GroupMemberIdPaginateRequest, opts ...grpc.CallOption) (*GroupMemberIdPaginateResponse, error) {
	out := new(GroupMemberIdPaginateResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.group.v1.GroupMemberAPI/PaginateUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupMemberAPIClient) ListGroupIdByUid(ctx context.Context, in *GroupIdListByUidRequest, opts ...grpc.CallOption) (*GroupIdListByUidResponse, error) {
	out := new(GroupIdListByUidResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.group.v1.GroupMemberAPI/ListGroupIdByUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupMemberAPIServer is the server API for GroupMemberAPI service.
// All implementations must embed UnimplementedGroupMemberAPIServer
// for forward compatibility
type GroupMemberAPIServer interface {
	// IsMember 判断是否为聊天室成员
	IsMember(context.Context, *GroupMemberCheckRequest) (*GroupMemberCheckResponse, error)
	// Find 获取成员信息
	Find(context.Context, *GroupMemberFindRequest) (*GroupMemberFindResponse, error)
	// List 批量获取成员信息
	List(context.Context, *GroupMemberListRequest) (*GroupMemberListResponse, error)
	// PaginateUid 获取成员ID列表
	PaginateUid(context.Context, *GroupMemberIdPaginateRequest) (*GroupMemberIdPaginateResponse, error)
	// 根据成员获取群组id列表
	ListGroupIdByUid(context.Context, *GroupIdListByUidRequest) (*GroupIdListByUidResponse, error)
	mustEmbedUnimplementedGroupMemberAPIServer()
}

// UnimplementedGroupMemberAPIServer must be embedded to have forward compatible implementations.
type UnimplementedGroupMemberAPIServer struct {
}

func (UnimplementedGroupMemberAPIServer) IsMember(context.Context, *GroupMemberCheckRequest) (*GroupMemberCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMember not implemented")
}
func (UnimplementedGroupMemberAPIServer) Find(context.Context, *GroupMemberFindRequest) (*GroupMemberFindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedGroupMemberAPIServer) List(context.Context, *GroupMemberListRequest) (*GroupMemberListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGroupMemberAPIServer) PaginateUid(context.Context, *GroupMemberIdPaginateRequest) (*GroupMemberIdPaginateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaginateUid not implemented")
}
func (UnimplementedGroupMemberAPIServer) ListGroupIdByUid(context.Context, *GroupIdListByUidRequest) (*GroupIdListByUidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupIdByUid not implemented")
}
func (UnimplementedGroupMemberAPIServer) mustEmbedUnimplementedGroupMemberAPIServer() {}

// UnsafeGroupMemberAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupMemberAPIServer will
// result in compilation errors.
type UnsafeGroupMemberAPIServer interface {
	mustEmbedUnimplementedGroupMemberAPIServer()
}

func RegisterGroupMemberAPIServer(s grpc.ServiceRegistrar, srv GroupMemberAPIServer) {
	s.RegisterService(&GroupMemberAPI_ServiceDesc, srv)
}

func _GroupMemberAPI_IsMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMemberCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupMemberAPIServer).IsMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.group.v1.GroupMemberAPI/IsMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupMemberAPIServer).IsMember(ctx, req.(*GroupMemberCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupMemberAPI_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMemberFindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupMemberAPIServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.group.v1.GroupMemberAPI/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupMemberAPIServer).Find(ctx, req.(*GroupMemberFindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupMemberAPI_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMemberListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupMemberAPIServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.group.v1.GroupMemberAPI/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupMemberAPIServer).List(ctx, req.(*GroupMemberListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupMemberAPI_PaginateUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMemberIdPaginateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupMemberAPIServer).PaginateUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.group.v1.GroupMemberAPI/PaginateUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupMemberAPIServer).PaginateUid(ctx, req.(*GroupMemberIdPaginateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupMemberAPI_ListGroupIdByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupIdListByUidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupMemberAPIServer).ListGroupIdByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.group.v1.GroupMemberAPI/ListGroupIdByUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupMemberAPIServer).ListGroupIdByUid(ctx, req.(*GroupIdListByUidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupMemberAPI_ServiceDesc is the grpc.ServiceDesc for GroupMemberAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupMemberAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rockim.service.group.v1.GroupMemberAPI",
	HandlerType: (*GroupMemberAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsMember",
			Handler:    _GroupMemberAPI_IsMember_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _GroupMemberAPI_Find_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GroupMemberAPI_List_Handler,
		},
		{
			MethodName: "PaginateUid",
			Handler:    _GroupMemberAPI_PaginateUid_Handler,
		},
		{
			MethodName: "ListGroupIdByUid",
			Handler:    _GroupMemberAPI_ListGroupIdByUid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rockim/service/group/v1/group_member.proto",
}
