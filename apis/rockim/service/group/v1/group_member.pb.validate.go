// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rockim/service/group/v1/group_member.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	enums "rockimserver/apis/rockim/shared/enums"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = enums.Group_Category(0)
)

// Validate checks the field values on GroupMemberCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupMemberCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupMemberCheckRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupMemberCheckRequestMultiError, or nil if none found.
func (m *GroupMemberCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupMemberCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBase() == nil {
		err := GroupMemberCheckRequestValidationError{
			field:  "Base",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GroupMemberCheckRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GroupMemberCheckRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupMemberCheckRequestValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := enums.Group_Category_name[int32(m.GetCategory())]; !ok {
		err := GroupMemberCheckRequestValidationError{
			field:  "Category",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGroupId()) < 1 {
		err := GroupMemberCheckRequestValidationError{
			field:  "GroupId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUid()); l < 1 || l > 64 {
		err := GroupMemberCheckRequestValidationError{
			field:  "Uid",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GroupMemberCheckRequestMultiError(errors)
	}

	return nil
}

// GroupMemberCheckRequestMultiError is an error wrapping multiple validation
// errors returned by GroupMemberCheckRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupMemberCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupMemberCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupMemberCheckRequestMultiError) AllErrors() []error { return m }

// GroupMemberCheckRequestValidationError is the validation error returned by
// GroupMemberCheckRequest.Validate if the designated constraints aren't met.
type GroupMemberCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupMemberCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupMemberCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupMemberCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupMemberCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupMemberCheckRequestValidationError) ErrorName() string {
	return "GroupMemberCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupMemberCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupMemberCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupMemberCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupMemberCheckRequestValidationError{}

// Validate checks the field values on GroupMemberCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupMemberCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupMemberCheckResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupMemberCheckResponseMultiError, or nil if none found.
func (m *GroupMemberCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupMemberCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsMember

	if len(errors) > 0 {
		return GroupMemberCheckResponseMultiError(errors)
	}

	return nil
}

// GroupMemberCheckResponseMultiError is an error wrapping multiple validation
// errors returned by GroupMemberCheckResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupMemberCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupMemberCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupMemberCheckResponseMultiError) AllErrors() []error { return m }

// GroupMemberCheckResponseValidationError is the validation error returned by
// GroupMemberCheckResponse.Validate if the designated constraints aren't met.
type GroupMemberCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupMemberCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupMemberCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupMemberCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupMemberCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupMemberCheckResponseValidationError) ErrorName() string {
	return "GroupMemberCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupMemberCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupMemberCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupMemberCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupMemberCheckResponseValidationError{}

// Validate checks the field values on GroupMemberFindRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupMemberFindRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupMemberFindRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupMemberFindRequestMultiError, or nil if none found.
func (m *GroupMemberFindRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupMemberFindRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBase() == nil {
		err := GroupMemberFindRequestValidationError{
			field:  "Base",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GroupMemberFindRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GroupMemberFindRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupMemberFindRequestValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := enums.Group_Category_name[int32(m.GetCategory())]; !ok {
		err := GroupMemberFindRequestValidationError{
			field:  "Category",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGroupId()) < 1 {
		err := GroupMemberFindRequestValidationError{
			field:  "GroupId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUid()); l < 1 || l > 64 {
		err := GroupMemberFindRequestValidationError{
			field:  "Uid",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GroupMemberFindRequestMultiError(errors)
	}

	return nil
}

// GroupMemberFindRequestMultiError is an error wrapping multiple validation
// errors returned by GroupMemberFindRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupMemberFindRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupMemberFindRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupMemberFindRequestMultiError) AllErrors() []error { return m }

// GroupMemberFindRequestValidationError is the validation error returned by
// GroupMemberFindRequest.Validate if the designated constraints aren't met.
type GroupMemberFindRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupMemberFindRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupMemberFindRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupMemberFindRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupMemberFindRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupMemberFindRequestValidationError) ErrorName() string {
	return "GroupMemberFindRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupMemberFindRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupMemberFindRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupMemberFindRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupMemberFindRequestValidationError{}

// Validate checks the field values on GroupMemberFindResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupMemberFindResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupMemberFindResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupMemberFindResponseMultiError, or nil if none found.
func (m *GroupMemberFindResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupMemberFindResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GroupMemberFindResponseValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GroupMemberFindResponseValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupMemberFindResponseValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GroupMemberFindResponseMultiError(errors)
	}

	return nil
}

// GroupMemberFindResponseMultiError is an error wrapping multiple validation
// errors returned by GroupMemberFindResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupMemberFindResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupMemberFindResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupMemberFindResponseMultiError) AllErrors() []error { return m }

// GroupMemberFindResponseValidationError is the validation error returned by
// GroupMemberFindResponse.Validate if the designated constraints aren't met.
type GroupMemberFindResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupMemberFindResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupMemberFindResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupMemberFindResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupMemberFindResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupMemberFindResponseValidationError) ErrorName() string {
	return "GroupMemberFindResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupMemberFindResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupMemberFindResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupMemberFindResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupMemberFindResponseValidationError{}

// Validate checks the field values on GroupMemberListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupMemberListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupMemberListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupMemberListRequestMultiError, or nil if none found.
func (m *GroupMemberListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupMemberListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBase() == nil {
		err := GroupMemberListRequestValidationError{
			field:  "Base",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GroupMemberListRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GroupMemberListRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupMemberListRequestValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := enums.Group_Category_name[int32(m.GetCategory())]; !ok {
		err := GroupMemberListRequestValidationError{
			field:  "Category",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGroupId()) < 1 {
		err := GroupMemberListRequestValidationError{
			field:  "GroupId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GroupMemberListRequestMultiError(errors)
	}

	return nil
}

// GroupMemberListRequestMultiError is an error wrapping multiple validation
// errors returned by GroupMemberListRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupMemberListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupMemberListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupMemberListRequestMultiError) AllErrors() []error { return m }

// GroupMemberListRequestValidationError is the validation error returned by
// GroupMemberListRequest.Validate if the designated constraints aren't met.
type GroupMemberListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupMemberListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupMemberListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupMemberListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupMemberListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupMemberListRequestValidationError) ErrorName() string {
	return "GroupMemberListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupMemberListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupMemberListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupMemberListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupMemberListRequestValidationError{}

// Validate checks the field values on GroupMemberListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupMemberListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupMemberListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupMemberListResponseMultiError, or nil if none found.
func (m *GroupMemberListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupMemberListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GroupMemberListResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GroupMemberListResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GroupMemberListResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GroupMemberListResponseMultiError(errors)
	}

	return nil
}

// GroupMemberListResponseMultiError is an error wrapping multiple validation
// errors returned by GroupMemberListResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupMemberListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupMemberListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupMemberListResponseMultiError) AllErrors() []error { return m }

// GroupMemberListResponseValidationError is the validation error returned by
// GroupMemberListResponse.Validate if the designated constraints aren't met.
type GroupMemberListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupMemberListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupMemberListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupMemberListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupMemberListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupMemberListResponseValidationError) ErrorName() string {
	return "GroupMemberListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupMemberListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupMemberListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupMemberListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupMemberListResponseValidationError{}

// Validate checks the field values on GroupMemberIdPaginateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupMemberIdPaginateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupMemberIdPaginateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupMemberIdPaginateRequestMultiError, or nil if none found.
func (m *GroupMemberIdPaginateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupMemberIdPaginateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBase() == nil {
		err := GroupMemberIdPaginateRequestValidationError{
			field:  "Base",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GroupMemberIdPaginateRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GroupMemberIdPaginateRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupMemberIdPaginateRequestValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := enums.Group_Category_name[int32(m.GetCategory())]; !ok {
		err := GroupMemberIdPaginateRequestValidationError{
			field:  "Category",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGroupId()) < 1 {
		err := GroupMemberIdPaginateRequestValidationError{
			field:  "GroupId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPaginate() == nil {
		err := GroupMemberIdPaginateRequestValidationError{
			field:  "Paginate",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GroupMemberIdPaginateRequestValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GroupMemberIdPaginateRequestValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupMemberIdPaginateRequestValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GroupMemberIdPaginateRequestMultiError(errors)
	}

	return nil
}

// GroupMemberIdPaginateRequestMultiError is an error wrapping multiple
// validation errors returned by GroupMemberIdPaginateRequest.ValidateAll() if
// the designated constraints aren't met.
type GroupMemberIdPaginateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupMemberIdPaginateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupMemberIdPaginateRequestMultiError) AllErrors() []error { return m }

// GroupMemberIdPaginateRequestValidationError is the validation error returned
// by GroupMemberIdPaginateRequest.Validate if the designated constraints
// aren't met.
type GroupMemberIdPaginateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupMemberIdPaginateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupMemberIdPaginateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupMemberIdPaginateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupMemberIdPaginateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupMemberIdPaginateRequestValidationError) ErrorName() string {
	return "GroupMemberIdPaginateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupMemberIdPaginateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupMemberIdPaginateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupMemberIdPaginateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupMemberIdPaginateRequestValidationError{}

// Validate checks the field values on GroupMemberIdPaginateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupMemberIdPaginateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupMemberIdPaginateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GroupMemberIdPaginateResponseMultiError, or nil if none found.
func (m *GroupMemberIdPaginateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupMemberIdPaginateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GroupMemberIdPaginateResponseValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GroupMemberIdPaginateResponseValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupMemberIdPaginateResponseValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GroupMemberIdPaginateResponseMultiError(errors)
	}

	return nil
}

// GroupMemberIdPaginateResponseMultiError is an error wrapping multiple
// validation errors returned by GroupMemberIdPaginateResponse.ValidateAll()
// if the designated constraints aren't met.
type GroupMemberIdPaginateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupMemberIdPaginateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupMemberIdPaginateResponseMultiError) AllErrors() []error { return m }

// GroupMemberIdPaginateResponseValidationError is the validation error
// returned by GroupMemberIdPaginateResponse.Validate if the designated
// constraints aren't met.
type GroupMemberIdPaginateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupMemberIdPaginateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupMemberIdPaginateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupMemberIdPaginateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupMemberIdPaginateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupMemberIdPaginateResponseValidationError) ErrorName() string {
	return "GroupMemberIdPaginateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupMemberIdPaginateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupMemberIdPaginateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupMemberIdPaginateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupMemberIdPaginateResponseValidationError{}

// Validate checks the field values on GroupIdListByUidRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupIdListByUidRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupIdListByUidRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupIdListByUidRequestMultiError, or nil if none found.
func (m *GroupIdListByUidRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupIdListByUidRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBase() == nil {
		err := GroupIdListByUidRequestValidationError{
			field:  "Base",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GroupIdListByUidRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GroupIdListByUidRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupIdListByUidRequestValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetUid()) < 1 {
		err := GroupIdListByUidRequestValidationError{
			field:  "Uid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GroupIdListByUidRequestMultiError(errors)
	}

	return nil
}

// GroupIdListByUidRequestMultiError is an error wrapping multiple validation
// errors returned by GroupIdListByUidRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupIdListByUidRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupIdListByUidRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupIdListByUidRequestMultiError) AllErrors() []error { return m }

// GroupIdListByUidRequestValidationError is the validation error returned by
// GroupIdListByUidRequest.Validate if the designated constraints aren't met.
type GroupIdListByUidRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupIdListByUidRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupIdListByUidRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupIdListByUidRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupIdListByUidRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupIdListByUidRequestValidationError) ErrorName() string {
	return "GroupIdListByUidRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupIdListByUidRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupIdListByUidRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupIdListByUidRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupIdListByUidRequestValidationError{}

// Validate checks the field values on GroupIdListByUidResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupIdListByUidResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupIdListByUidResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupIdListByUidResponseMultiError, or nil if none found.
func (m *GroupIdListByUidResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupIdListByUidResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GroupIdListByUidResponseMultiError(errors)
	}

	return nil
}

// GroupIdListByUidResponseMultiError is an error wrapping multiple validation
// errors returned by GroupIdListByUidResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupIdListByUidResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupIdListByUidResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupIdListByUidResponseMultiError) AllErrors() []error { return m }

// GroupIdListByUidResponseValidationError is the validation error returned by
// GroupIdListByUidResponse.Validate if the designated constraints aren't met.
type GroupIdListByUidResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupIdListByUidResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupIdListByUidResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupIdListByUidResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupIdListByUidResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupIdListByUidResponseValidationError) ErrorName() string {
	return "GroupIdListByUidResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupIdListByUidResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupIdListByUidResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupIdListByUidResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupIdListByUidResponseValidationError{}
