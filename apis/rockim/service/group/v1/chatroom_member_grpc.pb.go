// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: rockim/service/group/v1/chatroom_member.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatRoomMemberAPIClient is the client API for ChatRoomMemberAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatRoomMemberAPIClient interface {
	// Join 加入聊天室
	Join(ctx context.Context, in *ChatRoomJoinRequest, opts ...grpc.CallOption) (*ChatRoomJoinResponse, error)
	// Quit 退出聊天室
	Quit(ctx context.Context, in *ChatRoomQuitRequest, opts ...grpc.CallOption) (*ChatRoomQuitResponse, error)
}

type chatRoomMemberAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewChatRoomMemberAPIClient(cc grpc.ClientConnInterface) ChatRoomMemberAPIClient {
	return &chatRoomMemberAPIClient{cc}
}

func (c *chatRoomMemberAPIClient) Join(ctx context.Context, in *ChatRoomJoinRequest, opts ...grpc.CallOption) (*ChatRoomJoinResponse, error) {
	out := new(ChatRoomJoinResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.group.v1.ChatRoomMemberAPI/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomMemberAPIClient) Quit(ctx context.Context, in *ChatRoomQuitRequest, opts ...grpc.CallOption) (*ChatRoomQuitResponse, error) {
	out := new(ChatRoomQuitResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.group.v1.ChatRoomMemberAPI/Quit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatRoomMemberAPIServer is the server API for ChatRoomMemberAPI service.
// All implementations must embed UnimplementedChatRoomMemberAPIServer
// for forward compatibility
type ChatRoomMemberAPIServer interface {
	// Join 加入聊天室
	Join(context.Context, *ChatRoomJoinRequest) (*ChatRoomJoinResponse, error)
	// Quit 退出聊天室
	Quit(context.Context, *ChatRoomQuitRequest) (*ChatRoomQuitResponse, error)
	mustEmbedUnimplementedChatRoomMemberAPIServer()
}

// UnimplementedChatRoomMemberAPIServer must be embedded to have forward compatible implementations.
type UnimplementedChatRoomMemberAPIServer struct {
}

func (UnimplementedChatRoomMemberAPIServer) Join(context.Context, *ChatRoomJoinRequest) (*ChatRoomJoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedChatRoomMemberAPIServer) Quit(context.Context, *ChatRoomQuitRequest) (*ChatRoomQuitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Quit not implemented")
}
func (UnimplementedChatRoomMemberAPIServer) mustEmbedUnimplementedChatRoomMemberAPIServer() {}

// UnsafeChatRoomMemberAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatRoomMemberAPIServer will
// result in compilation errors.
type UnsafeChatRoomMemberAPIServer interface {
	mustEmbedUnimplementedChatRoomMemberAPIServer()
}

func RegisterChatRoomMemberAPIServer(s grpc.ServiceRegistrar, srv ChatRoomMemberAPIServer) {
	s.RegisterService(&ChatRoomMemberAPI_ServiceDesc, srv)
}

func _ChatRoomMemberAPI_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRoomJoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomMemberAPIServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.group.v1.ChatRoomMemberAPI/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomMemberAPIServer).Join(ctx, req.(*ChatRoomJoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoomMemberAPI_Quit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRoomQuitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomMemberAPIServer).Quit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.group.v1.ChatRoomMemberAPI/Quit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomMemberAPIServer).Quit(ctx, req.(*ChatRoomQuitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatRoomMemberAPI_ServiceDesc is the grpc.ServiceDesc for ChatRoomMemberAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatRoomMemberAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rockim.service.group.v1.ChatRoomMemberAPI",
	HandlerType: (*ChatRoomMemberAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _ChatRoomMemberAPI_Join_Handler,
		},
		{
			MethodName: "Quit",
			Handler:    _ChatRoomMemberAPI_Quit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rockim/service/group/v1/chatroom_member.proto",
}
