// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rockim/service/group/v1/chatroom_member.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ChatRoomJoinRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatRoomJoinRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatRoomJoinRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatRoomJoinRequestMultiError, or nil if none found.
func (m *ChatRoomJoinRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatRoomJoinRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBase() == nil {
		err := ChatRoomJoinRequestValidationError{
			field:  "Base",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatRoomJoinRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatRoomJoinRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatRoomJoinRequestValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetGroupId()) > 64 {
		err := ChatRoomJoinRequestValidationError{
			field:  "GroupId",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUid()); l < 1 || l > 64 {
		err := ChatRoomJoinRequestValidationError{
			field:  "Uid",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChatRoomJoinRequestMultiError(errors)
	}

	return nil
}

// ChatRoomJoinRequestMultiError is an error wrapping multiple validation
// errors returned by ChatRoomJoinRequest.ValidateAll() if the designated
// constraints aren't met.
type ChatRoomJoinRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatRoomJoinRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatRoomJoinRequestMultiError) AllErrors() []error { return m }

// ChatRoomJoinRequestValidationError is the validation error returned by
// ChatRoomJoinRequest.Validate if the designated constraints aren't met.
type ChatRoomJoinRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatRoomJoinRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatRoomJoinRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatRoomJoinRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatRoomJoinRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatRoomJoinRequestValidationError) ErrorName() string {
	return "ChatRoomJoinRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChatRoomJoinRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatRoomJoinRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatRoomJoinRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatRoomJoinRequestValidationError{}

// Validate checks the field values on ChatRoomJoinResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatRoomJoinResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatRoomJoinResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatRoomJoinResponseMultiError, or nil if none found.
func (m *ChatRoomJoinResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatRoomJoinResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChatRoomJoinResponseMultiError(errors)
	}

	return nil
}

// ChatRoomJoinResponseMultiError is an error wrapping multiple validation
// errors returned by ChatRoomJoinResponse.ValidateAll() if the designated
// constraints aren't met.
type ChatRoomJoinResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatRoomJoinResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatRoomJoinResponseMultiError) AllErrors() []error { return m }

// ChatRoomJoinResponseValidationError is the validation error returned by
// ChatRoomJoinResponse.Validate if the designated constraints aren't met.
type ChatRoomJoinResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatRoomJoinResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatRoomJoinResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatRoomJoinResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatRoomJoinResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatRoomJoinResponseValidationError) ErrorName() string {
	return "ChatRoomJoinResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChatRoomJoinResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatRoomJoinResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatRoomJoinResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatRoomJoinResponseValidationError{}

// Validate checks the field values on ChatRoomQuitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatRoomQuitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatRoomQuitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatRoomQuitRequestMultiError, or nil if none found.
func (m *ChatRoomQuitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatRoomQuitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBase() == nil {
		err := ChatRoomQuitRequestValidationError{
			field:  "Base",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatRoomQuitRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatRoomQuitRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatRoomQuitRequestValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetGroupId()) > 64 {
		err := ChatRoomQuitRequestValidationError{
			field:  "GroupId",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUid()); l < 1 || l > 64 {
		err := ChatRoomQuitRequestValidationError{
			field:  "Uid",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChatRoomQuitRequestMultiError(errors)
	}

	return nil
}

// ChatRoomQuitRequestMultiError is an error wrapping multiple validation
// errors returned by ChatRoomQuitRequest.ValidateAll() if the designated
// constraints aren't met.
type ChatRoomQuitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatRoomQuitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatRoomQuitRequestMultiError) AllErrors() []error { return m }

// ChatRoomQuitRequestValidationError is the validation error returned by
// ChatRoomQuitRequest.Validate if the designated constraints aren't met.
type ChatRoomQuitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatRoomQuitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatRoomQuitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatRoomQuitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatRoomQuitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatRoomQuitRequestValidationError) ErrorName() string {
	return "ChatRoomQuitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChatRoomQuitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatRoomQuitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatRoomQuitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatRoomQuitRequestValidationError{}

// Validate checks the field values on ChatRoomQuitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatRoomQuitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatRoomQuitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatRoomQuitResponseMultiError, or nil if none found.
func (m *ChatRoomQuitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatRoomQuitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChatRoomQuitResponseMultiError(errors)
	}

	return nil
}

// ChatRoomQuitResponseMultiError is an error wrapping multiple validation
// errors returned by ChatRoomQuitResponse.ValidateAll() if the designated
// constraints aren't met.
type ChatRoomQuitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatRoomQuitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatRoomQuitResponseMultiError) AllErrors() []error { return m }

// ChatRoomQuitResponseValidationError is the validation error returned by
// ChatRoomQuitResponse.Validate if the designated constraints aren't met.
type ChatRoomQuitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatRoomQuitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatRoomQuitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatRoomQuitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatRoomQuitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatRoomQuitResponseValidationError) ErrorName() string {
	return "ChatRoomQuitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChatRoomQuitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatRoomQuitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatRoomQuitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatRoomQuitResponseValidationError{}

// Validate checks the field values on ChatRoomMemberCheckRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatRoomMemberCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatRoomMemberCheckRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatRoomMemberCheckRequestMultiError, or nil if none found.
func (m *ChatRoomMemberCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatRoomMemberCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBase() == nil {
		err := ChatRoomMemberCheckRequestValidationError{
			field:  "Base",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatRoomMemberCheckRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatRoomMemberCheckRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatRoomMemberCheckRequestValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetGroupId()) > 64 {
		err := ChatRoomMemberCheckRequestValidationError{
			field:  "GroupId",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUid()); l < 1 || l > 64 {
		err := ChatRoomMemberCheckRequestValidationError{
			field:  "Uid",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChatRoomMemberCheckRequestMultiError(errors)
	}

	return nil
}

// ChatRoomMemberCheckRequestMultiError is an error wrapping multiple
// validation errors returned by ChatRoomMemberCheckRequest.ValidateAll() if
// the designated constraints aren't met.
type ChatRoomMemberCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatRoomMemberCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatRoomMemberCheckRequestMultiError) AllErrors() []error { return m }

// ChatRoomMemberCheckRequestValidationError is the validation error returned
// by ChatRoomMemberCheckRequest.Validate if the designated constraints aren't met.
type ChatRoomMemberCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatRoomMemberCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatRoomMemberCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatRoomMemberCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatRoomMemberCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatRoomMemberCheckRequestValidationError) ErrorName() string {
	return "ChatRoomMemberCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChatRoomMemberCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatRoomMemberCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatRoomMemberCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatRoomMemberCheckRequestValidationError{}

// Validate checks the field values on ChatRoomMemberCheckResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatRoomMemberCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatRoomMemberCheckResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatRoomMemberCheckResponseMultiError, or nil if none found.
func (m *ChatRoomMemberCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatRoomMemberCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsMember

	if len(errors) > 0 {
		return ChatRoomMemberCheckResponseMultiError(errors)
	}

	return nil
}

// ChatRoomMemberCheckResponseMultiError is an error wrapping multiple
// validation errors returned by ChatRoomMemberCheckResponse.ValidateAll() if
// the designated constraints aren't met.
type ChatRoomMemberCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatRoomMemberCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatRoomMemberCheckResponseMultiError) AllErrors() []error { return m }

// ChatRoomMemberCheckResponseValidationError is the validation error returned
// by ChatRoomMemberCheckResponse.Validate if the designated constraints
// aren't met.
type ChatRoomMemberCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatRoomMemberCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatRoomMemberCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatRoomMemberCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatRoomMemberCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatRoomMemberCheckResponseValidationError) ErrorName() string {
	return "ChatRoomMemberCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChatRoomMemberCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatRoomMemberCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatRoomMemberCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatRoomMemberCheckResponseValidationError{}

// Validate checks the field values on ChatRoomMemberFindRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatRoomMemberFindRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatRoomMemberFindRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatRoomMemberFindRequestMultiError, or nil if none found.
func (m *ChatRoomMemberFindRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatRoomMemberFindRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBase() == nil {
		err := ChatRoomMemberFindRequestValidationError{
			field:  "Base",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatRoomMemberFindRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatRoomMemberFindRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatRoomMemberFindRequestValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetGroupId()) > 64 {
		err := ChatRoomMemberFindRequestValidationError{
			field:  "GroupId",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUid()); l < 1 || l > 64 {
		err := ChatRoomMemberFindRequestValidationError{
			field:  "Uid",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChatRoomMemberFindRequestMultiError(errors)
	}

	return nil
}

// ChatRoomMemberFindRequestMultiError is an error wrapping multiple validation
// errors returned by ChatRoomMemberFindRequest.ValidateAll() if the
// designated constraints aren't met.
type ChatRoomMemberFindRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatRoomMemberFindRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatRoomMemberFindRequestMultiError) AllErrors() []error { return m }

// ChatRoomMemberFindRequestValidationError is the validation error returned by
// ChatRoomMemberFindRequest.Validate if the designated constraints aren't met.
type ChatRoomMemberFindRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatRoomMemberFindRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatRoomMemberFindRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatRoomMemberFindRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatRoomMemberFindRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatRoomMemberFindRequestValidationError) ErrorName() string {
	return "ChatRoomMemberFindRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChatRoomMemberFindRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatRoomMemberFindRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatRoomMemberFindRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatRoomMemberFindRequestValidationError{}

// Validate checks the field values on ChatRoomMemberFindResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatRoomMemberFindResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatRoomMemberFindResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatRoomMemberFindResponseMultiError, or nil if none found.
func (m *ChatRoomMemberFindResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatRoomMemberFindResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatRoomMemberFindResponseValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatRoomMemberFindResponseValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatRoomMemberFindResponseValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChatRoomMemberFindResponseMultiError(errors)
	}

	return nil
}

// ChatRoomMemberFindResponseMultiError is an error wrapping multiple
// validation errors returned by ChatRoomMemberFindResponse.ValidateAll() if
// the designated constraints aren't met.
type ChatRoomMemberFindResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatRoomMemberFindResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatRoomMemberFindResponseMultiError) AllErrors() []error { return m }

// ChatRoomMemberFindResponseValidationError is the validation error returned
// by ChatRoomMemberFindResponse.Validate if the designated constraints aren't met.
type ChatRoomMemberFindResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatRoomMemberFindResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatRoomMemberFindResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatRoomMemberFindResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatRoomMemberFindResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatRoomMemberFindResponseValidationError) ErrorName() string {
	return "ChatRoomMemberFindResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChatRoomMemberFindResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatRoomMemberFindResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatRoomMemberFindResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatRoomMemberFindResponseValidationError{}

// Validate checks the field values on ChatRoomMemberListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatRoomMemberListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatRoomMemberListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatRoomMemberListRequestMultiError, or nil if none found.
func (m *ChatRoomMemberListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatRoomMemberListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBase() == nil {
		err := ChatRoomMemberListRequestValidationError{
			field:  "Base",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatRoomMemberListRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatRoomMemberListRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatRoomMemberListRequestValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetGroupId()) > 64 {
		err := ChatRoomMemberListRequestValidationError{
			field:  "GroupId",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChatRoomMemberListRequestMultiError(errors)
	}

	return nil
}

// ChatRoomMemberListRequestMultiError is an error wrapping multiple validation
// errors returned by ChatRoomMemberListRequest.ValidateAll() if the
// designated constraints aren't met.
type ChatRoomMemberListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatRoomMemberListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatRoomMemberListRequestMultiError) AllErrors() []error { return m }

// ChatRoomMemberListRequestValidationError is the validation error returned by
// ChatRoomMemberListRequest.Validate if the designated constraints aren't met.
type ChatRoomMemberListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatRoomMemberListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatRoomMemberListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatRoomMemberListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatRoomMemberListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatRoomMemberListRequestValidationError) ErrorName() string {
	return "ChatRoomMemberListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChatRoomMemberListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatRoomMemberListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatRoomMemberListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatRoomMemberListRequestValidationError{}

// Validate checks the field values on ChatRoomMemberListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatRoomMemberListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatRoomMemberListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatRoomMemberListResponseMultiError, or nil if none found.
func (m *ChatRoomMemberListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatRoomMemberListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatRoomMemberListResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatRoomMemberListResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatRoomMemberListResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChatRoomMemberListResponseMultiError(errors)
	}

	return nil
}

// ChatRoomMemberListResponseMultiError is an error wrapping multiple
// validation errors returned by ChatRoomMemberListResponse.ValidateAll() if
// the designated constraints aren't met.
type ChatRoomMemberListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatRoomMemberListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatRoomMemberListResponseMultiError) AllErrors() []error { return m }

// ChatRoomMemberListResponseValidationError is the validation error returned
// by ChatRoomMemberListResponse.Validate if the designated constraints aren't met.
type ChatRoomMemberListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatRoomMemberListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatRoomMemberListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatRoomMemberListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatRoomMemberListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatRoomMemberListResponseValidationError) ErrorName() string {
	return "ChatRoomMemberListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChatRoomMemberListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatRoomMemberListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatRoomMemberListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatRoomMemberListResponseValidationError{}

// Validate checks the field values on ChatRoomMemberIdPaginateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatRoomMemberIdPaginateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatRoomMemberIdPaginateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ChatRoomMemberIdPaginateRequestMultiError, or nil if none found.
func (m *ChatRoomMemberIdPaginateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatRoomMemberIdPaginateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBase() == nil {
		err := ChatRoomMemberIdPaginateRequestValidationError{
			field:  "Base",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatRoomMemberIdPaginateRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatRoomMemberIdPaginateRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatRoomMemberIdPaginateRequestValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetGroupId()) > 64 {
		err := ChatRoomMemberIdPaginateRequestValidationError{
			field:  "GroupId",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPaginate() == nil {
		err := ChatRoomMemberIdPaginateRequestValidationError{
			field:  "Paginate",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatRoomMemberIdPaginateRequestValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatRoomMemberIdPaginateRequestValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatRoomMemberIdPaginateRequestValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChatRoomMemberIdPaginateRequestMultiError(errors)
	}

	return nil
}

// ChatRoomMemberIdPaginateRequestMultiError is an error wrapping multiple
// validation errors returned by ChatRoomMemberIdPaginateRequest.ValidateAll()
// if the designated constraints aren't met.
type ChatRoomMemberIdPaginateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatRoomMemberIdPaginateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatRoomMemberIdPaginateRequestMultiError) AllErrors() []error { return m }

// ChatRoomMemberIdPaginateRequestValidationError is the validation error
// returned by ChatRoomMemberIdPaginateRequest.Validate if the designated
// constraints aren't met.
type ChatRoomMemberIdPaginateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatRoomMemberIdPaginateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatRoomMemberIdPaginateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatRoomMemberIdPaginateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatRoomMemberIdPaginateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatRoomMemberIdPaginateRequestValidationError) ErrorName() string {
	return "ChatRoomMemberIdPaginateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChatRoomMemberIdPaginateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatRoomMemberIdPaginateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatRoomMemberIdPaginateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatRoomMemberIdPaginateRequestValidationError{}

// Validate checks the field values on ChatRoomMemberIdPaginateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ChatRoomMemberIdPaginateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatRoomMemberIdPaginateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ChatRoomMemberIdPaginateResponseMultiError, or nil if none found.
func (m *ChatRoomMemberIdPaginateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatRoomMemberIdPaginateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatRoomMemberIdPaginateResponseValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatRoomMemberIdPaginateResponseValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatRoomMemberIdPaginateResponseValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChatRoomMemberIdPaginateResponseMultiError(errors)
	}

	return nil
}

// ChatRoomMemberIdPaginateResponseMultiError is an error wrapping multiple
// validation errors returned by
// ChatRoomMemberIdPaginateResponse.ValidateAll() if the designated
// constraints aren't met.
type ChatRoomMemberIdPaginateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatRoomMemberIdPaginateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatRoomMemberIdPaginateResponseMultiError) AllErrors() []error { return m }

// ChatRoomMemberIdPaginateResponseValidationError is the validation error
// returned by ChatRoomMemberIdPaginateResponse.Validate if the designated
// constraints aren't met.
type ChatRoomMemberIdPaginateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatRoomMemberIdPaginateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatRoomMemberIdPaginateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatRoomMemberIdPaginateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatRoomMemberIdPaginateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatRoomMemberIdPaginateResponseValidationError) ErrorName() string {
	return "ChatRoomMemberIdPaginateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChatRoomMemberIdPaginateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatRoomMemberIdPaginateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatRoomMemberIdPaginateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatRoomMemberIdPaginateResponseValidationError{}
