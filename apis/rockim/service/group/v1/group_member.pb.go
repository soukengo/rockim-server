// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.0
// source: rockim/service/group/v1/group_member.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	service "rockimserver/apis/rockim/service"
	types "rockimserver/apis/rockim/service/group/v1/types"
	shared "rockimserver/apis/rockim/shared"
	enums "rockimserver/apis/rockim/shared/enums"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GroupMemberCheckRequest 判断是否为聊天室成员请求
type GroupMemberCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 基础参数
	Base *service.ServiceRequest `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// 群组类型
	Category enums.Group_Category `protobuf:"varint,2,opt,name=category,proto3,enum=rockim.shared.enums.Group_Category" json:"category,omitempty"`
	// 群组id
	GroupId string `protobuf:"bytes,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// 用户账号
	Uid string `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *GroupMemberCheckRequest) Reset() {
	*x = GroupMemberCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rockim_service_group_v1_group_member_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMemberCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMemberCheckRequest) ProtoMessage() {}

func (x *GroupMemberCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rockim_service_group_v1_group_member_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMemberCheckRequest.ProtoReflect.Descriptor instead.
func (*GroupMemberCheckRequest) Descriptor() ([]byte, []int) {
	return file_rockim_service_group_v1_group_member_proto_rawDescGZIP(), []int{0}
}

func (x *GroupMemberCheckRequest) GetBase() *service.ServiceRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GroupMemberCheckRequest) GetCategory() enums.Group_Category {
	if x != nil {
		return x.Category
	}
	return enums.Group_CHATROOM
}

func (x *GroupMemberCheckRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupMemberCheckRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

// GroupMemberCheckResponse 判断是否为聊天室成员响应
type GroupMemberCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsMember bool `protobuf:"varint,1,opt,name=is_member,json=isMember,proto3" json:"is_member,omitempty"`
}

func (x *GroupMemberCheckResponse) Reset() {
	*x = GroupMemberCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rockim_service_group_v1_group_member_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMemberCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMemberCheckResponse) ProtoMessage() {}

func (x *GroupMemberCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rockim_service_group_v1_group_member_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMemberCheckResponse.ProtoReflect.Descriptor instead.
func (*GroupMemberCheckResponse) Descriptor() ([]byte, []int) {
	return file_rockim_service_group_v1_group_member_proto_rawDescGZIP(), []int{1}
}

func (x *GroupMemberCheckResponse) GetIsMember() bool {
	if x != nil {
		return x.IsMember
	}
	return false
}

// GroupMemberFindRequest 获取成员信息请求
type GroupMemberFindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 基础参数
	Base *service.ServiceRequest `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// 群组类型
	Category enums.Group_Category `protobuf:"varint,2,opt,name=category,proto3,enum=rockim.shared.enums.Group_Category" json:"category,omitempty"`
	// 群组id
	GroupId string `protobuf:"bytes,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// 用户账号
	Uid string `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *GroupMemberFindRequest) Reset() {
	*x = GroupMemberFindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rockim_service_group_v1_group_member_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMemberFindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMemberFindRequest) ProtoMessage() {}

func (x *GroupMemberFindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rockim_service_group_v1_group_member_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMemberFindRequest.ProtoReflect.Descriptor instead.
func (*GroupMemberFindRequest) Descriptor() ([]byte, []int) {
	return file_rockim_service_group_v1_group_member_proto_rawDescGZIP(), []int{2}
}

func (x *GroupMemberFindRequest) GetBase() *service.ServiceRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GroupMemberFindRequest) GetCategory() enums.Group_Category {
	if x != nil {
		return x.Category
	}
	return enums.Group_CHATROOM
}

func (x *GroupMemberFindRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupMemberFindRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

// GroupMemberCheckResponse 获取成员信息响应
type GroupMemberFindResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member *types.GroupMember `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *GroupMemberFindResponse) Reset() {
	*x = GroupMemberFindResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rockim_service_group_v1_group_member_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMemberFindResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMemberFindResponse) ProtoMessage() {}

func (x *GroupMemberFindResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rockim_service_group_v1_group_member_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMemberFindResponse.ProtoReflect.Descriptor instead.
func (*GroupMemberFindResponse) Descriptor() ([]byte, []int) {
	return file_rockim_service_group_v1_group_member_proto_rawDescGZIP(), []int{3}
}

func (x *GroupMemberFindResponse) GetMember() *types.GroupMember {
	if x != nil {
		return x.Member
	}
	return nil
}

// GroupMemberListRequest 获取成员列表请求
type GroupMemberListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 基础参数
	Base *service.ServiceRequest `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// 群组类型
	Category enums.Group_Category `protobuf:"varint,2,opt,name=category,proto3,enum=rockim.shared.enums.Group_Category" json:"category,omitempty"`
	// 群组id
	GroupId string `protobuf:"bytes,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// 用户id列表
	Uids []string `protobuf:"bytes,4,rep,name=uids,proto3" json:"uids,omitempty"`
}

func (x *GroupMemberListRequest) Reset() {
	*x = GroupMemberListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rockim_service_group_v1_group_member_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMemberListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMemberListRequest) ProtoMessage() {}

func (x *GroupMemberListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rockim_service_group_v1_group_member_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMemberListRequest.ProtoReflect.Descriptor instead.
func (*GroupMemberListRequest) Descriptor() ([]byte, []int) {
	return file_rockim_service_group_v1_group_member_proto_rawDescGZIP(), []int{4}
}

func (x *GroupMemberListRequest) GetBase() *service.ServiceRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GroupMemberListRequest) GetCategory() enums.Group_Category {
	if x != nil {
		return x.Category
	}
	return enums.Group_CHATROOM
}

func (x *GroupMemberListRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupMemberListRequest) GetUids() []string {
	if x != nil {
		return x.Uids
	}
	return nil
}

// GroupMemberListResponse 获取成员列表响应
type GroupMemberListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 成员列表
	Members []*types.GroupMember `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *GroupMemberListResponse) Reset() {
	*x = GroupMemberListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rockim_service_group_v1_group_member_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMemberListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMemberListResponse) ProtoMessage() {}

func (x *GroupMemberListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rockim_service_group_v1_group_member_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMemberListResponse.ProtoReflect.Descriptor instead.
func (*GroupMemberListResponse) Descriptor() ([]byte, []int) {
	return file_rockim_service_group_v1_group_member_proto_rawDescGZIP(), []int{5}
}

func (x *GroupMemberListResponse) GetMembers() []*types.GroupMember {
	if x != nil {
		return x.Members
	}
	return nil
}

// GroupMemberIdPaginateRequest 分页获取成员id列表请求
type GroupMemberIdPaginateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 基础参数
	Base *service.ServiceRequest `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// 群组类型
	Category enums.Group_Category `protobuf:"varint,2,opt,name=category,proto3,enum=rockim.shared.enums.Group_Category" json:"category,omitempty"`
	// 群组id
	GroupId string `protobuf:"bytes,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// 分页参数
	Paginate *shared.Paginating `protobuf:"bytes,4,opt,name=paginate,proto3" json:"paginate,omitempty"`
}

func (x *GroupMemberIdPaginateRequest) Reset() {
	*x = GroupMemberIdPaginateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rockim_service_group_v1_group_member_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMemberIdPaginateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMemberIdPaginateRequest) ProtoMessage() {}

func (x *GroupMemberIdPaginateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rockim_service_group_v1_group_member_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMemberIdPaginateRequest.ProtoReflect.Descriptor instead.
func (*GroupMemberIdPaginateRequest) Descriptor() ([]byte, []int) {
	return file_rockim_service_group_v1_group_member_proto_rawDescGZIP(), []int{6}
}

func (x *GroupMemberIdPaginateRequest) GetBase() *service.ServiceRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GroupMemberIdPaginateRequest) GetCategory() enums.Group_Category {
	if x != nil {
		return x.Category
	}
	return enums.Group_CHATROOM
}

func (x *GroupMemberIdPaginateRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupMemberIdPaginateRequest) GetPaginate() *shared.Paginating {
	if x != nil {
		return x.Paginate
	}
	return nil
}

// GroupMemberIdPaginateResponse 分页获取成员id列表响应
type GroupMemberIdPaginateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 成员列表
	Members []string `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
	// 分页数据
	Paginate *shared.Paginated `protobuf:"bytes,2,opt,name=paginate,proto3" json:"paginate,omitempty"`
}

func (x *GroupMemberIdPaginateResponse) Reset() {
	*x = GroupMemberIdPaginateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rockim_service_group_v1_group_member_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMemberIdPaginateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMemberIdPaginateResponse) ProtoMessage() {}

func (x *GroupMemberIdPaginateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rockim_service_group_v1_group_member_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMemberIdPaginateResponse.ProtoReflect.Descriptor instead.
func (*GroupMemberIdPaginateResponse) Descriptor() ([]byte, []int) {
	return file_rockim_service_group_v1_group_member_proto_rawDescGZIP(), []int{7}
}

func (x *GroupMemberIdPaginateResponse) GetMembers() []string {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *GroupMemberIdPaginateResponse) GetPaginate() *shared.Paginated {
	if x != nil {
		return x.Paginate
	}
	return nil
}

// GroupIdListByUidRequest 根据成员获取群组id列表请求
type GroupIdListByUidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 基础参数
	Base *service.ServiceRequest `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// 用户id
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *GroupIdListByUidRequest) Reset() {
	*x = GroupIdListByUidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rockim_service_group_v1_group_member_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupIdListByUidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupIdListByUidRequest) ProtoMessage() {}

func (x *GroupIdListByUidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rockim_service_group_v1_group_member_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupIdListByUidRequest.ProtoReflect.Descriptor instead.
func (*GroupIdListByUidRequest) Descriptor() ([]byte, []int) {
	return file_rockim_service_group_v1_group_member_proto_rawDescGZIP(), []int{8}
}

func (x *GroupIdListByUidRequest) GetBase() *service.ServiceRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GroupIdListByUidRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

// GroupIdListByUidResponse 根据成员获取群组id列表响应
type GroupIdListByUidResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 群组id列表
	GroupIds []string `protobuf:"bytes,1,rep,name=group_ids,json=groupIds,proto3" json:"group_ids,omitempty"`
}

func (x *GroupIdListByUidResponse) Reset() {
	*x = GroupIdListByUidResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rockim_service_group_v1_group_member_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupIdListByUidResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupIdListByUidResponse) ProtoMessage() {}

func (x *GroupIdListByUidResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rockim_service_group_v1_group_member_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupIdListByUidResponse.ProtoReflect.Descriptor instead.
func (*GroupIdListByUidResponse) Descriptor() ([]byte, []int) {
	return file_rockim_service_group_v1_group_member_proto_rawDescGZIP(), []int{9}
}

func (x *GroupIdListByUidResponse) GetGroupIds() []string {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

var File_rockim_service_group_v1_group_member_proto protoreflect.FileDescriptor

var file_rockim_service_group_v1_group_member_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x72, 0x6f,
	0x63, 0x6b, 0x69, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x72, 0x6f,
	0x63, 0x6b, 0x69, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8, 0x01, 0x0a, 0x17, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x40, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x22, 0x37, 0x0a, 0x18, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xe7, 0x01, 0x0a, 0x16, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x22,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0e, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x40, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x22, 0x5d, 0x0a, 0x17, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0xd9, 0x01, 0x0a, 0x16, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72,
	0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x22,
	0x5f, 0x0a, 0x17, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x6f,
	0x63, 0x6b, 0x69, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x22, 0x8c, 0x02, 0x0a, 0x1c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x64, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x49, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3f,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x22,
	0x6f, 0x0a, 0x1d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72,
	0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x22, 0x72, 0x0a, 0x17, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x55, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x6f, 0x63, 0x6b,
	0x69, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x22, 0x37, 0x0a, 0x18, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x32, 0xce, 0x04,
	0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x50, 0x49,
	0x12, 0x6f, 0x0a, 0x08, 0x49, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x72,
	0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x69, 0x0a, 0x04, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x2f, 0x2e, 0x72, 0x6f, 0x63, 0x6b,
	0x69, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x72, 0x6f, 0x63,
	0x6b, 0x69, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x0b, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x35, 0x2e, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x64, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x42, 0x79, 0x55, 0x69, 0x64, 0x12, 0x30, 0x2e, 0x72, 0x6f, 0x63, 0x6b,
	0x69, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x55, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x72, 0x6f,
	0x63, 0x6b, 0x69, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x79, 0x55, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2e,
	0x5a, 0x2c, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rockim_service_group_v1_group_member_proto_rawDescOnce sync.Once
	file_rockim_service_group_v1_group_member_proto_rawDescData = file_rockim_service_group_v1_group_member_proto_rawDesc
)

func file_rockim_service_group_v1_group_member_proto_rawDescGZIP() []byte {
	file_rockim_service_group_v1_group_member_proto_rawDescOnce.Do(func() {
		file_rockim_service_group_v1_group_member_proto_rawDescData = protoimpl.X.CompressGZIP(file_rockim_service_group_v1_group_member_proto_rawDescData)
	})
	return file_rockim_service_group_v1_group_member_proto_rawDescData
}

var file_rockim_service_group_v1_group_member_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_rockim_service_group_v1_group_member_proto_goTypes = []interface{}{
	(*GroupMemberCheckRequest)(nil),       // 0: rockim.service.group.v1.GroupMemberCheckRequest
	(*GroupMemberCheckResponse)(nil),      // 1: rockim.service.group.v1.GroupMemberCheckResponse
	(*GroupMemberFindRequest)(nil),        // 2: rockim.service.group.v1.GroupMemberFindRequest
	(*GroupMemberFindResponse)(nil),       // 3: rockim.service.group.v1.GroupMemberFindResponse
	(*GroupMemberListRequest)(nil),        // 4: rockim.service.group.v1.GroupMemberListRequest
	(*GroupMemberListResponse)(nil),       // 5: rockim.service.group.v1.GroupMemberListResponse
	(*GroupMemberIdPaginateRequest)(nil),  // 6: rockim.service.group.v1.GroupMemberIdPaginateRequest
	(*GroupMemberIdPaginateResponse)(nil), // 7: rockim.service.group.v1.GroupMemberIdPaginateResponse
	(*GroupIdListByUidRequest)(nil),       // 8: rockim.service.group.v1.GroupIdListByUidRequest
	(*GroupIdListByUidResponse)(nil),      // 9: rockim.service.group.v1.GroupIdListByUidResponse
	(*service.ServiceRequest)(nil),        // 10: rockim.service.ServiceRequest
	(enums.Group_Category)(0),             // 11: rockim.shared.enums.Group.Category
	(*types.GroupMember)(nil),             // 12: rockim.service.group.v1.types.GroupMember
	(*shared.Paginating)(nil),             // 13: rockim.shared.Paginating
	(*shared.Paginated)(nil),              // 14: rockim.shared.Paginated
}
var file_rockim_service_group_v1_group_member_proto_depIdxs = []int32{
	10, // 0: rockim.service.group.v1.GroupMemberCheckRequest.base:type_name -> rockim.service.ServiceRequest
	11, // 1: rockim.service.group.v1.GroupMemberCheckRequest.category:type_name -> rockim.shared.enums.Group.Category
	10, // 2: rockim.service.group.v1.GroupMemberFindRequest.base:type_name -> rockim.service.ServiceRequest
	11, // 3: rockim.service.group.v1.GroupMemberFindRequest.category:type_name -> rockim.shared.enums.Group.Category
	12, // 4: rockim.service.group.v1.GroupMemberFindResponse.member:type_name -> rockim.service.group.v1.types.GroupMember
	10, // 5: rockim.service.group.v1.GroupMemberListRequest.base:type_name -> rockim.service.ServiceRequest
	11, // 6: rockim.service.group.v1.GroupMemberListRequest.category:type_name -> rockim.shared.enums.Group.Category
	12, // 7: rockim.service.group.v1.GroupMemberListResponse.members:type_name -> rockim.service.group.v1.types.GroupMember
	10, // 8: rockim.service.group.v1.GroupMemberIdPaginateRequest.base:type_name -> rockim.service.ServiceRequest
	11, // 9: rockim.service.group.v1.GroupMemberIdPaginateRequest.category:type_name -> rockim.shared.enums.Group.Category
	13, // 10: rockim.service.group.v1.GroupMemberIdPaginateRequest.paginate:type_name -> rockim.shared.Paginating
	14, // 11: rockim.service.group.v1.GroupMemberIdPaginateResponse.paginate:type_name -> rockim.shared.Paginated
	10, // 12: rockim.service.group.v1.GroupIdListByUidRequest.base:type_name -> rockim.service.ServiceRequest
	0,  // 13: rockim.service.group.v1.GroupMemberAPI.IsMember:input_type -> rockim.service.group.v1.GroupMemberCheckRequest
	2,  // 14: rockim.service.group.v1.GroupMemberAPI.Find:input_type -> rockim.service.group.v1.GroupMemberFindRequest
	4,  // 15: rockim.service.group.v1.GroupMemberAPI.List:input_type -> rockim.service.group.v1.GroupMemberListRequest
	6,  // 16: rockim.service.group.v1.GroupMemberAPI.PaginateUid:input_type -> rockim.service.group.v1.GroupMemberIdPaginateRequest
	8,  // 17: rockim.service.group.v1.GroupMemberAPI.ListGroupIdByUid:input_type -> rockim.service.group.v1.GroupIdListByUidRequest
	1,  // 18: rockim.service.group.v1.GroupMemberAPI.IsMember:output_type -> rockim.service.group.v1.GroupMemberCheckResponse
	3,  // 19: rockim.service.group.v1.GroupMemberAPI.Find:output_type -> rockim.service.group.v1.GroupMemberFindResponse
	5,  // 20: rockim.service.group.v1.GroupMemberAPI.List:output_type -> rockim.service.group.v1.GroupMemberListResponse
	7,  // 21: rockim.service.group.v1.GroupMemberAPI.PaginateUid:output_type -> rockim.service.group.v1.GroupMemberIdPaginateResponse
	9,  // 22: rockim.service.group.v1.GroupMemberAPI.ListGroupIdByUid:output_type -> rockim.service.group.v1.GroupIdListByUidResponse
	18, // [18:23] is the sub-list for method output_type
	13, // [13:18] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_rockim_service_group_v1_group_member_proto_init() }
func file_rockim_service_group_v1_group_member_proto_init() {
	if File_rockim_service_group_v1_group_member_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rockim_service_group_v1_group_member_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMemberCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rockim_service_group_v1_group_member_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMemberCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rockim_service_group_v1_group_member_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMemberFindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rockim_service_group_v1_group_member_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMemberFindResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rockim_service_group_v1_group_member_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMemberListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rockim_service_group_v1_group_member_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMemberListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rockim_service_group_v1_group_member_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMemberIdPaginateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rockim_service_group_v1_group_member_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMemberIdPaginateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rockim_service_group_v1_group_member_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupIdListByUidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rockim_service_group_v1_group_member_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupIdListByUidResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rockim_service_group_v1_group_member_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rockim_service_group_v1_group_member_proto_goTypes,
		DependencyIndexes: file_rockim_service_group_v1_group_member_proto_depIdxs,
		MessageInfos:      file_rockim_service_group_v1_group_member_proto_msgTypes,
	}.Build()
	File_rockim_service_group_v1_group_member_proto = out.File
	file_rockim_service_group_v1_group_member_proto_rawDesc = nil
	file_rockim_service_group_v1_group_member_proto_goTypes = nil
	file_rockim_service_group_v1_group_member_proto_depIdxs = nil
}
