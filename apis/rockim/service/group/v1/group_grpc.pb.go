// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: rockim/service/group/v1/group.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GroupAPIClient is the client API for GroupAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupAPIClient interface {
	// FindGroupId 查找群组ID
	FindGroupId(ctx context.Context, in *GroupIdFindRequest, opts ...grpc.CallOption) (*GroupIdFindResponse, error)
	// Find 根据自定义id查找群组
	Find(ctx context.Context, in *GroupFindRequest, opts ...grpc.CallOption) (*GroupFindResponse, error)
	// FindById 根据id查找群组
	FindById(ctx context.Context, in *GroupFindByIdRequest, opts ...grpc.CallOption) (*GroupFindByIdResponse, error)
}

type groupAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupAPIClient(cc grpc.ClientConnInterface) GroupAPIClient {
	return &groupAPIClient{cc}
}

func (c *groupAPIClient) FindGroupId(ctx context.Context, in *GroupIdFindRequest, opts ...grpc.CallOption) (*GroupIdFindResponse, error) {
	out := new(GroupIdFindResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.group.v1.GroupAPI/FindGroupId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupAPIClient) Find(ctx context.Context, in *GroupFindRequest, opts ...grpc.CallOption) (*GroupFindResponse, error) {
	out := new(GroupFindResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.group.v1.GroupAPI/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupAPIClient) FindById(ctx context.Context, in *GroupFindByIdRequest, opts ...grpc.CallOption) (*GroupFindByIdResponse, error) {
	out := new(GroupFindByIdResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.group.v1.GroupAPI/FindById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupAPIServer is the server API for GroupAPI service.
// All implementations must embed UnimplementedGroupAPIServer
// for forward compatibility
type GroupAPIServer interface {
	// FindGroupId 查找群组ID
	FindGroupId(context.Context, *GroupIdFindRequest) (*GroupIdFindResponse, error)
	// Find 根据自定义id查找群组
	Find(context.Context, *GroupFindRequest) (*GroupFindResponse, error)
	// FindById 根据id查找群组
	FindById(context.Context, *GroupFindByIdRequest) (*GroupFindByIdResponse, error)
	mustEmbedUnimplementedGroupAPIServer()
}

// UnimplementedGroupAPIServer must be embedded to have forward compatible implementations.
type UnimplementedGroupAPIServer struct {
}

func (UnimplementedGroupAPIServer) FindGroupId(context.Context, *GroupIdFindRequest) (*GroupIdFindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindGroupId not implemented")
}
func (UnimplementedGroupAPIServer) Find(context.Context, *GroupFindRequest) (*GroupFindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedGroupAPIServer) FindById(context.Context, *GroupFindByIdRequest) (*GroupFindByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedGroupAPIServer) mustEmbedUnimplementedGroupAPIServer() {}

// UnsafeGroupAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupAPIServer will
// result in compilation errors.
type UnsafeGroupAPIServer interface {
	mustEmbedUnimplementedGroupAPIServer()
}

func RegisterGroupAPIServer(s grpc.ServiceRegistrar, srv GroupAPIServer) {
	s.RegisterService(&GroupAPI_ServiceDesc, srv)
}

func _GroupAPI_FindGroupId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupIdFindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupAPIServer).FindGroupId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.group.v1.GroupAPI/FindGroupId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupAPIServer).FindGroupId(ctx, req.(*GroupIdFindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupAPI_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupFindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupAPIServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.group.v1.GroupAPI/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupAPIServer).Find(ctx, req.(*GroupFindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupAPI_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupFindByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupAPIServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.group.v1.GroupAPI/FindById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupAPIServer).FindById(ctx, req.(*GroupFindByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupAPI_ServiceDesc is the grpc.ServiceDesc for GroupAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rockim.service.group.v1.GroupAPI",
	HandlerType: (*GroupAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindGroupId",
			Handler:    _GroupAPI_FindGroupId_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _GroupAPI_Find_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _GroupAPI_FindById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rockim/service/group/v1/group.proto",
}
