// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rockim/service/group/v1/group.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GroupIdFindRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupIdFindRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupIdFindRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupIdFindRequestMultiError, or nil if none found.
func (m *GroupIdFindRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupIdFindRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBase() == nil {
		err := GroupIdFindRequestValidationError{
			field:  "Base",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GroupIdFindRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GroupIdFindRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupIdFindRequestValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetBizId()) > 64 {
		err := GroupIdFindRequestValidationError{
			field:  "BizId",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GroupIdFindRequestMultiError(errors)
	}

	return nil
}

// GroupIdFindRequestMultiError is an error wrapping multiple validation errors
// returned by GroupIdFindRequest.ValidateAll() if the designated constraints
// aren't met.
type GroupIdFindRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupIdFindRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupIdFindRequestMultiError) AllErrors() []error { return m }

// GroupIdFindRequestValidationError is the validation error returned by
// GroupIdFindRequest.Validate if the designated constraints aren't met.
type GroupIdFindRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupIdFindRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupIdFindRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupIdFindRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupIdFindRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupIdFindRequestValidationError) ErrorName() string {
	return "GroupIdFindRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupIdFindRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupIdFindRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupIdFindRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupIdFindRequestValidationError{}

// Validate checks the field values on GroupIdFindResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupIdFindResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupIdFindResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupIdFindResponseMultiError, or nil if none found.
func (m *GroupIdFindResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupIdFindResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return GroupIdFindResponseMultiError(errors)
	}

	return nil
}

// GroupIdFindResponseMultiError is an error wrapping multiple validation
// errors returned by GroupIdFindResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupIdFindResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupIdFindResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupIdFindResponseMultiError) AllErrors() []error { return m }

// GroupIdFindResponseValidationError is the validation error returned by
// GroupIdFindResponse.Validate if the designated constraints aren't met.
type GroupIdFindResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupIdFindResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupIdFindResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupIdFindResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupIdFindResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupIdFindResponseValidationError) ErrorName() string {
	return "GroupIdFindResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupIdFindResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupIdFindResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupIdFindResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupIdFindResponseValidationError{}

// Validate checks the field values on GroupFindRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GroupFindRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupFindRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupFindRequestMultiError, or nil if none found.
func (m *GroupFindRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupFindRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBase() == nil {
		err := GroupFindRequestValidationError{
			field:  "Base",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GroupFindRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GroupFindRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupFindRequestValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetBizId()) > 64 {
		err := GroupFindRequestValidationError{
			field:  "BizId",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GroupFindRequestMultiError(errors)
	}

	return nil
}

// GroupFindRequestMultiError is an error wrapping multiple validation errors
// returned by GroupFindRequest.ValidateAll() if the designated constraints
// aren't met.
type GroupFindRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupFindRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupFindRequestMultiError) AllErrors() []error { return m }

// GroupFindRequestValidationError is the validation error returned by
// GroupFindRequest.Validate if the designated constraints aren't met.
type GroupFindRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupFindRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupFindRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupFindRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupFindRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupFindRequestValidationError) ErrorName() string { return "GroupFindRequestValidationError" }

// Error satisfies the builtin error interface
func (e GroupFindRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupFindRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupFindRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupFindRequestValidationError{}

// Validate checks the field values on GroupFindResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GroupFindResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupFindResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupFindResponseMultiError, or nil if none found.
func (m *GroupFindResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupFindResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GroupFindResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GroupFindResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupFindResponseValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GroupFindResponseMultiError(errors)
	}

	return nil
}

// GroupFindResponseMultiError is an error wrapping multiple validation errors
// returned by GroupFindResponse.ValidateAll() if the designated constraints
// aren't met.
type GroupFindResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupFindResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupFindResponseMultiError) AllErrors() []error { return m }

// GroupFindResponseValidationError is the validation error returned by
// GroupFindResponse.Validate if the designated constraints aren't met.
type GroupFindResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupFindResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupFindResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupFindResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupFindResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupFindResponseValidationError) ErrorName() string {
	return "GroupFindResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupFindResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupFindResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupFindResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupFindResponseValidationError{}

// Validate checks the field values on GroupFindByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupFindByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupFindByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupFindByIdRequestMultiError, or nil if none found.
func (m *GroupFindByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupFindByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBase() == nil {
		err := GroupFindByIdRequestValidationError{
			field:  "Base",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GroupFindByIdRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GroupFindByIdRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupFindByIdRequestValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetGroupId()) > 64 {
		err := GroupFindByIdRequestValidationError{
			field:  "GroupId",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GroupFindByIdRequestMultiError(errors)
	}

	return nil
}

// GroupFindByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GroupFindByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupFindByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupFindByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupFindByIdRequestMultiError) AllErrors() []error { return m }

// GroupFindByIdRequestValidationError is the validation error returned by
// GroupFindByIdRequest.Validate if the designated constraints aren't met.
type GroupFindByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupFindByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupFindByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupFindByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupFindByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupFindByIdRequestValidationError) ErrorName() string {
	return "GroupFindByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupFindByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupFindByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupFindByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupFindByIdRequestValidationError{}

// Validate checks the field values on GroupFindByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupFindByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupFindByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupFindByIdResponseMultiError, or nil if none found.
func (m *GroupFindByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupFindByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GroupFindByIdResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GroupFindByIdResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupFindByIdResponseValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GroupFindByIdResponseMultiError(errors)
	}

	return nil
}

// GroupFindByIdResponseMultiError is an error wrapping multiple validation
// errors returned by GroupFindByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupFindByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupFindByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupFindByIdResponseMultiError) AllErrors() []error { return m }

// GroupFindByIdResponseValidationError is the validation error returned by
// GroupFindByIdResponse.Validate if the designated constraints aren't met.
type GroupFindByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupFindByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupFindByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupFindByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupFindByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupFindByIdResponseValidationError) ErrorName() string {
	return "GroupFindByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupFindByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupFindByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupFindByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupFindByIdResponseValidationError{}
