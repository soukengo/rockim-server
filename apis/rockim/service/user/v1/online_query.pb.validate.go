// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rockim/service/user/v1/online_query.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OnlineCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OnlineCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnlineCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OnlineCheckRequestMultiError, or nil if none found.
func (m *OnlineCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OnlineCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBase() == nil {
		err := OnlineCheckRequestValidationError{
			field:  "Base",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OnlineCheckRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OnlineCheckRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OnlineCheckRequestValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetUid()) < 1 {
		err := OnlineCheckRequestValidationError{
			field:  "Uid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OnlineCheckRequestMultiError(errors)
	}

	return nil
}

// OnlineCheckRequestMultiError is an error wrapping multiple validation errors
// returned by OnlineCheckRequest.ValidateAll() if the designated constraints
// aren't met.
type OnlineCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnlineCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnlineCheckRequestMultiError) AllErrors() []error { return m }

// OnlineCheckRequestValidationError is the validation error returned by
// OnlineCheckRequest.Validate if the designated constraints aren't met.
type OnlineCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnlineCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnlineCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnlineCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnlineCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnlineCheckRequestValidationError) ErrorName() string {
	return "OnlineCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OnlineCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnlineCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnlineCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnlineCheckRequestValidationError{}

// Validate checks the field values on OnlineCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OnlineCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnlineCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OnlineCheckResponseMultiError, or nil if none found.
func (m *OnlineCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OnlineCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Online

	if len(errors) > 0 {
		return OnlineCheckResponseMultiError(errors)
	}

	return nil
}

// OnlineCheckResponseMultiError is an error wrapping multiple validation
// errors returned by OnlineCheckResponse.ValidateAll() if the designated
// constraints aren't met.
type OnlineCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnlineCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnlineCheckResponseMultiError) AllErrors() []error { return m }

// OnlineCheckResponseValidationError is the validation error returned by
// OnlineCheckResponse.Validate if the designated constraints aren't met.
type OnlineCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnlineCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnlineCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnlineCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnlineCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnlineCheckResponseValidationError) ErrorName() string {
	return "OnlineCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OnlineCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnlineCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnlineCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnlineCheckResponseValidationError{}

// Validate checks the field values on OnlineBatchCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OnlineBatchCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnlineBatchCheckRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OnlineBatchCheckRequestMultiError, or nil if none found.
func (m *OnlineBatchCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OnlineBatchCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBase() == nil {
		err := OnlineBatchCheckRequestValidationError{
			field:  "Base",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OnlineBatchCheckRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OnlineBatchCheckRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OnlineBatchCheckRequestValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetUids()) < 1 {
		err := OnlineBatchCheckRequestValidationError{
			field:  "Uids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetUids() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) < 1 {
			err := OnlineBatchCheckRequestValidationError{
				field:  fmt.Sprintf("Uids[%v]", idx),
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return OnlineBatchCheckRequestMultiError(errors)
	}

	return nil
}

// OnlineBatchCheckRequestMultiError is an error wrapping multiple validation
// errors returned by OnlineBatchCheckRequest.ValidateAll() if the designated
// constraints aren't met.
type OnlineBatchCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnlineBatchCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnlineBatchCheckRequestMultiError) AllErrors() []error { return m }

// OnlineBatchCheckRequestValidationError is the validation error returned by
// OnlineBatchCheckRequest.Validate if the designated constraints aren't met.
type OnlineBatchCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnlineBatchCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnlineBatchCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnlineBatchCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnlineBatchCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnlineBatchCheckRequestValidationError) ErrorName() string {
	return "OnlineBatchCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OnlineBatchCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnlineBatchCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnlineBatchCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnlineBatchCheckRequestValidationError{}

// Validate checks the field values on OnlineBatchCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OnlineBatchCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnlineBatchCheckResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OnlineBatchCheckResponseMultiError, or nil if none found.
func (m *OnlineBatchCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OnlineBatchCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OnlineBatchCheckResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OnlineBatchCheckResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OnlineBatchCheckResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OnlineBatchCheckResponseMultiError(errors)
	}

	return nil
}

// OnlineBatchCheckResponseMultiError is an error wrapping multiple validation
// errors returned by OnlineBatchCheckResponse.ValidateAll() if the designated
// constraints aren't met.
type OnlineBatchCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnlineBatchCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnlineBatchCheckResponseMultiError) AllErrors() []error { return m }

// OnlineBatchCheckResponseValidationError is the validation error returned by
// OnlineBatchCheckResponse.Validate if the designated constraints aren't met.
type OnlineBatchCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnlineBatchCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnlineBatchCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnlineBatchCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnlineBatchCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnlineBatchCheckResponseValidationError) ErrorName() string {
	return "OnlineBatchCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OnlineBatchCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnlineBatchCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnlineBatchCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnlineBatchCheckResponseValidationError{}

// Validate checks the field values on OnlineUserListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OnlineUserListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnlineUserListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OnlineUserListRequestMultiError, or nil if none found.
func (m *OnlineUserListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OnlineUserListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBase() == nil {
		err := OnlineUserListRequestValidationError{
			field:  "Base",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OnlineUserListRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OnlineUserListRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OnlineUserListRequestValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetUids()) < 1 {
		err := OnlineUserListRequestValidationError{
			field:  "Uids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetUids() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) < 1 {
			err := OnlineUserListRequestValidationError{
				field:  fmt.Sprintf("Uids[%v]", idx),
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return OnlineUserListRequestMultiError(errors)
	}

	return nil
}

// OnlineUserListRequestMultiError is an error wrapping multiple validation
// errors returned by OnlineUserListRequest.ValidateAll() if the designated
// constraints aren't met.
type OnlineUserListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnlineUserListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnlineUserListRequestMultiError) AllErrors() []error { return m }

// OnlineUserListRequestValidationError is the validation error returned by
// OnlineUserListRequest.Validate if the designated constraints aren't met.
type OnlineUserListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnlineUserListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnlineUserListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnlineUserListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnlineUserListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnlineUserListRequestValidationError) ErrorName() string {
	return "OnlineUserListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OnlineUserListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnlineUserListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnlineUserListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnlineUserListRequestValidationError{}

// Validate checks the field values on OnlineUserListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OnlineUserListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnlineUserListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OnlineUserListResponseMultiError, or nil if none found.
func (m *OnlineUserListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OnlineUserListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OnlineUserListResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OnlineUserListResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OnlineUserListResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OnlineUserListResponseMultiError(errors)
	}

	return nil
}

// OnlineUserListResponseMultiError is an error wrapping multiple validation
// errors returned by OnlineUserListResponse.ValidateAll() if the designated
// constraints aren't met.
type OnlineUserListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnlineUserListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnlineUserListResponseMultiError) AllErrors() []error { return m }

// OnlineUserListResponseValidationError is the validation error returned by
// OnlineUserListResponse.Validate if the designated constraints aren't met.
type OnlineUserListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnlineUserListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnlineUserListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnlineUserListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnlineUserListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnlineUserListResponseValidationError) ErrorName() string {
	return "OnlineUserListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OnlineUserListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnlineUserListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnlineUserListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnlineUserListResponseValidationError{}

// Validate checks the field values on OnlineBatchCheckResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OnlineBatchCheckResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnlineBatchCheckResponse_Item with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// OnlineBatchCheckResponse_ItemMultiError, or nil if none found.
func (m *OnlineBatchCheckResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *OnlineBatchCheckResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Online

	if len(errors) > 0 {
		return OnlineBatchCheckResponse_ItemMultiError(errors)
	}

	return nil
}

// OnlineBatchCheckResponse_ItemMultiError is an error wrapping multiple
// validation errors returned by OnlineBatchCheckResponse_Item.ValidateAll()
// if the designated constraints aren't met.
type OnlineBatchCheckResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnlineBatchCheckResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnlineBatchCheckResponse_ItemMultiError) AllErrors() []error { return m }

// OnlineBatchCheckResponse_ItemValidationError is the validation error
// returned by OnlineBatchCheckResponse_Item.Validate if the designated
// constraints aren't met.
type OnlineBatchCheckResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnlineBatchCheckResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnlineBatchCheckResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnlineBatchCheckResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnlineBatchCheckResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnlineBatchCheckResponse_ItemValidationError) ErrorName() string {
	return "OnlineBatchCheckResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e OnlineBatchCheckResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnlineBatchCheckResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnlineBatchCheckResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnlineBatchCheckResponse_ItemValidationError{}
