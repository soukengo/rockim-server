// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: rockim/service/user/v1/online.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OnlineAPIClient is the client API for OnlineAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnlineAPIClient interface {
	// Add 添加在线连接
	Add(ctx context.Context, in *OnlineAddRequest, opts ...grpc.CallOption) (*OnlineAddResponse, error)
	// Delete 移除在线连接
	Delete(ctx context.Context, in *OnlineDeleteRequest, opts ...grpc.CallOption) (*OnlineDeleteResponse, error)
	// Refresh 刷新在线连接
	Refresh(ctx context.Context, in *OnlineRefreshRequest, opts ...grpc.CallOption) (*OnlineRefreshResponse, error)
}

type onlineAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewOnlineAPIClient(cc grpc.ClientConnInterface) OnlineAPIClient {
	return &onlineAPIClient{cc}
}

func (c *onlineAPIClient) Add(ctx context.Context, in *OnlineAddRequest, opts ...grpc.CallOption) (*OnlineAddResponse, error) {
	out := new(OnlineAddResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.user.v1.OnlineAPI/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineAPIClient) Delete(ctx context.Context, in *OnlineDeleteRequest, opts ...grpc.CallOption) (*OnlineDeleteResponse, error) {
	out := new(OnlineDeleteResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.user.v1.OnlineAPI/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineAPIClient) Refresh(ctx context.Context, in *OnlineRefreshRequest, opts ...grpc.CallOption) (*OnlineRefreshResponse, error) {
	out := new(OnlineRefreshResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.user.v1.OnlineAPI/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnlineAPIServer is the server API for OnlineAPI service.
// All implementations must embed UnimplementedOnlineAPIServer
// for forward compatibility
type OnlineAPIServer interface {
	// Add 添加在线连接
	Add(context.Context, *OnlineAddRequest) (*OnlineAddResponse, error)
	// Delete 移除在线连接
	Delete(context.Context, *OnlineDeleteRequest) (*OnlineDeleteResponse, error)
	// Refresh 刷新在线连接
	Refresh(context.Context, *OnlineRefreshRequest) (*OnlineRefreshResponse, error)
	mustEmbedUnimplementedOnlineAPIServer()
}

// UnimplementedOnlineAPIServer must be embedded to have forward compatible implementations.
type UnimplementedOnlineAPIServer struct {
}

func (UnimplementedOnlineAPIServer) Add(context.Context, *OnlineAddRequest) (*OnlineAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedOnlineAPIServer) Delete(context.Context, *OnlineDeleteRequest) (*OnlineDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOnlineAPIServer) Refresh(context.Context, *OnlineRefreshRequest) (*OnlineRefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedOnlineAPIServer) mustEmbedUnimplementedOnlineAPIServer() {}

// UnsafeOnlineAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnlineAPIServer will
// result in compilation errors.
type UnsafeOnlineAPIServer interface {
	mustEmbedUnimplementedOnlineAPIServer()
}

func RegisterOnlineAPIServer(s grpc.ServiceRegistrar, srv OnlineAPIServer) {
	s.RegisterService(&OnlineAPI_ServiceDesc, srv)
}

func _OnlineAPI_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineAPIServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.user.v1.OnlineAPI/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineAPIServer).Add(ctx, req.(*OnlineAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnlineAPI_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineAPIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.user.v1.OnlineAPI/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineAPIServer).Delete(ctx, req.(*OnlineDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnlineAPI_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineRefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineAPIServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.user.v1.OnlineAPI/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineAPIServer).Refresh(ctx, req.(*OnlineRefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OnlineAPI_ServiceDesc is the grpc.ServiceDesc for OnlineAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnlineAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rockim.service.user.v1.OnlineAPI",
	HandlerType: (*OnlineAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _OnlineAPI_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OnlineAPI_Delete_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _OnlineAPI_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rockim/service/user/v1/online.proto",
}
