// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rockim/service/platform/v1/tenant.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TenantCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantCreateRequestMultiError, or nil if none found.
func (m *TenantCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		err := TenantCreateRequestValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := TenantCreateRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := TenantCreateRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TenantCreateRequestMultiError(errors)
	}

	return nil
}

// TenantCreateRequestMultiError is an error wrapping multiple validation
// errors returned by TenantCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type TenantCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantCreateRequestMultiError) AllErrors() []error { return m }

// TenantCreateRequestValidationError is the validation error returned by
// TenantCreateRequest.Validate if the designated constraints aren't met.
type TenantCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantCreateRequestValidationError) ErrorName() string {
	return "TenantCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantCreateRequestValidationError{}

// Validate checks the field values on TenantCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantCreateResponseMultiError, or nil if none found.
func (m *TenantCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TenantCreateResponseMultiError(errors)
	}

	return nil
}

// TenantCreateResponseMultiError is an error wrapping multiple validation
// errors returned by TenantCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type TenantCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantCreateResponseMultiError) AllErrors() []error { return m }

// TenantCreateResponseValidationError is the validation error returned by
// TenantCreateResponse.Validate if the designated constraints aren't met.
type TenantCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantCreateResponseValidationError) ErrorName() string {
	return "TenantCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantCreateResponseValidationError{}

// Validate checks the field values on TenantUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantUpdateRequestMultiError, or nil if none found.
func (m *TenantUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := TenantUpdateRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := TenantUpdateRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TenantUpdateRequestMultiError(errors)
	}

	return nil
}

// TenantUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by TenantUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type TenantUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantUpdateRequestMultiError) AllErrors() []error { return m }

// TenantUpdateRequestValidationError is the validation error returned by
// TenantUpdateRequest.Validate if the designated constraints aren't met.
type TenantUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantUpdateRequestValidationError) ErrorName() string {
	return "TenantUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantUpdateRequestValidationError{}

// Validate checks the field values on TenantUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantUpdateResponseMultiError, or nil if none found.
func (m *TenantUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TenantUpdateResponseMultiError(errors)
	}

	return nil
}

// TenantUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by TenantUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type TenantUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantUpdateResponseMultiError) AllErrors() []error { return m }

// TenantUpdateResponseValidationError is the validation error returned by
// TenantUpdateResponse.Validate if the designated constraints aren't met.
type TenantUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantUpdateResponseValidationError) ErrorName() string {
	return "TenantUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantUpdateResponseValidationError{}

// Validate checks the field values on TenantPagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantPagingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantPagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantPagingRequestMultiError, or nil if none found.
func (m *TenantPagingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantPagingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantPagingRequestValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantPagingRequestValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantPagingRequestValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Keyword

	if len(errors) > 0 {
		return TenantPagingRequestMultiError(errors)
	}

	return nil
}

// TenantPagingRequestMultiError is an error wrapping multiple validation
// errors returned by TenantPagingRequest.ValidateAll() if the designated
// constraints aren't met.
type TenantPagingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantPagingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantPagingRequestMultiError) AllErrors() []error { return m }

// TenantPagingRequestValidationError is the validation error returned by
// TenantPagingRequest.Validate if the designated constraints aren't met.
type TenantPagingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantPagingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantPagingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantPagingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantPagingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantPagingRequestValidationError) ErrorName() string {
	return "TenantPagingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantPagingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantPagingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantPagingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantPagingRequestValidationError{}

// Validate checks the field values on TenantPagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantPagingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantPagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantPagingResponseMultiError, or nil if none found.
func (m *TenantPagingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantPagingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TenantPagingResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TenantPagingResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TenantPagingResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantPagingResponseValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantPagingResponseValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantPagingResponseValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantPagingResponseMultiError(errors)
	}

	return nil
}

// TenantPagingResponseMultiError is an error wrapping multiple validation
// errors returned by TenantPagingResponse.ValidateAll() if the designated
// constraints aren't met.
type TenantPagingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantPagingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantPagingResponseMultiError) AllErrors() []error { return m }

// TenantPagingResponseValidationError is the validation error returned by
// TenantPagingResponse.Validate if the designated constraints aren't met.
type TenantPagingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantPagingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantPagingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantPagingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantPagingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantPagingResponseValidationError) ErrorName() string {
	return "TenantPagingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantPagingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantPagingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantPagingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantPagingResponseValidationError{}

// Validate checks the field values on TenantFindRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TenantFindRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantFindRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantFindRequestMultiError, or nil if none found.
func (m *TenantFindRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantFindRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return TenantFindRequestMultiError(errors)
	}

	return nil
}

// TenantFindRequestMultiError is an error wrapping multiple validation errors
// returned by TenantFindRequest.ValidateAll() if the designated constraints
// aren't met.
type TenantFindRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantFindRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantFindRequestMultiError) AllErrors() []error { return m }

// TenantFindRequestValidationError is the validation error returned by
// TenantFindRequest.Validate if the designated constraints aren't met.
type TenantFindRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantFindRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantFindRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantFindRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantFindRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantFindRequestValidationError) ErrorName() string {
	return "TenantFindRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantFindRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantFindRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantFindRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantFindRequestValidationError{}

// Validate checks the field values on TenantFindResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantFindResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantFindResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantFindResponseMultiError, or nil if none found.
func (m *TenantFindResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantFindResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantFindResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantFindResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantFindResponseValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantFindResponseMultiError(errors)
	}

	return nil
}

// TenantFindResponseMultiError is an error wrapping multiple validation errors
// returned by TenantFindResponse.ValidateAll() if the designated constraints
// aren't met.
type TenantFindResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantFindResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantFindResponseMultiError) AllErrors() []error { return m }

// TenantFindResponseValidationError is the validation error returned by
// TenantFindResponse.Validate if the designated constraints aren't met.
type TenantFindResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantFindResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantFindResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantFindResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantFindResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantFindResponseValidationError) ErrorName() string {
	return "TenantFindResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantFindResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantFindResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantFindResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantFindResponseValidationError{}
