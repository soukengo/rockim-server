// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: rockim/service/platform/v1/tenant.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TenantAPIClient is the client API for TenantAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenantAPIClient interface {
	// 创建商户
	Create(ctx context.Context, in *TenantCreateRequest, opts ...grpc.CallOption) (*TenantCreateResponse, error)
	// 修改商户
	Update(ctx context.Context, in *TenantUpdateRequest, opts ...grpc.CallOption) (*TenantUpdateResponse, error)
	// 分页获取商户列表
	Paging(ctx context.Context, in *TenantPagingRequest, opts ...grpc.CallOption) (*TenantPagingResponse, error)
	// 查找商户
	Find(ctx context.Context, in *TenantFindRequest, opts ...grpc.CallOption) (*TenantFindResponse, error)
}

type tenantAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantAPIClient(cc grpc.ClientConnInterface) TenantAPIClient {
	return &tenantAPIClient{cc}
}

func (c *tenantAPIClient) Create(ctx context.Context, in *TenantCreateRequest, opts ...grpc.CallOption) (*TenantCreateResponse, error) {
	out := new(TenantCreateResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.platform.v1.TenantAPI/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAPIClient) Update(ctx context.Context, in *TenantUpdateRequest, opts ...grpc.CallOption) (*TenantUpdateResponse, error) {
	out := new(TenantUpdateResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.platform.v1.TenantAPI/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAPIClient) Paging(ctx context.Context, in *TenantPagingRequest, opts ...grpc.CallOption) (*TenantPagingResponse, error) {
	out := new(TenantPagingResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.platform.v1.TenantAPI/Paging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAPIClient) Find(ctx context.Context, in *TenantFindRequest, opts ...grpc.CallOption) (*TenantFindResponse, error) {
	out := new(TenantFindResponse)
	err := c.cc.Invoke(ctx, "/rockim.service.platform.v1.TenantAPI/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantAPIServer is the server API for TenantAPI service.
// All implementations must embed UnimplementedTenantAPIServer
// for forward compatibility
type TenantAPIServer interface {
	// 创建商户
	Create(context.Context, *TenantCreateRequest) (*TenantCreateResponse, error)
	// 修改商户
	Update(context.Context, *TenantUpdateRequest) (*TenantUpdateResponse, error)
	// 分页获取商户列表
	Paging(context.Context, *TenantPagingRequest) (*TenantPagingResponse, error)
	// 查找商户
	Find(context.Context, *TenantFindRequest) (*TenantFindResponse, error)
	mustEmbedUnimplementedTenantAPIServer()
}

// UnimplementedTenantAPIServer must be embedded to have forward compatible implementations.
type UnimplementedTenantAPIServer struct {
}

func (UnimplementedTenantAPIServer) Create(context.Context, *TenantCreateRequest) (*TenantCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTenantAPIServer) Update(context.Context, *TenantUpdateRequest) (*TenantUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTenantAPIServer) Paging(context.Context, *TenantPagingRequest) (*TenantPagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paging not implemented")
}
func (UnimplementedTenantAPIServer) Find(context.Context, *TenantFindRequest) (*TenantFindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedTenantAPIServer) mustEmbedUnimplementedTenantAPIServer() {}

// UnsafeTenantAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantAPIServer will
// result in compilation errors.
type UnsafeTenantAPIServer interface {
	mustEmbedUnimplementedTenantAPIServer()
}

func RegisterTenantAPIServer(s grpc.ServiceRegistrar, srv TenantAPIServer) {
	s.RegisterService(&TenantAPI_ServiceDesc, srv)
}

func _TenantAPI_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAPIServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.platform.v1.TenantAPI/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAPIServer).Create(ctx, req.(*TenantCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAPI_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAPIServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.platform.v1.TenantAPI/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAPIServer).Update(ctx, req.(*TenantUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAPI_Paging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantPagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAPIServer).Paging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.platform.v1.TenantAPI/Paging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAPIServer).Paging(ctx, req.(*TenantPagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAPI_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantFindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAPIServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockim.service.platform.v1.TenantAPI/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAPIServer).Find(ctx, req.(*TenantFindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TenantAPI_ServiceDesc is the grpc.ServiceDesc for TenantAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenantAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rockim.service.platform.v1.TenantAPI",
	HandlerType: (*TenantAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TenantAPI_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TenantAPI_Update_Handler,
		},
		{
			MethodName: "Paging",
			Handler:    _TenantAPI_Paging_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _TenantAPI_Find_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rockim/service/platform/v1/tenant.proto",
}
